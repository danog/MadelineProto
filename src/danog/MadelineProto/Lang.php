<?php
/**
 * Lang module.
 *
 * This file is part of MadelineProto.
 * MadelineProto is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 * MadelineProto is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 * You should have received a copy of the GNU General Public License along with MadelineProto.
 * If not, see <http://www.gnu.org/licenses/>.
 *
 * @author    Daniil Gentili <daniil@daniil.it>
 * @copyright 2016-2020 Daniil Gentili <daniil@daniil.it>
 * @license   https://opensource.org/licenses/AGPL-3.0 AGPLv3
 * @link https://docs.madelineproto.xyz MadelineProto documentation
 */

namespace danog\MadelineProto;

class Lang
{
    public static $lang = [
  'it' =>
  [
    'phpseclib_fork' => 'Per favore installa questo fork di phpseclib: https://github.com/danog/phpseclib',
    'inst_dc' => 'Istanziamento dei DataCenter...',
    'load_rsa' => 'Caricamento delle chiavi RSA...',
    'TL_translation' => 'Translazione degli schemi TL...',
    'dh_prime_check_0' => 'Esecuzione dei check dh_prime (0/3)...',
    'nearest_dc' => 'Siamo in %s, il DC più vicino è %d.',
    'serialization_ofd' => 'La serializzazione non è aggiornata, reistanziamento dell\'oggetto in corso!',
    'getupdates_deserialization' => 'Ottenimento aggiornamenti dopo deserializzazione...',
    'shutdown_reader_pool' => 'Chiusura pool di lettura, %d thread rimasti',
    'threading_on' => 'IL THREADING È ABILITATO',
    'socket_reader' => 'Lettore socket su DC %s: ',
    'socket_status_1' => 'CREAZIONE',
    'socket_status_2' => 'INVIO',
    'socket_status_3' => 'ATTESA',
    'socket_status_4' => 'PRONTO',
    'socket_status_5' => 'AVVIATO',
    'api_not_set' => 'Devi specificare una chiave ed un ID API, ottienili su https://my.telegram.org',
    'session_corrupted' => 'La sessione si è corrotta!',
    'resetSession_seqno' => 'Resettando ID sessione e numero di sequenza sul DC %s...',
    'gen_perm_auth_key' => 'Generando chiave di autorizzazione permanente per il DC %s...',
    'gen_temp_auth_key' => 'Generando chiave di autorizzazione temporanea per il DC %s...',
    'copy_auth_dcs' => 'Copiando autorizzazione dal DC %s al DC %s...',
    'write_client_info' => 'Scrittura info sul client (eseguendo nel contempo il metodo %s)...',
    'config_updated' => 'La configurazione è stata aggiornata!',
    'length_not_4' => 'La lunghezza non è uguale a 4',
    'length_not_8' => 'La lunghezza non è uguale a 8',
    'value_bigger_than_2147483647' => 'Il valore fornito (%s) è maggiore di 2147483647',
    'value_smaller_than_2147483648' => 'Il valore fornito (%s) è minore di -2147483648',
    'value_bigger_than_9223372036854775807' => 'Il valore fornito (%s) è maggiore di 9223372036854775807',
    'value_smaller_than_9223372036854775808' => 'Il valore fornito (%s) è minore di -9223372036854775808',
    'value_bigger_than_4294967296' => 'Il valore fornito (%s) è maggiore di 4294967296',
    'value_smaller_than_0' => 'Il valore fornito (%s) è minore di 0',
    'encode_double_error' => 'Non sono riuscito a codificare il numero a virgola mobile fornito',
    'file_not_exist' => 'Il file specificato non esiste',
    'deserialization_error' => 'C\'è stato un errore durante la deserializzazione',
    'rsa_init' => 'Istanziamento di \\tgseclib\\Crypt\\RSA in corso...',
    'loading_key' => 'Caricamento della chiave in corso...',
    'computing_fingerprint' => 'Calcolo del fingerprint in corso...',
    'rsa_encrypting' => 'Criptando con chiave RSA...',
    'rpc_tg_error' => 'Telegram ha ritornato un errore RPC: %s (%s), causato da %s:%s%sTL trace:',
    'v_error' => '506572206661766f726520616767696f726e612071756573746120696e7374616c6c617a696f6e65206469204d6164656c696e6550726f746f20636f6e206769742070756c6c206520636f6d706f73657220757064617465',
    'v_tgerror' => '506572206661766f726520616767696f726e61207068702d6c69627467766f6970',
    'no_mode_specified' => 'Nessuna modalità di logging è stata specificata!',
    'constructor_function_uncalled' => 'Il metodo costruttore non è stato ancora chiamato! Per favore chiama il metodo costruttore prima di usare questo metodo.',
    'proxy_class_invalid' => 'È stata specificata una classe proxy errata!',
    'socket_con_error' => 'Connessione fallita.',
    'protocol_not_implemented' => 'Questo protocollo non è stato ancora implementato.',
    'protocol_invalid' => 'È stato fornito un protocollo non valido',
    'nothing_in_socket' => 'Non c\'è niente nel socket!',
    'wrong_length_read' => 'ATTENZIONE: Non sono stati letti abbastanza byte (dovevo leggere %s, ho letto %s)!',
    'no_data_in_socket' => 'Non ci sono dati nel socket!',
    'dc_con_start' => 'Connessione al DC %s in corso...',
    'dc_con_stop' => 'Disconnessione dal DC %s in corso...',
    'dc_con_test_start' => 'Connessione al DC %s (server %s, %s, %s)...',
    'script_not_exist' => 'Lo script fornito non esiste',
    'apifactory_start' => 'Sto avviando la fabbrica di API...',
    'madelineproto_ready' => 'MadelineProto è pronto!',
    'logout_error' => 'C\'è stato un errore durante il logout!',
    'logout_ok' => 'Il logout è stato eseguito correttamente!',
    'already_loggedIn' => 'Questa istanza di MadelineProto è già loggata, prima faccio il logout...',
    'login_ok' => 'Il login è stato eseguito correttamente!',
    'login_user' => 'Sto eseguendo il login come utente normale...',
    'login_bot' => 'Sto eseguendo il login come bot...',
    'login_code_sending' => 'Sto inviando il codice...',
    'login_code_sent' => 'Il codice è stato inviato correttamente! Una volta ricevuto il codice dovrai usare la funzione completePhoneLogin.',
    'login_code_uncalled' => 'Non sto aspettando il codice! Usa la funzione phoneLogin.',
    'login_2fa_enabled' => 'L\'autenticazione a due fattori è abilitata, dovrai chiamare il metodo complete2falogin...',
    'login_need_signup' => 'Questo numero non è registrato su telegram, dovrai chiamare la funzione completeSignup...',
    'login_auth_key' => 'Sto facendo il login con la chiave di autorizzazione...',
    'not_loggedIn' => 'Non ho ancora fatto il login!',
    'signup_uncalled' => 'Chiama prima le funzioni phoneLogin e completePhoneLogin.',
    'signing_up' => 'Mi sto registrando su telegram come utente normale...',
    'signup_ok' => 'Mi sono registrato su Telegram!',
    '2fa_uncalled' => 'Non sto aspettando la password, chiama prima le funzioni phoneLogin e completePhoneLogin!',
    'getting_dialogs' => 'Sto ottenendo la lista delle chat...',
    'libtgvoip_required' => 'È necessario installare l\'estensione php-libtgvoip per accettare e gestire chiamate vocali, vistate https://docs.madelineproto.xyz per più info.',
    'peer_not_in_db' => 'Questo utente/gruppo/canale non è presente nel database interno MadelineProto',
    'calling_user' => 'Sto chiamando %s...',
    'generating_a' => 'Sto generando a...',
    'generating_g_a' => 'Sto generando g_a...',
    'call_error_1' => 'Impossibile trovare ed accettare la chiamata %s',
    'accepting_call' => 'Sto accettando una chiamata da %s...',
    'generating_b' => 'Sto generando b...',
    'call_already_accepted' => 'La chiamata %s è già stata accettata.',
    'call_already_declined' => 'La chiamata %s è già stata annullata.',
    'call_error_2' => 'Impossibile trovare e confermare la chiamata %s',
    'call_confirming' => 'Sto confermando una chiamata da %s',
    'call_error_3' => 'Impossibile trovare e completare la chiamata %s',
    'call_completing' => 'Sto completando una chiamata da %s...',
    'invalid_g_a' => 'g_a non valido!',
    'fingerprint_invalid' => 'fingerprint della chiave non valido!',
    'call_discarding' => 'Sto rifiutando la chiamata %s...',
    'call_set_rating' => 'Sto inviando la recensione della chiamata %s...',
    'call_debug_saving' => 'Sto inviando i dati di debug della chiamata %s...',
    'TL_loading' => 'Sto caricando gli schemi TL...',
    'file_parsing' => 'Leggendo %s...',
    'crc32_mismatch' => 'CRC32 non valido (%s diverso da %s) per %s',
    'src_file_invalid' => 'È stato fornito un file sorgente non valido: ',
    'translating_obj' => 'Traducendo gli oggetti...',
    'translating_methods' => 'Traducendo i metodi...',
    'bool_error' => 'Non sono riuscito ad estrarre un booleano',
    'not_numeric' => 'Il valore fornito non è numerico',
    'long_not_16' => 'Il valore fornito non è lungo 16 byte',
    'long_not_32' => 'Il valore fornito non è lungo 32 byte',
    'long_not_64' => 'Il valore fornito non è lungo 64 byte',
    'array_invalid' => 'Il valore fornito non è un array',
    'predicate_not_set' => 'Il predicato (valore sotto chiave _, esempio [\'_\' => \'inputPeer\']) non è impostato!',
    'type_extract_error' => 'Impossibile estrarre il tipo "%s"',
    'method_not_found' => 'Impossibile trovare il seguente metodo: ',
    'params_missing' => 'Non hai fornito un parametro obbligatorio, rileggi la documentazione API',
    'sec_peer_not_in_db' => 'La chat segreta non è presente nel database interno MadelineProto',
    'stream_handle_invalid' => 'Il valore fornito non è uno stream',
    'length_too_big' => 'Il valore fornito è troppo lungo',
    'deserialize_not_str' => 'Il valore generato non è una stringa',
    'type_extract_error_id' => 'Non sono riuscito ad estrarre il tipo %s con ID %s',
    'vector_invalid' => 'ID vettore non valido: ',
    'constructor_not_found' => 'Costruttore non trovato per tipo: ',
    'rand_bytes_too_small' => 'random_bytes è troppo corto!',
    'botapi_conversion_error' => 'NOn sono risucito a convertire %s in un oggetto bot API',
    'non_text_conversion' => 'Non posso ancora convertire messaggi media',
    'last_byte_invalid' => 'L\'ultimo byte non è valido',
    'file_type_invalid' => 'È stato fornito un tipo file errato',
    'recreate_temp_auth_key' => 'Sono stato costretto a rigenerare la chiave di autorizzazione temporanea',
    'resetting_auth_key' => 'ATTENZIONE: Sto resettando la chiave temporanea...',
    'shutting_down_reader_pool' => 'Chisura pool di lettura',
    'shutting_down_handler_pool' => 'Chiusura pool di gestione per DC %s, %d thread rimasti',
    'secret_chat_skipping' => 'Non ho la chat segreta %s nel database, ignorando messaggio',
    'fingerprint_mismatch' => 'Fingerprint della chiave non valido',
    'msg_data_length_too_big' => 'message_data_length è troppo grande',
    'length_not_divisible_16' => 'La lunghezza dei dati decifrati non è divisibile per 16',
    'msg_key_mismatch' => 'msg_key non valido',
    'rand_bytes_too_short' => 'random_bytes è troppo corto!',
    'resending_unsupported' => 'IL riinvio di messaggi non è ancora supportato',
    'unrecognized_dec_msg' => 'È stato ricevuto un messaggio decifrato sconosciuto: ',
    'serializing_madelineproto' => 'Sto serializzando MadelineProto...',
    'req_pq' => 'Sto richiedendo pq...',
    'done' => 'Fatto!',
    'cdn_reupload' => 'Il file non è disponibile sul nostro CDN, richiedo la copia!',
    'stored_on_cdn' => 'Il file è scaricabile tramite CDN!',
  ],
  'en' =>
  [
    'req_pq' => 'Requesting pq...',
    'done' => 'Done!',
    'cdn_reupload' => 'File is not stored on CDN, requesting reupload!',
    'stored_on_cdn' => 'File is stored on CDN!',
    'serializing_madelineproto' => 'Serializing MadelineProto...',
    'phpseclib_fork' => 'Please install this fork of phpseclib: https://github.com/danog/phpseclib',
    'inst_dc' => 'Istantiating DataCenter...',
    'load_rsa' => 'Loading RSA keys...',
    'TL_translation' => 'Translating TL schemas...',
    'dh_prime_check_0' => 'Executing dh_prime checks (0/3)...',
    'nearest_dc' => 'We\'re in %s, nearest DC is %d.',
    'serialization_ofd' => 'Serialization is out of date, reconstructing object!',
    'getupdates_deserialization' => 'Getting updates after deserialization...',
    'shutdown_reader_pool' => 'Shutting down reader pool, %d jobs left',
    'threading_on' => 'THREADING IS ENABLED',
    'socket_reader' => 'Socket reader on DC %s: ',
    'socket_status_1' => 'CREATING',
    'socket_status_2' => 'SUBMITTING',
    'socket_status_3' => 'WAITING',
    'socket_status_4' => 'READY',
    'socket_status_5' => 'WORKING',
    'api_not_set' => 'You must provide an api key and an api id, get your own @ my.telegram.org',
    'session_corrupted' => 'The session is corrupted!',
    'resetSession_seqno' => 'Resetting session id and seq_no in DC %s...',
    'gen_perm_auth_key' => 'Generating permanent authorization key for DC %s...',
    'gen_temp_auth_key' => 'Generating temporary authorization key for DC %s...',
    'copy_auth_dcs' => 'Copying authorization from DC %s to DC %s...',
    'write_client_info' => 'Writing client info (also executing %s)...',
    'config_updated' => 'Updated config!',
    'length_not_4' => 'Length is not equal to 4',
    'length_not_8' => 'Length is not equal to 8',
    'value_bigger_than_2147483647' => 'Provided value %s is bigger than 2147483647',
    'value_smaller_than_2147483648' => 'Provided value %s is smaller than -2147483648',
    'value_bigger_than_9223372036854775807' => 'Provided value %s is bigger than 9223372036854775807',
    'value_smaller_than_9223372036854775808' => 'Provided value %s is smaller than -9223372036854775808',
    'value_bigger_than_4294967296' => 'Provided value %s is bigger than 4294967296',
    'value_smaller_than_0' => 'Provided value %s is smaller than 0',
    'encode_double_error' => 'Could not properly encode double',
    'file_not_exist' => 'File does not exist',
    'deserialization_error' => 'An error occurred on deserialization',
    'rsa_init' => 'Istantiating \\tgseclib\\Crypt\\RSA...',
    'loading_key' => 'Loading key...',
    'computing_fingerprint' => 'Computing fingerprint...',
    'rsa_encrypting' => 'Encrypting with rsa key...',
    'rpc_tg_error' => 'Telegram returned an RPC error: %s (%s), caused by %s:%s%sTL trace:',
    'v_error' => '506c656173652075706461746520746f20746865206c61746573742076657273696f6e206f66204d6164656c696e6550726f746f2e',
    'v_tgerror' => '506c6561736520757064617465207068702d6c69627467766f6970',
    'no_mode_specified' => 'No mode was specified!',
    'constructor_function_uncalled' => 'The constructor function wasn\'t called! Please call the constructor function before using this method.',
    'proxy_class_invalid' => 'Invalid proxy class provided!',
    'socket_con_error' => 'Connection: couldn\'t connect to socket.',
    'protocol_not_implemented' => 'Connection: This protocol isn\'t implemented yet.',
    'protocol_invalid' => 'Connection: invalid protocol specified.',
    'nothing_in_socket' => 'Nothing in the socket!',
    'wrong_length_read' => 'WARNING: Wrong length was read (should\'ve read %s, read %s)!',
    'no_data_in_socket' => 'No data in the socket!',
    'dc_con_start' => 'Connecting to DC %s...',
    'dc_con_stop' => 'Disconnecting from DC %s...',
    'dc_con_test_start' => 'Connecting to DC %s (%s server, %s, %s)...',
    'script_not_exist' => 'Provided script does not exist',
    'apifactory_start' => 'Running APIFactory...',
    'madelineproto_ready' => 'MadelineProto is ready!',
    'logout_error' => 'An error occurred while logging out!',
    'logout_ok' => 'Logged out successfully!',
    'already_loggedIn' => 'This instance of MadelineProto is already logged in. Logging out first...',
    'login_ok' => 'Logged in successfully!',
    'login_user' => 'Logging in as a normal user...',
    'login_bot' => 'Logging in as a bot...',
    'login_code_sending' => 'Sending code...',
    'login_code_sent' => 'Code sent successfully! Once you receive the code you should use the completePhoneLogin function.',
    'login_code_uncalled' => 'I\'m not waiting for the code! Please call the phoneLogin method first',
    'login_2fa_enabled' => '2FA enabled, you will have to call the complete2falogin function...',
    'login_need_signup' => 'An account has not been created for this number, you will have to call the completeSignup function...',
    'login_auth_key' => 'Logging in using auth key...',
    'not_loggedIn' => 'I\'m not logged in!',
    'signup_uncalled' => 'I\'m not waiting to signup! Please call the phoneLogin and the completePhoneLogin methods first!',
    'signing_up' => 'Signing up as a normal user...',
    'signup_ok' => 'Signed up in successfully!',
    '2fa_uncalled' => 'I\'m not waiting for the password! Please call the phoneLogin and the completePhoneLogin methods first!',
    'getting_dialogs' => 'Getting dialogs...',
    'libtgvoip_required' => 'The php-libtgvoip extension is required to accept and manage calls. See daniil.it/MadelineProto for more info.',
    'peer_not_in_db' => 'This peer is not present in the internal peer database',
    'calling_user' => 'Calling %s...',
    'generating_a' => 'Generating a...',
    'generating_g_a' => 'Generating g_a...',
    'call_error_1' => 'Could not find and accept call %s',
    'accepting_call' => 'Accepting call from %s...',
    'generating_b' => 'Generating b...',
    'call_already_accepted' => 'Call %s already accepted',
    'call_already_declined' => 'Call %s already declined',
    'call_error_2' => 'Could not find and confirm call %s',
    'call_confirming' => 'Confirming call from %s...',
    'call_error_3' => 'Could not find and complete call %s',
    'call_completing' => 'Completing call from %s...',
    'invalid_g_a' => 'Invalid g_a!',
    'fingerprint_invalid' => 'Invalid key fingerprint!',
    'call_discarding' => 'Discarding call %s...',
    'call_set_rating' => 'Setting rating for call %s...',
    'call_debug_saving' => 'Saving debug data for call %s...',
    'TL_loading' => 'Loading TL schemes...',
    'file_parsing' => 'Parsing %s...',
    'crc32_mismatch' => 'CRC32 mismatch (%s, %s) for %s',
    'src_file_invalid' => 'Invalid source file was provided: ',
    'translating_obj' => 'Translating objects...',
    'translating_methods' => 'Translating methods...',
    'bool_error' => 'Could not extract boolean',
    'not_numeric' => 'Given value isn\'t numeric',
    'long_not_16' => 'Given value is not 16 bytes long',
    'long_not_32' => 'Given value is not 32 bytes long',
    'long_not_64' => 'Given value is not 64 bytes long',
    'array_invalid' => 'You didn\'t provide a valid array',
    'predicate_not_set' => 'Predicate (value under _) was not set!',
    'type_extract_error' => 'Could not extract type "%s"',
    'method_not_found' => 'Could not find method: ',
    'params_missing' => 'Missing required parameter',
    'sec_peer_not_in_db' => 'This secret peer is not present in the internal peer database',
    'stream_handle_invalid' => 'An invalid stream handle was provided.',
    'length_too_big' => 'Length is too big',
    'deserialize_not_str' => 'Deserialize: Generated value isn\'t a string',
    'type_extract_error_id' => 'Could not extract type: %s with id %s',
    'vector_invalid' => 'Invalid vector constructor: ',
    'constructor_not_found' => 'Constructor not found for type: ',
    'rand_bytes_too_small' => 'Random_bytes is too small!',
    'botapi_conversion_error' => 'Can\'t convert %s to a bot API object',
    'non_text_conversion' => 'Can\'t convert non text messages yet!',
    'last_byte_invalid' => 'Invalid last byte',
    'file_type_invalid' => 'Invalid file type detected (%s)',
    'recreate_temp_auth_key' => 'I had to recreate the temporary authorization key',
    'resetting_auth_key' => 'WARNING: Resetting auth key...',
    'shutting_down_reader_pool' => 'Shutting down reader pool ',
    'shutting_down_handler_pool' => 'Shutting down handler pool for dc %s, %d jobs left',
    'secret_chat_skipping' => 'I do not have the secret chat %s in the database, skipping message...',
    'fingerprint_mismatch' => 'Key fingerprint mismatch',
    'msg_data_length_too_big' => 'Message_data_length is too big',
    'length_not_divisible_16' => 'Length of decrypted data is not divisible by 16',
    'msg_key_mismatch' => 'Msg_key mismatch',
    'rand_bytes_too_short' => 'Random_bytes is too short!',
    'resending_unsupported' => 'Resending of messages is not yet supported',
    'unrecognized_dec_msg' => 'Unrecognized decrypted message received: ',
    'method_req_pq' => 'Requests PQ for factorization',
    'method_req_pq_param_nonce_type_int128' => 'Random number for cryptographic security',
    'method_req_pq_multi' => 'Requests PQ for factorization (new version)',
    'method_req_pq_multi_param_nonce_type_int128' => 'Random number for cryptographic security',
    'method_req_DH_params' => 'Requests Diffie-hellman parameters for key exchange',
    'method_req_DH_params_param_nonce_type_int128' => 'Random number for cryptographic security',
    'method_req_DH_params_param_server_nonce_type_int128' => 'Random number for cryptographic security, given by server',
    'method_req_DH_params_param_p_type_bytes' => 'Factorized p from pq',
    'method_req_DH_params_param_q_type_bytes' => 'Factorized q from pq',
    'method_req_DH_params_param_public_key_fingerprint_type_long' => 'Server RSA fingerprint',
    'method_req_DH_params_param_encrypted_data_type_bytes' => 'Encrypted key exchange message',
    'method_set_client_DH_params' => 'Sets client diffie-hellman parameters',
    'method_set_client_DH_params_param_nonce_type_int128' => 'Random number for cryptographic security',
    'method_set_client_DH_params_param_server_nonce_type_int128' => 'Random number for cryptographic security, given by server',
    'method_set_client_DH_params_param_encrypted_data_type_bytes' => 'Encrypted key exchange message',
    'method_rpc_drop_answer' => 'Do not send answer to provided request',
    'method_rpc_drop_answer_param_req_msg_id_type_long' => 'The message ID of the request',
    'method_get_future_salts' => 'Get future salts',
    'method_get_future_salts_param_num_type_int' => 'How many salts should be fetched',
    'method_ping' => 'Pings the server',
    'method_ping_param_ping_id_type_long' => 'Ping ID',
    'method_ping_delay_disconnect' => 'Pings the server and causes disconection if the same method is not called within ping_disconnect_delay',
    'method_ping_delay_disconnect_param_ping_id_type_long' => 'Ping ID',
    'method_ping_delay_disconnect_param_disconnect_delay_type_int' => 'Disconection delay',
    'method_destroy_session' => 'Destroy the current MTProto session',
    'method_destroy_session_param_session_id_type_long' => 'The session to destroy',
    'method_http_wait' => 'Makes the server send messages waiting in the buffer',
    'method_http_wait_param_max_delay_type_int' => 'Denotes the maximum number of milliseconds that has elapsed between the first message for this session and the transmission of an HTTP response',
    'method_http_wait_param_wait_after_type_int' => 'After the receipt of the latest message for a particular session, the server waits another wait_after milliseconds in case there are more messages. If there are no additional messages, the result is transmitted (a container with all the messages).',
    'method_http_wait_param_max_wait_type_int' => 'If more messages appear, the wait_after timer is reset.',
    'method_invokeAfterMsg' => 'Invokes a query after successfull completion of one of the previous queries.',
    'method_invokeAfterMsg_param_msg_id_type_long' => 'Message identifier on which a current query depends',
    'method_invokeAfterMsg_param_query_type_!X' => 'The query itself',
    'method_invokeAfterMsgs' => 'Invokes a query after a successfull completion of previous queries',
    'method_invokeAfterMsgs_param_msg_ids_type_Vector t' => 'List of messages on which a current query depends',
    'method_invokeAfterMsgs_param_query_type_!X' => 'The query itself',
    'method_initConnection' => 'Initialize connection',
    'method_initConnection_param_api_id_type_int' => 'Application identifier (see. [App configuration](https://core.telegram.org/myapp))',
    'method_initConnection_param_device_model_type_string' => 'Device model',
    'method_initConnection_param_system_version_type_string' => 'Operation system version',
    'method_initConnection_param_app_version_type_string' => 'Application version',
    'method_initConnection_param_system_lang_code_type_string' => 'Code for the language used on the device\'s OS, ISO 639-1 standard',
    'method_initConnection_param_lang_pack_type_string' => 'Language pack to use',
    'method_initConnection_param_lang_code_type_string' => 'Code for the language used on the client, ISO 639-1 standard',
    'method_initConnection_param_query_type_!X' => 'The query itself',
    'method_invokeWithLayer' => 'Invoke the specified query using the specified API [layer](https://core.telegram.org/api/invoking#layers)',
    'method_invokeWithLayer_param_layer_type_int' => 'The layer to use',
    'method_invokeWithLayer_param_query_type_!X' => 'The query',
    'method_invokeWithoutUpdates' => 'Invoke a request without subscribing the used connection for [updates](https://core.telegram.org/api/updates) (this is enabled by default for [file queries](https://core.telegram.org/api/files)).',
    'method_invokeWithoutUpdates_param_query_type_!X' => 'The query',
    'method_auth.checkPhone' => 'Check if this phone number is registered on telegram',
    'method_auth.checkPhone_param_phone_number_type_string' => 'The phone number to check',
    'method_auth.sendCode' => 'You cannot use this method directly, use the phoneLogin method instead (see https://docs.madelineproto.xyz for more info)',
    'method_auth.sendCode_param_allow_flashcall_type_true' => 'You cannot use this method directly, use the phoneLogin method instead (see https://docs.madelineproto.xyz for more info)',
    'method_auth.sendCode_param_phone_number_type_string' => 'You cannot use this method directly, use the phoneLogin method instead (see https://docs.madelineproto.xyz for more info)',
    'method_auth.sendCode_param_current_number_type_Bool' => 'You cannot use this method directly, use the phoneLogin method instead (see https://docs.madelineproto.xyz for more info)',
    'method_auth.sendCode_param_api_id_type_int' => 'You cannot use this method directly, use the phoneLogin method instead (see https://docs.madelineproto.xyz for more info)',
    'method_auth.sendCode_param_api_hash_type_string' => 'You cannot use this method directly, use the phoneLogin method instead (see https://docs.madelineproto.xyz for more info)',
    'method_auth.signUp' => 'You cannot use this method directly, use the completeSignup method instead (see https://docs.madelineproto.xyz for more info)',
    'method_auth.signUp_param_phone_number_type_string' => 'You cannot use this method directly, use the completeSignup method instead (see https://docs.madelineproto.xyz for more info)',
    'method_auth.signUp_param_phone_code_hash_type_string' => 'You cannot use this method directly, use the completeSignup method instead (see https://docs.madelineproto.xyz for more info)',
    'method_auth.signUp_param_phone_code_type_string' => 'You cannot use this method directly, use the completeSignup method instead (see https://docs.madelineproto.xyz for more info)',
    'method_auth.signUp_param_first_name_type_string' => 'You cannot use this method directly, use the completeSignup method instead (see https://docs.madelineproto.xyz for more info)',
    'method_auth.signUp_param_last_name_type_string' => 'You cannot use this method directly, use the completeSignup method instead (see https://docs.madelineproto.xyz for more info)',
    'method_auth.signIn' => 'You cannot use this method directly, use the completePhoneLogin method instead (see https://docs.madelineproto.xyz for more info)',
    'method_auth.signIn_param_phone_number_type_string' => 'You cannot use this method directly, use the completePhoneLogin method instead (see https://docs.madelineproto.xyz for more info)',
    'method_auth.signIn_param_phone_code_hash_type_string' => 'You cannot use this method directly, use the completePhoneLogin method instead (see https://docs.madelineproto.xyz for more info)',
    'method_auth.signIn_param_phone_code_type_string' => 'You cannot use this method directly, use the completePhoneLogin method instead (see https://docs.madelineproto.xyz for more info)',
    'method_auth.logOut' => 'You cannot use this method directly, use the logout method instead (see https://docs.madelineproto.xyz for more info)',
    'method_auth.resetAuthorizations' => 'Terminates all user\'s authorized sessions except for the current one.

After calling this method it is necessary to reregister the current device using the method [account.registerDevice](../methods/account.registerDevice.md)',
    'method_auth.sendInvites' => 'Invite friends to telegram!',
    'method_auth.sendInvites_param_phone_numbers_type_Vector t' => 'Phone numbers to invite',
    'method_auth.sendInvites_param_message_type_string' => 'The message to send',
    'method_auth.exportAuthorization' => 'You cannot use this method directly, use $MadelineProto->exportAuthorization() instead, see https://docs.madelineproto.xyz/docs/LOGIN.html',
    'method_auth.exportAuthorization_param_dc_id_type_int' => 'You cannot use this method directly, use $MadelineProto->exportAuthorization() instead, see https://docs.madelineproto.xyz/docs/LOGIN.html',
    'method_auth.importAuthorization' => 'You cannot use this method directly, use $MadelineProto->importAuthorization($authorization) instead, see https://docs.madelineproto.xyz/docs/LOGIN.html',
    'method_auth.importAuthorization_param_id_type_int' => 'You cannot use this method directly, use $MadelineProto->importAuthorization($authorization) instead, see https://docs.madelineproto.xyz/docs/LOGIN.html',
    'method_auth.importAuthorization_param_bytes_type_bytes' => 'You cannot use this method directly, use $MadelineProto->importAuthorization($authorization) instead, see https://docs.madelineproto.xyz/docs/LOGIN.html',
    'method_auth.bindTempAuthKey' => 'You cannot use this method directly, instead modify the PFS and default_temp_auth_key_expires_in settings, see https://docs.madelineproto.xyz/docs/SETTINGS.html for more info',
    'method_auth.bindTempAuthKey_param_perm_auth_key_id_type_long' => 'You cannot use this method directly, instead modify the PFS and default_temp_auth_key_expires_in settings, see https://docs.madelineproto.xyz/docs/SETTINGS.html for more info',
    'method_auth.bindTempAuthKey_param_nonce_type_long' => 'You cannot use this method directly, instead modify the PFS and default_temp_auth_key_expires_in settings, see https://docs.madelineproto.xyz/docs/SETTINGS.html for more info',
    'method_auth.bindTempAuthKey_param_expires_at_type_int' => 'You cannot use this method directly, instead modify the PFS and default_temp_auth_key_expires_in settings, see https://docs.madelineproto.xyz/docs/SETTINGS.html for more info',
    'method_auth.bindTempAuthKey_param_encrypted_message_type_bytes' => 'You cannot use this method directly, instead modify the PFS and default_temp_auth_key_expires_in settings, see https://docs.madelineproto.xyz/docs/SETTINGS.html for more info',
    'method_auth.importBotAuthorization' => 'You cannot use this method directly, use the botLogin method instead (see https://docs.madelineproto.xyz for more info)',
    'method_auth.importBotAuthorization_param_api_id_type_int' => 'You cannot use this method directly, use the botLogin method instead (see https://docs.madelineproto.xyz for more info)',
    'method_auth.importBotAuthorization_param_api_hash_type_string' => 'You cannot use this method directly, use the botLogin method instead (see https://docs.madelineproto.xyz for more info)',
    'method_auth.importBotAuthorization_param_bot_auth_token_type_string' => 'You cannot use this method directly, use the botLogin method instead (see https://docs.madelineproto.xyz for more info)',
    'method_auth.checkPassword' => 'You cannot use this method directly, use the complete2falogin method instead (see https://docs.madelineproto.xyz for more info)',
    'method_auth.checkPassword_param_password_hash_type_bytes' => 'You cannot use this method directly, use the complete2falogin method instead (see https://docs.madelineproto.xyz for more info)',
    'method_auth.requestPasswordRecovery' => 'Request recovery code of a [2FA password](https://core.telegram.org/api/srp), only for accounts with a [recovery email configured](https://core.telegram.org/api/srp#email-verification).',
    'method_auth.recoverPassword' => 'Reset the [2FA password](https://core.telegram.org/api/srp) using the recovery code sent using [auth.requestPasswordRecovery](../methods/auth.requestPasswordRecovery.md).',
    'method_auth.recoverPassword_param_code_type_string' => 'Code received via email',
    'method_auth.resendCode' => 'Resend the login code via another medium, the phone code type is determined by the return value of the previous auth.sendCode/auth.resendCode: see [login](https://core.telegram.org/api/auth) for more info.',
    'method_auth.resendCode_param_phone_number_type_string' => 'The phone number',
    'method_auth.resendCode_param_phone_code_hash_type_string' => 'The phone code hash obtained from [auth.sendCode](../methods/auth.sendCode.md)',
    'method_auth.cancelCode' => 'Cancel the login verification code',
    'method_auth.cancelCode_param_phone_number_type_string' => 'Phone number',
    'method_auth.cancelCode_param_phone_code_hash_type_string' => 'Phone code hash from [auth.sendCode](../methods/auth.sendCode.md)',
    'method_auth.dropTempAuthKeys' => 'Delete all temporary authorization keys **except for** the ones specified',
    'method_auth.dropTempAuthKeys_param_except_auth_keys_type_Vector t' => 'The temporary authorization keys to keep',
    'method_account.registerDevice' => 'Register device to receive [PUSH notifications](https://core.telegram.org/api/push-updates)',
    'method_account.registerDevice_param_token_type_type_int' => 'Device token type.<br>**Possible values**:<br>`1` \\- APNS (device token for apple push)<br>`2` \\- FCM (firebase token for google firebase)<br>`3` \\- MPNS (channel URI for microsoft push)<br>`4` \\- Simple push (endpoint for firefox\'s simple push API)<br>`5` \\- Ubuntu phone (token for ubuntu push)<br>`6` \\- Blackberry (token for blackberry push)<br>`7` \\- Unused<br>`8` \\- WNS (windows push)<br>`9` \\- APNS VoIP (token for apple push VoIP)<br>`10` \\- Web push (web push, see below)<br>`11` \\- MPNS VoIP (token for microsoft push VoIP)<br>`12` \\- Tizen (token for tizen push)<br><br>For `10` web push, the token must be a JSON-encoded object containing the keys described in [PUSH updates](https://core.telegram.org/api/push-updates)',
    'method_account.registerDevice_param_token_type_string' => 'Device token',
    'method_account.registerDevice_param_app_sandbox_type_Bool' => 'If [(boolTrue)](../constructors/boolTrue.md) is transmitted, a sandbox-certificate will be used during transmission.',
    'method_account.registerDevice_param_other_uids_type_Vector t' => 'Other UIDs',
    'method_account.unregisterDevice' => 'Deletes a device by its token, stops sending PUSH-notifications to it.',
    'method_account.unregisterDevice_param_token_type_type_int' => 'Device token type.<br>**Possible values**:<br>`1` \\- APNS (device token for apple push)<br>`2` \\- FCM (firebase token for google firebase)<br>`3` \\- MPNS (channel URI for microsoft push)<br>`4` \\- Simple push (endpoint for firefox\'s simple push API)<br>`5` \\- Ubuntu phone (token for ubuntu push)<br>`6` \\- Blackberry (token for blackberry push)<br>`7` \\- Unused<br>`8` \\- WNS (windows push)<br>`9` \\- APNS VoIP (token for apple push VoIP)<br>`10` \\- Web push (web push, see below)<br>`11` \\- MPNS VoIP (token for microsoft push VoIP)<br>`12` \\- Tizen (token for tizen push)<br><br>For `10` web push, the token must be a JSON-encoded object containing the keys described in [PUSH updates](https://core.telegram.org/api/push-updates)',
    'method_account.unregisterDevice_param_token_type_string' => 'Device token',
    'method_account.unregisterDevice_param_other_uids_type_Vector t' => 'Other UIDs',
    'method_account.updateNotifySettings' => 'Edits notification settings from a given user/group, from all users/all groups.',
    'method_account.updateNotifySettings_param_peer_type_InputNotifyPeer' => 'Notification source',
    'method_account.updateNotifySettings_param_settings_type_InputPeerNotifySettings' => 'Notification settings',
    'method_account.getNotifySettings' => 'Gets current notification settings for a given user/group, from all users/all groups.',
    'method_account.getNotifySettings_param_peer_type_InputNotifyPeer' => 'Notification source',
    'method_account.resetNotifySettings' => 'Resets all notification settings from users and groups.',
    'method_account.updateProfile' => 'Updates user profile.',
    'method_account.updateProfile_param_first_name_type_string' => 'New user first name',
    'method_account.updateProfile_param_last_name_type_string' => 'New user last name',
    'method_account.updateProfile_param_about_type_string' => 'New bio',
    'method_account.updateStatus' => 'Updates online user status.',
    'method_account.updateStatus_param_offline_type_Bool' => 'If [(boolTrue)](../constructors/boolTrue.md) is transmitted, user status will change to [(userStatusOffline)](../constructors/userStatusOffline.md).',
    'method_account.getWallPapers' => 'Returns a list of available wallpapers.',
    'method_account.reportPeer' => 'Report a peer for violation of telegram\'s Terms of Service',
    'method_account.reportPeer_param_peer_type_InputPeer' => 'The peer to report',
    'method_account.reportPeer_param_reason_type_ReportReason' => 'The reason why this peer is being reported',
    'method_account.checkUsername' => 'Validates a username and checks availability.',
    'method_account.checkUsername_param_username_type_string' => 'Username<br>Accepted characters: A-z (case-insensitive), 0-9 and underscores.<br>Length: 5-32 characters.',
    'method_account.updateUsername' => 'Changes username for the current user.',
    'method_account.updateUsername_param_username_type_string' => 'Username or empty string if username is to be removed<br>Accepted characters: a-z (case-insensitive), 0-9 and underscores.<br>Length: 5-32 characters.',
    'method_account.getPrivacy' => 'Get privacy settings of current account',
    'method_account.getPrivacy_param_key_type_InputPrivacyKey' => 'Peer category whose privacy settings should be fetched',
    'method_account.setPrivacy' => 'Change privacy settings of current account',
    'method_account.setPrivacy_param_key_type_InputPrivacyKey' => 'Peers to which the privacy rules apply',
    'method_account.setPrivacy_param_rules_type_Vector t' => 'Privacy settings',
    'method_account.deleteAccount' => 'Delete the user\'s account from the telegram servers. Can be used, for example, to delete the account of a user that provided the login code, but forgot the [2FA password and no recovery method is configured](https://core.telegram.org/api/srp).',
    'method_account.deleteAccount_param_reason_type_string' => 'Why is the account being deleted, can be empty',
    'method_account.getAccountTTL' => 'Get days to live of account',
    'method_account.setAccountTTL' => 'Set account self-destruction period',
    'method_account.setAccountTTL_param_ttl_type_AccountDaysTTL' => 'Time to live in days',
    'method_account.sendChangePhoneCode' => 'Verify a new phone number to associate to the current account',
    'method_account.sendChangePhoneCode_param_allow_flashcall_type_true' => 'Can the code be sent using a flash call instead of an SMS?',
    'method_account.sendChangePhoneCode_param_phone_number_type_string' => 'New phone number',
    'method_account.sendChangePhoneCode_param_current_number_type_Bool' => 'Current phone number',
    'method_account.changePhone' => 'Change the phone number of the current account',
    'method_account.changePhone_param_phone_number_type_string' => 'New phone number',
    'method_account.changePhone_param_phone_code_hash_type_string' => 'Phone code hash received when calling [account.sendChangePhoneCode](../methods/account.sendChangePhoneCode.md)',
    'method_account.changePhone_param_phone_code_type_string' => 'Phone code received when calling [account.sendChangePhoneCode](../methods/account.sendChangePhoneCode.md)',
    'method_account.updateDeviceLocked' => 'When client-side passcode lock feature is enabled, will not show message texts in incoming [PUSH notifications](https://core.telegram.org/api/push-updates).',
    'method_account.updateDeviceLocked_param_period_type_int' => 'Inactivity period after which to start hiding message texts in [PUSH notifications](https://core.telegram.org/api/push-updates).',
    'method_account.getAuthorizations' => 'Get logged-in sessions',
    'method_account.resetAuthorization' => 'Log out an active [authorized session](https://core.telegram.org/api/auth) by its hash',
    'method_account.resetAuthorization_param_hash_type_long' => 'Session hash',
    'method_account.getPassword' => 'Obtain configuration for two-factor authorization with password',
    'method_account.getPasswordSettings' => 'You cannot use this method directly; use $MadelineProto->update2fa($params), instead (see https://docs.madelineproto.xyz for more info)',
    'method_account.getPasswordSettings_param_current_password_hash_type_bytes' => 'You cannot use this method directly; use $MadelineProto->update2fa($params), instead (see https://docs.madelineproto.xyz for more info)',
    'method_account.updatePasswordSettings' => 'You cannot use this method directly; use $MadelineProto->update2fa($params), instead (see https://docs.madelineproto.xyz for more info)',
    'method_account.updatePasswordSettings_param_current_password_hash_type_bytes' => 'You cannot use this method directly; use $MadelineProto->update2fa($params), instead (see https://docs.madelineproto.xyz for more info)',
    'method_account.updatePasswordSettings_param_new_settings_type_account.PasswordInputSettings' => 'You cannot use this method directly; use $MadelineProto->update2fa($params), instead (see https://docs.madelineproto.xyz for more info)',
    'method_account.sendConfirmPhoneCode' => 'Send confirmation code to cancel account deletion, for more info [click here »](https://core.telegram.org/api/account-deletion)',
    'method_account.sendConfirmPhoneCode_param_allow_flashcall_type_true' => 'Can telegram call you instead of sending an SMS?',
    'method_account.sendConfirmPhoneCode_param_hash_type_string' => 'The hash from the service notification, for more info [click here »](https://core.telegram.org/api/account-deletion)',
    'method_account.sendConfirmPhoneCode_param_current_number_type_Bool' => 'The current phone number',
    'method_account.confirmPhone' => 'Confirm a phone number to cancel account deletion, for more info [click here »](https://core.telegram.org/api/account-deletion)',
    'method_account.confirmPhone_param_phone_code_hash_type_string' => 'Phone code hash, for more info [click here »](https://core.telegram.org/api/account-deletion)',
    'method_account.confirmPhone_param_phone_code_type_string' => 'SMS code, for more info [click here »](https://core.telegram.org/api/account-deletion)',
    'method_account.getTmpPassword' => 'Get temporary payment password',
    'method_account.getTmpPassword_param_password_hash_type_bytes' => 'The password hash',
    'method_account.getTmpPassword_param_period_type_int' => 'Time during which the temporary password will be valid, in seconds; should be between 60 and 86400',
    'method_account.getWebAuthorizations' => 'Get web [login widget](https://core.telegram.org/widgets/login) authorizations',
    'method_account.resetWebAuthorization' => 'Log out an active web [telegram login](https://core.telegram.org/widgets/login) session',
    'method_account.resetWebAuthorization_param_hash_type_long' => '[Session](../constructors/webAuthorization.md) hash',
    'method_account.resetWebAuthorizations' => 'Reset all active web [telegram login](https://core.telegram.org/widgets/login) sessions',
    'method_users.getUsers' => 'Returns basic user info according to their identifiers.',
    'method_users.getUsers_param_id_type_Vector t' => 'The ids of the users',
    'method_users.getFullUser' => 'You cannot use this method directly, use the getPwrChat, getInfo, getFullInfo methods instead (see https://docs.madelineproto.xyz for more info)',
    'method_users.getFullUser_param_id_type_InputUser' => 'You cannot use this method directly, use the getPwrChat, getInfo, getFullInfo methods instead (see https://docs.madelineproto.xyz for more info)',
    'method_contacts.getStatuses' => 'Returns the list of contact statuses.',
    'method_contacts.getContacts' => 'Returns the current user\'s contact list.',
    'method_contacts.getContacts_param_hash_type_int' => 'If there already is a full contact list on the client, a [hash](https://core.telegram.org/api/offsets#hash-generation) of a the list of contact IDs in ascending order may be passed in this parameter. If the contact set was not changed, [(contacts.contactsNotModified)](../constructors/contacts.contactsNotModified.md) will be returned.',
    'method_contacts.importContacts' => 'Imports contacts: saves a full list on the server, adds already registered contacts to the contact list, returns added contacts and their info.',
    'method_contacts.importContacts_param_contacts_type_Vector t' => 'The numbers to import',
    'method_contacts.deleteContact' => 'Delete a contact',
    'method_contacts.deleteContact_param_id_type_InputUser' => 'The contact to delete',
    'method_contacts.deleteContacts' => 'Deletes several contacts from the list.',
    'method_contacts.deleteContacts_param_id_type_Vector t' => 'The contacts to delete',
    'method_contacts.block' => 'Adds the user to the blacklist.',
    'method_contacts.block_param_id_type_InputUser' => 'User ID',
    'method_contacts.unblock' => 'Deletes the user from the blacklist.',
    'method_contacts.unblock_param_id_type_InputUser' => 'User ID',
    'method_contacts.getBlocked' => 'Returns the list of blocked users.',
    'method_contacts.getBlocked_param_offset_type_int' => 'The number of list elements to be skipped',
    'method_contacts.getBlocked_param_limit_type_int' => 'The number of list elements to be returned',
    'method_contacts.exportCard' => 'Export contact as card',
    'method_contacts.importCard' => 'Import card as contact',
    'method_contacts.importCard_param_export_card_type_Vector t' => 'The card',
    'method_contacts.search' => 'Returns users found by username substring.',
    'method_contacts.search_param_q_type_string' => 'Target substring',
    'method_contacts.search_param_limit_type_int' => 'Maximum number of users to be returned',
    'method_contacts.resolveUsername' => 'You cannot use this method directly, use the resolveUsername, getPwrChat, getInfo, getFullInfo methods instead (see https://docs.madelineproto.xyz for more info)',
    'method_contacts.resolveUsername_param_username_type_string' => 'You cannot use this method directly, use the resolveUsername, getPwrChat, getInfo, getFullInfo methods instead (see https://docs.madelineproto.xyz for more info)',
    'method_contacts.getTopPeers' => 'Get most used peers',
    'method_contacts.getTopPeers_param_correspondents_type_true' => 'Users we\'ve chatted most frequently with',
    'method_contacts.getTopPeers_param_bots_pm_type_true' => 'Most used bots',
    'method_contacts.getTopPeers_param_bots_inline_type_true' => 'Most used inline bots',
    'method_contacts.getTopPeers_param_phone_calls_type_true' => 'Most frequently called users',
    'method_contacts.getTopPeers_param_groups_type_true' => 'Often-opened groups and supergroups',
    'method_contacts.getTopPeers_param_channels_type_true' => 'Most frequently visited channels',
    'method_contacts.getTopPeers_param_offset_type_int' => 'Offset for [pagination](https://core.telegram.org/api/offsets)',
    'method_contacts.getTopPeers_param_limit_type_int' => 'Maximum number of results to return, [see pagination](https://core.telegram.org/api/offsets)',
    'method_contacts.getTopPeers_param_hash_type_int' => '[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)',
    'method_contacts.resetTopPeerRating' => 'Reset [rating](https://core.telegram.org/api/top-rating) of top peer',
    'method_contacts.resetTopPeerRating_param_category_type_TopPeerCategory' => 'Top peer category',
    'method_contacts.resetTopPeerRating_param_peer_type_InputPeer' => 'Peer whose rating should be reset',
    'method_contacts.resetSaved' => 'Delete saved contacts',
    'method_messages.getMessages' => 'Returns the list of messages by their IDs.',
    'method_messages.getMessages_param_id_type_Vector t' => 'The IDs of messages to fetch (only for users and normal groups)',
    'method_messages.getDialogs' => 'Returns the current user dialog list.',
    'method_messages.getDialogs_param_exclude_pinned_type_true' => 'Exclude pinned dialogs',
    'method_messages.getDialogs_param_offset_date_type_int' => '[Offsets for pagination, for more info click here](https://core.telegram.org/api/offsets)',
    'method_messages.getDialogs_param_offset_id_type_int' => '[Offsets for pagination, for more info click here](https://core.telegram.org/api/offsets)',
    'method_messages.getDialogs_param_offset_peer_type_InputPeer' => '[Offset peer for pagination](https://core.telegram.org/api/offsets)',
    'method_messages.getDialogs_param_limit_type_int' => 'Number of list elements to be returned',
    'method_messages.getHistory' => 'Gets back the conversation history with one interlocutor / within a chat',
    'method_messages.getHistory_param_peer_type_InputPeer' => 'Target peer',
    'method_messages.getHistory_param_offset_id_type_int' => 'Only return messages starting from the specified message ID',
    'method_messages.getHistory_param_offset_date_type_int' => 'Only return messages sent after the specified date',
    'method_messages.getHistory_param_add_offset_type_int' => 'Number of list elements to be skipped, negative values are also accepted.',
    'method_messages.getHistory_param_limit_type_int' => 'Number of results to return',
    'method_messages.getHistory_param_max_id_type_int' => 'If a positive value was transferred, the method will return only messages with IDs less than **max\\_id**',
    'method_messages.getHistory_param_min_id_type_int' => 'If a positive value was transferred, the method will return only messages with IDs more than **min\\_id**',
    'method_messages.getHistory_param_hash_type_int' => '[Result hash](https://core.telegram.org/api/offsets)',
    'method_messages.search' => 'Gets back found messages',
    'method_messages.search_param_peer_type_InputPeer' => 'User or chat, histories with which are searched, or [(inputPeerEmpty)](../constructors/inputPeerEmpty.md) constructor for global search',
    'method_messages.search_param_q_type_string' => 'Text search request',
    'method_messages.search_param_from_id_type_InputUser' => 'Only return messages sent by the specified user ID',
    'method_messages.search_param_filter_type_MessagesFilter' => 'Filter to return only specified message types',
    'method_messages.search_param_min_date_type_int' => 'If a positive value was transferred, only messages with a sending date bigger than the transferred one will be returned',
    'method_messages.search_param_max_date_type_int' => 'If a positive value was transferred, only messages with a sending date smaller than the transferred one will be returned',
    'method_messages.search_param_offset_id_type_int' => 'Only return messages starting from the specified message ID',
    'method_messages.search_param_add_offset_type_int' => '[Additional offset](https://core.telegram.org/api/offsets)',
    'method_messages.search_param_limit_type_int' => '[Number of results to return](https://core.telegram.org/api/offsets)',
    'method_messages.search_param_max_id_type_int' => '[Maximum message ID to return](https://core.telegram.org/api/offsets)',
    'method_messages.search_param_min_id_type_int' => '[Minimum message ID to return](https://core.telegram.org/api/offsets)',
    'method_messages.readHistory' => 'Marks message history as read.',
    'method_messages.readHistory_param_peer_type_InputPeer' => 'Target user or group',
    'method_messages.readHistory_param_max_id_type_int' => 'If a positive value is passed, only messages with identifiers less or equal than the given one will be read',
    'method_messages.deleteHistory' => 'Deletes communication history.',
    'method_messages.deleteHistory_param_just_clear_type_true' => 'Just clear history for the current user, without actually removing messages for every chat user',
    'method_messages.deleteHistory_param_peer_type_InputPeer' => 'User or chat, communication history of which will be deleted',
    'method_messages.deleteHistory_param_max_id_type_int' => 'Maximum ID of message to delete',
    'method_messages.deleteMessages' => 'Deletes messages by their identifiers.',
    'method_messages.deleteMessages_param_revoke_type_true' => 'Whether to delete messages for all participants of the chat',
    'method_messages.deleteMessages_param_id_type_Vector t' => 'IDs of messages to delete, use channels->deleteMessages for supergroups',
    'method_messages.receivedMessages' => 'Confirms receipt of messages by a client, cancels PUSH-notification sending.',
    'method_messages.receivedMessages_param_max_id_type_int' => 'Maximum message ID available in a client.',
    'method_messages.setTyping' => 'Sends a current user typing event (see [SendMessageAction](../types/SendMessageAction.md) for all event types) to a conversation partner or group.',
    'method_messages.setTyping_param_peer_type_InputPeer' => 'Target user or group',
    'method_messages.setTyping_param_action_type_SendMessageAction' => 'Type of action<br>Parameter added in [Layer 17](https://core.telegram.org/api/layers#layer-17).',
    'method_messages.sendMessage' => 'Sends a message to a chat',
    'method_messages.sendMessage_param_no_webpage_type_true' => 'Set this flag to disable generation of the webpage preview',
    'method_messages.sendMessage_param_silent_type_true' => 'Send this message silently (no notifications for the receivers)',
    'method_messages.sendMessage_param_background_type_true' => 'Send this message as background message',
    'method_messages.sendMessage_param_clear_draft_type_true' => 'Clear the draft field',
    'method_messages.sendMessage_param_peer_type_InputPeer' => 'The destination where the message will be sent',
    'method_messages.sendMessage_param_reply_to_msg_id_type_int' => 'The message ID to which this message will reply to',
    'method_messages.sendMessage_param_message_type_string' => 'The message',
    'method_messages.sendMessage_param_reply_markup_type_ReplyMarkup' => 'Reply markup for sending bot buttons',
    'method_messages.sendMessage_param_entities_type_Vector t' => 'Entities to send (for styled text)',
    'method_messages.sendMedia' => 'Send a media',
    'method_messages.sendMedia_param_silent_type_true' => 'Send message silently (no notification should be triggered)',
    'method_messages.sendMedia_param_background_type_true' => 'Send message in background',
    'method_messages.sendMedia_param_clear_draft_type_true' => 'Clear the draft',
    'method_messages.sendMedia_param_peer_type_InputPeer' => 'Destination',
    'method_messages.sendMedia_param_reply_to_msg_id_type_int' => 'Message ID to which this message should reply to',
    'method_messages.sendMedia_param_media_type_InputMedia' => 'Attached media',
    'method_messages.sendMedia_param_message_type_string' => 'Caption',
    'method_messages.sendMedia_param_reply_markup_type_ReplyMarkup' => 'Reply markup for bot keyboards',
    'method_messages.sendMedia_param_entities_type_Vector t' => 'Entities for styled text',
    'method_messages.forwardMessages' => 'Forwards messages by their IDs.',
    'method_messages.forwardMessages_param_silent_type_true' => 'Whether to send messages silently (no notification will be triggered on the destination clients)',
    'method_messages.forwardMessages_param_background_type_true' => 'Whether to send the message in background',
    'method_messages.forwardMessages_param_with_my_score_type_true' => 'When forwarding games, whether to include your score in the game',
    'method_messages.forwardMessages_param_grouped_type_true' => 'Whether the specified messages represent an album (grouped media)',
    'method_messages.forwardMessages_param_from_peer_type_InputPeer' => 'Source of messages',
    'method_messages.forwardMessages_param_id_type_Vector t' => 'The message IDs',
    'method_messages.forwardMessages_param_to_peer_type_InputPeer' => 'Destination peer',
    'method_messages.reportSpam' => 'Report a new incoming chat for spam, if the [peer settings](../constructors/peerSettings.md) of the chat allow us to do that',
    'method_messages.reportSpam_param_peer_type_InputPeer' => 'Peer to report',
    'method_messages.hideReportSpam' => 'Hide report spam popup',
    'method_messages.hideReportSpam_param_peer_type_InputPeer' => 'Where to hide the popup',
    'method_messages.getPeerSettings' => 'Get peer settings',
    'method_messages.getPeerSettings_param_peer_type_InputPeer' => 'The peer',
    'method_messages.getChats' => 'Returns chat basic info on their IDs.',
    'method_messages.getChats_param_id_type_Vector t' => 'The MTProto IDs of chats to fetch info about',
    'method_messages.getFullChat' => 'You cannot use this method directly, use the getPwrChat, getInfo, getFullInfo methods instead (see https://docs.madelineproto.xyz for more info)',
    'method_messages.getFullChat_param_chat_id_type_InputPeer' => 'You cannot use this method directly, use the getPwrChat, getInfo, getFullInfo methods instead (see https://docs.madelineproto.xyz for more info)',
    'method_messages.editChatTitle' => 'Chanages chat name and sends a service message on it.',
    'method_messages.editChatTitle_param_chat_id_type_InputPeer' => 'The ID of the chat',
    'method_messages.editChatTitle_param_title_type_string' => 'New chat name, different from the old one',
    'method_messages.editChatPhoto' => 'Changes chat photo and sends a service message on it',
    'method_messages.editChatPhoto_param_chat_id_type_InputPeer' => 'The ID of the chat',
    'method_messages.editChatPhoto_param_photo_type_InputChatPhoto' => 'Photo to be set',
    'method_messages.addChatUser' => 'Adds a user to a chat and sends a service message on it.',
    'method_messages.addChatUser_param_chat_id_type_InputPeer' => 'The chat where to invite users',
    'method_messages.addChatUser_param_user_id_type_InputUser' => 'User ID to be added',
    'method_messages.addChatUser_param_fwd_limit_type_int' => 'Number of last messages to be forwarded',
    'method_messages.deleteChatUser' => 'Deletes a user from a chat and sends a service message on it.',
    'method_messages.deleteChatUser_param_chat_id_type_InputPeer' => 'The ID of the chat',
    'method_messages.deleteChatUser_param_user_id_type_InputUser' => 'User ID to be deleted',
    'method_messages.createChat' => 'Creates a new chat.',
    'method_messages.createChat_param_users_type_Vector t' => 'The users to add to the chat',
    'method_messages.createChat_param_title_type_string' => 'Chat name',
    'method_messages.getDhConfig' => 'You cannot use this method directly, instead use $MadelineProto->getDhConfig();',
    'method_messages.getDhConfig_param_version_type_int' => 'You cannot use this method directly, instead use $MadelineProto->getDhConfig();',
    'method_messages.getDhConfig_param_random_length_type_int' => 'You cannot use this method directly, instead use $MadelineProto->getDhConfig();',
    'method_messages.requestEncryption' => 'You cannot use this method directly, see https://docs.madelineproto.xyz for more info on handling secret chats',
    'method_messages.requestEncryption_param_user_id_type_InputUser' => 'You cannot use this method directly, see https://docs.madelineproto.xyz for more info on handling secret chats',
    'method_messages.requestEncryption_param_g_a_type_bytes' => 'You cannot use this method directly, see https://docs.madelineproto.xyz for more info on handling secret chats',
    'method_messages.acceptEncryption' => 'You cannot use this method directly, see https://docs.madelineproto.xyz for more info on handling secret chats',
    'method_messages.acceptEncryption_param_peer_type_InputEncryptedChat' => 'You cannot use this method directly, see https://docs.madelineproto.xyz for more info on handling secret chats',
    'method_messages.acceptEncryption_param_g_b_type_bytes' => 'You cannot use this method directly, see https://docs.madelineproto.xyz for more info on handling secret chats',
    'method_messages.acceptEncryption_param_key_fingerprint_type_long' => 'You cannot use this method directly, see https://docs.madelineproto.xyz for more info on handling secret chats',
    'method_messages.discardEncryption' => 'You cannot use this method directly, see https://docs.madelineproto.xyz for more info on handling secret chats',
    'method_messages.discardEncryption_param_chat_id_type_int' => 'You cannot use this method directly, see https://docs.madelineproto.xyz for more info on handling secret chats',
    'method_messages.setEncryptedTyping' => 'Send typing event by the current user to a secret chat.',
    'method_messages.setEncryptedTyping_param_peer_type_InputEncryptedChat' => 'Secret chat ID',
    'method_messages.setEncryptedTyping_param_typing_type_Bool' => 'Typing.<br>**Possible values**:<br>[(boolTrue)](../constructors/boolTrue.md), if the user started typing and more than **5 seconds** have passed since the last request<br>[(boolFalse)](../constructors/boolFalse.md), if the user stopped typing',
    'method_messages.readEncryptedHistory' => 'Marks message history within a secret chat as read.',
    'method_messages.readEncryptedHistory_param_peer_type_InputEncryptedChat' => 'Secret chat ID',
    'method_messages.readEncryptedHistory_param_max_date_type_int' => 'Maximum date value for received messages in history',
    'method_messages.sendEncrypted' => 'Sends a text message to a secret chat.',
    'method_messages.sendEncrypted_param_peer_type_InputEncryptedChat' => 'Secret chat ID',
    'method_messages.sendEncrypted_param_message_type_DecryptedMessage' => 'The message to send',
    'method_messages.sendEncryptedFile' => 'Sends a message with a file attachment to a secret chat',
    'method_messages.sendEncryptedFile_param_peer_type_InputEncryptedChat' => 'Secret chat ID',
    'method_messages.sendEncryptedFile_param_message_type_DecryptedMessage' => 'The message with the file',
    'method_messages.sendEncryptedFile_param_file_type_InputEncryptedFile' => 'File attachment for the secret chat',
    'method_messages.sendEncryptedService' => 'Sends a service message to a secret chat.',
    'method_messages.sendEncryptedService_param_peer_type_InputEncryptedChat' => 'Secret chat ID',
    'method_messages.sendEncryptedService_param_message_type_DecryptedMessage' => 'The service message',
    'method_messages.receivedQueue' => 'You cannot use this method directly',
    'method_messages.receivedQueue_param_max_qts_type_int' => 'You cannot use this method directly',
    'method_messages.reportEncryptedSpam' => 'Report a secret chat for spam',
    'method_messages.reportEncryptedSpam_param_peer_type_InputEncryptedChat' => 'The secret chat to report',
    'method_messages.readMessageContents' => 'Notifies the sender about the recipient having listened a voice message or watched a video.',
    'method_messages.readMessageContents_param_id_type_Vector t' => 'The messages to mark as read (only users and normal chats, not supergroups)',
    'method_messages.getStickers' => 'Get stickers by emoji',
    'method_messages.getStickers_param_emoticon_type_string' => 'The emoji',
    'method_messages.getStickers_param_hash_type_string' => 'Previously fetched sticker IDs',
    'method_messages.getAllStickers' => 'Get all installed stickers',
    'method_messages.getAllStickers_param_hash_type_int' => '[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)',
    'method_messages.getWebPagePreview' => 'Get preview of webpage',
    'method_messages.getWebPagePreview_param_message_type_string' => 'Message from which to extract the preview',
    'method_messages.getWebPagePreview_param_entities_type_Vector t' => 'Entities for styled text',
    'method_messages.exportChatInvite' => 'Export an invite link for a chat',
    'method_messages.exportChatInvite_param_chat_id_type_InputPeer' => 'The chat id ',
    'method_messages.checkChatInvite' => 'Check the validity of a chat invite link and get basic info about it',
    'method_messages.checkChatInvite_param_hash_type_string' => 'Invite hash in `t.me/joinchat/hash`',
    'method_messages.importChatInvite' => 'Import a chat invite and join a private chat/supergroup/channel',
    'method_messages.importChatInvite_param_hash_type_string' => '`hash` from `t.me/joinchat/hash`',
    'method_messages.getStickerSet' => 'Get info about a stickerset',
    'method_messages.getStickerSet_param_stickerset_type_InputStickerSet' => 'Stickerset',
    'method_messages.installStickerSet' => 'Install a stickerset',
    'method_messages.installStickerSet_param_stickerset_type_InputStickerSet' => 'Stickerset to install',
    'method_messages.installStickerSet_param_archived_type_Bool' => 'Whether to archive stickerset',
    'method_messages.uninstallStickerSet' => 'Uninstall a stickerset',
    'method_messages.uninstallStickerSet_param_stickerset_type_InputStickerSet' => 'The stickerset to uninstall',
    'method_messages.startBot' => 'Start a conversation with a bot using a [deep linking parameter](https://core.telegram.org/bots#deep-linking)',
    'method_messages.startBot_param_bot_type_InputUser' => 'The bot',
    'method_messages.startBot_param_peer_type_InputPeer' => 'The chat where to start the bot, can be the bot\'s private chat or a group',
    'method_messages.startBot_param_start_param_type_string' => '[Deep linking parameter](https://core.telegram.org/bots#deep-linking)',
    'method_messages.getMessagesViews' => 'Get and increase the view counter of a message sent or forwarded from a [channel](https://core.telegram.org/api/channel)',
    'method_messages.getMessagesViews_param_peer_type_InputPeer' => 'Peer where the message was found',
    'method_messages.getMessagesViews_param_id_type_Vector t' => 'The IDs messages to get',
    'method_messages.getMessagesViews_param_increment_type_Bool' => 'Whether to mark the message as viewed and increment the view counter',
    'method_messages.toggleChatAdmins' => 'Enable all users are admins in normal groups (not supergroups)',
    'method_messages.toggleChatAdmins_param_chat_id_type_InputPeer' => 'Group ID',
    'method_messages.toggleChatAdmins_param_enabled_type_Bool' => 'Enable all users are admins',
    'method_messages.editChatAdmin' => 'Make a user admin in a [legacy group](https://core.telegram.org/api/channel).',
    'method_messages.editChatAdmin_param_chat_id_type_InputPeer' => 'The chat ID (no supergroups)',
    'method_messages.editChatAdmin_param_user_id_type_InputUser' => 'The user to make admin',
    'method_messages.editChatAdmin_param_is_admin_type_Bool' => 'Whether to make him admin',
    'method_messages.migrateChat' => 'Turn a [legacy group into a supergroup](https://core.telegram.org/api/channel)',
    'method_messages.migrateChat_param_chat_id_type_InputPeer' => 'The chat to convert',
    'method_messages.searchGlobal' => 'Search for messages and peers globally',
    'method_messages.searchGlobal_param_q_type_string' => 'Query',
    'method_messages.searchGlobal_param_offset_date_type_int' => '0 or the date offset',
    'method_messages.searchGlobal_param_offset_peer_type_InputPeer' => '[Offsets for pagination, for more info click here](https://core.telegram.org/api/offsets)',
    'method_messages.searchGlobal_param_offset_id_type_int' => '[Offsets for pagination, for more info click here](https://core.telegram.org/api/offsets)',
    'method_messages.searchGlobal_param_limit_type_int' => '[Offsets for pagination, for more info click here](https://core.telegram.org/api/offsets)',
    'method_messages.reorderStickerSets' => 'Reorder installed stickersets',
    'method_messages.reorderStickerSets_param_masks_type_true' => 'Reorder mask stickersets',
    'method_messages.reorderStickerSets_param_order_type_Vector t' => 'The order',
    'method_messages.getDocumentByHash' => 'Get a document by its SHA256 hash, mainly used for gifs',
    'method_messages.getDocumentByHash_param_sha256_type_bytes' => 'SHA256 of file',
    'method_messages.getDocumentByHash_param_size_type_int' => 'Size of the file in bytes',
    'method_messages.getDocumentByHash_param_mime_type_type_string' => 'Mime type',
    'method_messages.searchGifs' => 'Search for GIFs',
    'method_messages.searchGifs_param_q_type_string' => 'Text query',
    'method_messages.searchGifs_param_offset_type_int' => 'Offset for [pagination »](https://core.telegram.org/api/offsets)',
    'method_messages.getSavedGifs' => 'Get saved GIFs',
    'method_messages.getSavedGifs_param_hash_type_int' => '[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)',
    'method_messages.saveGif' => 'Add GIF to saved gifs list',
    'method_messages.saveGif_param_id_type_InputDocument' => 'GIF to save',
    'method_messages.saveGif_param_unsave_type_Bool' => 'Whether to remove GIF from saved gifs list',
    'method_messages.getInlineBotResults' => 'Query an inline bot',
    'method_messages.getInlineBotResults_param_bot_type_InputUser' => 'The bot to query',
    'method_messages.getInlineBotResults_param_peer_type_InputPeer' => 'The currently opened chat',
    'method_messages.getInlineBotResults_param_geo_point_type_InputGeoPoint' => 'The geolocation, if requested',
    'method_messages.getInlineBotResults_param_query_type_string' => 'The query',
    'method_messages.getInlineBotResults_param_offset_type_string' => 'The offset within the results, will be passed directly as-is to the bot.',
    'method_messages.setInlineBotResults' => 'Answer an inline query, for bots only',
    'method_messages.setInlineBotResults_param_gallery_type_true' => 'Set this flag if the results are composed of media files',
    'method_messages.setInlineBotResults_param_private_type_true' => 'Set this flag if results may be cached on the server side only for the user that sent the query. By default, results may be returned to any user who sends the same query',
    'method_messages.setInlineBotResults_param_query_id_type_long' => 'Unique identifier for the answered query',
    'method_messages.setInlineBotResults_param_results_type_Vector t' => 'Results',
    'method_messages.setInlineBotResults_param_cache_time_type_int' => 'The maximum amount of time in seconds that the result of the inline query may be cached on the server. Defaults to 300.',
    'method_messages.setInlineBotResults_param_next_offset_type_string' => 'Pass the offset that a client should send in the next query with the same text to receive more results. Pass an empty string if there are no more results or if you don‘t support pagination. Offset length can’t exceed 64 bytes.',
    'method_messages.setInlineBotResults_param_switch_pm_type_InlineBotSwitchPM' => 'If passed, clients will display a button with specified text that switches the user to a private chat with the bot and sends the bot a start message with a certain parameter.',
    'method_messages.sendInlineBotResult' => 'Send a result obtained using [messages.getInlineBotResults](../methods/messages.getInlineBotResults.md).',
    'method_messages.sendInlineBotResult_param_silent_type_true' => 'Whether to send the message silently (no notification will be triggered on the other client)',
    'method_messages.sendInlineBotResult_param_background_type_true' => 'Whether to send the message in background',
    'method_messages.sendInlineBotResult_param_clear_draft_type_true' => 'Whether to clear the [draft](https://core.telegram.org/api/drafts)',
    'method_messages.sendInlineBotResult_param_peer_type_InputPeer' => 'Destination',
    'method_messages.sendInlineBotResult_param_reply_to_msg_id_type_int' => 'ID of the message this message should reply to',
    'method_messages.sendInlineBotResult_param_query_id_type_long' => 'Query ID from [messages.getInlineBotResults](../methods/messages.getInlineBotResults.md)',
    'method_messages.sendInlineBotResult_param_id_type_string' => 'Result ID from [messages.getInlineBotResults](../methods/messages.getInlineBotResults.md)',
    'method_messages.getMessageEditData' => 'Find out if a media message\'s caption can be edited',
    'method_messages.getMessageEditData_param_peer_type_InputPeer' => 'Peer where the media was sent',
    'method_messages.getMessageEditData_param_id_type_int' => 'ID of message',
    'method_messages.editMessage' => 'Edit message',
    'method_messages.editMessage_param_no_webpage_type_true' => 'Disable webpage preview',
    'method_messages.editMessage_param_stop_geo_live_type_true' => 'Stop live location',
    'method_messages.editMessage_param_peer_type_InputPeer' => 'Where was the message sent',
    'method_messages.editMessage_param_id_type_int' => 'ID of the message to edit',
    'method_messages.editMessage_param_message_type_string' => 'New message',
    'method_messages.editMessage_param_reply_markup_type_ReplyMarkup' => 'Reply markup for inline keyboards',
    'method_messages.editMessage_param_entities_type_Vector t' => 'The new entities (for styled text)',
    'method_messages.editMessage_param_geo_point_type_InputGeoPoint' => 'The new location',
    'method_messages.editInlineBotMessage' => 'Edit an inline bot message',
    'method_messages.editInlineBotMessage_param_no_webpage_type_true' => 'Disable webpage preview',
    'method_messages.editInlineBotMessage_param_stop_geo_live_type_true' => 'Stop live location',
    'method_messages.editInlineBotMessage_param_id_type_InputBotInlineMessageID' => 'Sent inline message ID',
    'method_messages.editInlineBotMessage_param_message_type_string' => 'Message',
    'method_messages.editInlineBotMessage_param_reply_markup_type_ReplyMarkup' => 'Reply markup for inline keyboards',
    'method_messages.editInlineBotMessage_param_entities_type_Vector t' => 'The new entities (for styled text)',
    'method_messages.editInlineBotMessage_param_geo_point_type_InputGeoPoint' => 'The new location',
    'method_messages.getBotCallbackAnswer' => 'Press an inline callback button and get a callback answer from the bot',
    'method_messages.getBotCallbackAnswer_param_game_type_true' => 'Whether this is a "play game" button',
    'method_messages.getBotCallbackAnswer_param_peer_type_InputPeer' => 'Where was the inline keyboard sent',
    'method_messages.getBotCallbackAnswer_param_msg_id_type_int' => 'ID of the Message with the inline keyboard',
    'method_messages.getBotCallbackAnswer_param_data_type_bytes' => 'Callback data',
    'method_messages.setBotCallbackAnswer' => 'Set the callback answer to a user button press (bots only)',
    'method_messages.setBotCallbackAnswer_param_alert_type_true' => 'Whether to show the message as a popup instead of a toast notification',
    'method_messages.setBotCallbackAnswer_param_query_id_type_long' => 'Query ID',
    'method_messages.setBotCallbackAnswer_param_message_type_string' => 'Popup to show',
    'method_messages.setBotCallbackAnswer_param_url_type_string' => 'URL to open',
    'method_messages.setBotCallbackAnswer_param_cache_time_type_int' => 'Cache validity',
    'method_messages.getPeerDialogs' => 'Get dialog info of specified peers',
    'method_messages.getPeerDialogs_param_peers_type_Vector t' => 'The peers',
    'method_messages.saveDraft' => 'Save a message [draft](https://core.telegram.org/api/drafts) associated to a chat.',
    'method_messages.saveDraft_param_no_webpage_type_true' => 'Disable generation of the webpage preview',
    'method_messages.saveDraft_param_reply_to_msg_id_type_int' => 'Message ID the message should reply to',
    'method_messages.saveDraft_param_peer_type_InputPeer' => 'Destination of the message that should be sent',
    'method_messages.saveDraft_param_message_type_string' => 'The draft',
    'method_messages.saveDraft_param_entities_type_Vector t' => 'The entities (for styled text)',
    'method_messages.getAllDrafts' => 'Save get all message [drafts](https://core.telegram.org/api/drafts).',
    'method_messages.getFeaturedStickers' => 'Get featured stickers',
    'method_messages.getFeaturedStickers_param_hash_type_int' => '[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)',
    'method_messages.readFeaturedStickers' => 'Mark new featured stickers as read',
    'method_messages.readFeaturedStickers_param_id_type_Vector t' => 'The stickers to mark as read',
    'method_messages.getRecentStickers' => 'Get recent stickers',
    'method_messages.getRecentStickers_param_attached_type_true' => 'Get stickers recently attached to photo or video files',
    'method_messages.getRecentStickers_param_hash_type_int' => '[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)',
    'method_messages.saveRecentSticker' => 'Add/remove sticker from recent stickers list',
    'method_messages.saveRecentSticker_param_attached_type_true' => 'Whether to add/remove stickers recently attached to photo or video files',
    'method_messages.saveRecentSticker_param_id_type_InputDocument' => 'Sticker',
    'method_messages.saveRecentSticker_param_unsave_type_Bool' => 'Whether to save or unsave the sticker',
    'method_messages.clearRecentStickers' => 'Clear recent stickers',
    'method_messages.clearRecentStickers_param_attached_type_true' => 'Set this flag to clear the list of stickers recently attached to photo or video files',
    'method_messages.getArchivedStickers' => 'Get all archived stickers',
    'method_messages.getArchivedStickers_param_masks_type_true' => 'Get mask stickers',
    'method_messages.getArchivedStickers_param_offset_id_type_long' => '[Offsets for pagination, for more info click here](https://core.telegram.org/api/offsets)',
    'method_messages.getArchivedStickers_param_limit_type_int' => 'Maximum number of results to return, [see pagination](https://core.telegram.org/api/offsets)',
    'method_messages.getMaskStickers' => 'Get installed mask stickers',
    'method_messages.getMaskStickers_param_hash_type_int' => '[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)',
    'method_messages.getAttachedStickers' => 'Get stickers attached to a photo or video',
    'method_messages.getAttachedStickers_param_media_type_InputStickeredMedia' => 'Stickered media',
    'method_messages.setGameScore' => 'Use this method to set the score of the specified user in a game sent as a normal message (bots only).',
    'method_messages.setGameScore_param_edit_message_type_true' => 'Set this flag if the game message should be automatically edited to include the current scoreboard',
    'method_messages.setGameScore_param_force_type_true' => 'Set this flag if the high score is allowed to decrease. This can be useful when fixing mistakes or banning cheaters',
    'method_messages.setGameScore_param_peer_type_InputPeer' => 'Unique identifier of target chat',
    'method_messages.setGameScore_param_id_type_int' => 'Identifier of the sent message',
    'method_messages.setGameScore_param_user_id_type_InputUser' => 'User identifier',
    'method_messages.setGameScore_param_score_type_int' => 'New score',
    'method_messages.setInlineGameScore' => 'Use this method to set the score of the specified user in a game sent as an inline message (bots only).',
    'method_messages.setInlineGameScore_param_edit_message_type_true' => 'Set this flag if the game message should be automatically edited to include the current scoreboard',
    'method_messages.setInlineGameScore_param_force_type_true' => 'Set this flag if the high score is allowed to decrease. This can be useful when fixing mistakes or banning cheaters',
    'method_messages.setInlineGameScore_param_id_type_InputBotInlineMessageID' => 'ID of the inline message',
    'method_messages.setInlineGameScore_param_user_id_type_InputUser' => 'User identifier',
    'method_messages.setInlineGameScore_param_score_type_int' => 'New score',
    'method_messages.getGameHighScores' => 'Get highscores of a game',
    'method_messages.getGameHighScores_param_peer_type_InputPeer' => 'Where was the game sent',
    'method_messages.getGameHighScores_param_id_type_int' => 'ID of message with game media attachment',
    'method_messages.getGameHighScores_param_user_id_type_InputUser' => 'Get high scores made by a certain user',
    'method_messages.getInlineGameHighScores' => 'Get highscores of a game sent using an inline bot',
    'method_messages.getInlineGameHighScores_param_id_type_InputBotInlineMessageID' => 'ID of inline message',
    'method_messages.getInlineGameHighScores_param_user_id_type_InputUser' => 'Get high scores of a certain user',
    'method_messages.getCommonChats' => 'Get chats in common with a user',
    'method_messages.getCommonChats_param_user_id_type_InputUser' => 'User ID',
    'method_messages.getCommonChats_param_max_id_type_int' => 'Maximum ID of chat to return (see [pagination](https://core.telegram.org/api/offsets))',
    'method_messages.getCommonChats_param_limit_type_int' => 'Maximum number of results to return, [see pagination](https://core.telegram.org/api/offsets)',
    'method_messages.getAllChats' => 'Get all chats, channels and supergroups',
    'method_messages.getAllChats_param_except_ids_type_Vector t' => 'Do not fetch these chats (MTProto id)',
    'method_messages.getWebPage' => 'Get [instant view](https://instantview.telegram.org) page',
    'method_messages.getWebPage_param_url_type_string' => 'URL of IV page to fetch',
    'method_messages.getWebPage_param_hash_type_int' => '[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)',
    'method_messages.toggleDialogPin' => 'Pin/unpin a dialog',
    'method_messages.toggleDialogPin_param_pinned_type_true' => 'Whether to pin or unpin the dialog',
    'method_messages.toggleDialogPin_param_peer_type_InputPeer' => 'The peer to pin',
    'method_messages.reorderPinnedDialogs' => 'Reorder pinned dialogs',
    'method_messages.reorderPinnedDialogs_param_force_type_true' => 'If set, dialogs pinned server-side but not present in the `order` field will be unpinned.',
    'method_messages.reorderPinnedDialogs_param_order_type_Vector t' => 'New order',
    'method_messages.getPinnedDialogs' => 'Get pinned dialogs',
    'method_messages.setBotShippingResults' => 'If you sent an invoice requesting a shipping address and the parameter is\\_flexible was specified, the bot will receive an [updateBotShippingQuery](../constructors/updateBotShippingQuery.md) update. Use this method to reply to shipping queries.',
    'method_messages.setBotShippingResults_param_query_id_type_long' => 'Unique identifier for the query to be answered',
    'method_messages.setBotShippingResults_param_error_type_string' => 'Error message in human readable form that explains why it is impossible to complete the order (e.g. "Sorry, delivery to your desired address is unavailable\'). Telegram will display this message to the user.',
    'method_messages.setBotShippingResults_param_shipping_options_type_Vector t' => 'Shipping options',
    'method_messages.setBotPrecheckoutResults' => 'Once the user has confirmed their payment and shipping details, the bot receives an [updateBotPrecheckoutQuery](../constructors/updateBotPrecheckoutQuery.md) update.  
Use this method to respond to such pre-checkout queries.  
**Note**: Telegram must receive an answer within 10 seconds after the pre-checkout query was sent.',
    'method_messages.setBotPrecheckoutResults_param_success_type_true' => 'Set this flag if everything is alright (goods are available, etc.) and the bot is ready to proceed with the order, otherwise do not set it, and set the `error` field, instead',
    'method_messages.setBotPrecheckoutResults_param_query_id_type_long' => 'Unique identifier for the query to be answered',
    'method_messages.setBotPrecheckoutResults_param_error_type_string' => 'Required if the `success` isn\'t set. Error message in human readable form that explains the reason for failure to proceed with the checkout (e.g. "Sorry, somebody just bought the last of our amazing black T-shirts while you were busy filling out your payment details. Please choose a different color or garment!"). Telegram will display this message to the user.',
    'method_messages.uploadMedia' => 'Upload a file and associate it to a chat (without actually sending it to the chat)',
    'method_messages.uploadMedia_param_peer_type_InputPeer' => 'The chat, can be an [inputPeerEmpty](../constructors/inputPeerEmpty.md) for bots',
    'method_messages.uploadMedia_param_media_type_InputMedia' => 'File uploaded in chunks as described in [files »](https://core.telegram.org/api/files)',
    'method_messages.sendScreenshotNotification' => 'Notify the other user in a private chat that a screenshot of the chat was taken',
    'method_messages.sendScreenshotNotification_param_peer_type_InputPeer' => 'Other user',
    'method_messages.sendScreenshotNotification_param_reply_to_msg_id_type_int' => 'ID of message that was screenshotted, can be 0',
    'method_messages.getFavedStickers' => 'Get faved stickers',
    'method_messages.getFavedStickers_param_hash_type_int' => '[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)',
    'method_messages.faveSticker' => 'Mark a sticker as favorite',
    'method_messages.faveSticker_param_id_type_InputDocument' => 'Sticker to mark as favorite',
    'method_messages.faveSticker_param_unfave_type_Bool' => 'Unfavorite',
    'method_messages.getUnreadMentions' => 'Get unread messages where we were mentioned',
    'method_messages.getUnreadMentions_param_peer_type_InputPeer' => 'Peer where to look for mentions',
    'method_messages.getUnreadMentions_param_offset_id_type_int' => '[Offsets for pagination, for more info click here](https://core.telegram.org/api/offsets)',
    'method_messages.getUnreadMentions_param_add_offset_type_int' => '[Offsets for pagination, for more info click here](https://core.telegram.org/api/offsets)',
    'method_messages.getUnreadMentions_param_limit_type_int' => 'Maximum number of results to return, [see pagination](https://core.telegram.org/api/offsets)',
    'method_messages.getUnreadMentions_param_max_id_type_int' => 'Maximum message ID to return, [see pagination](https://core.telegram.org/api/offsets)',
    'method_messages.getUnreadMentions_param_min_id_type_int' => 'Minimum message ID to return, [see pagination](https://core.telegram.org/api/offsets)',
    'method_messages.readMentions' => 'Mark mentions as read',
    'method_messages.readMentions_param_peer_type_InputPeer' => 'Dialog',
    'method_messages.getRecentLocations' => 'Get live location history of a certain user',
    'method_messages.getRecentLocations_param_peer_type_InputPeer' => 'User',
    'method_messages.getRecentLocations_param_limit_type_int' => 'Maximum number of results to return, [see pagination](https://core.telegram.org/api/offsets)',
    'method_messages.sendMultiMedia' => 'Send an album of media',
    'method_messages.sendMultiMedia_param_silent_type_true' => 'Whether to send the album silently (no notification triggered)',
    'method_messages.sendMultiMedia_param_background_type_true' => 'Send in background?',
    'method_messages.sendMultiMedia_param_clear_draft_type_true' => 'Whether to clear [drafts](https://core.telegram.org/api/drafts)',
    'method_messages.sendMultiMedia_param_peer_type_InputPeer' => 'The destination chat',
    'method_messages.sendMultiMedia_param_reply_to_msg_id_type_int' => 'The message to reply to',
    'method_messages.sendMultiMedia_param_multi_media_type_Vector t' => 'The album',
    'method_messages.uploadEncryptedFile' => 'Upload encrypted file and associate it to a secret chat',
    'method_messages.uploadEncryptedFile_param_peer_type_InputEncryptedChat' => 'The secret chat to associate the file to',
    'method_messages.uploadEncryptedFile_param_file_type_InputEncryptedFile' => 'The file',
    'method_updates.getState' => 'You cannot use this method directly, see https://docs.madelineproto.xyz for more info on handling updates',
    'method_updates.getDifference' => 'You cannot use this method directly, see https://docs.madelineproto.xyz for more info on handling updates',
    'method_updates.getDifference_param_pts_type_int' => 'You cannot use this method directly, see https://docs.madelineproto.xyz for more info on handling updates',
    'method_updates.getDifference_param_pts_total_limit_type_int' => 'You cannot use this method directly, see https://docs.madelineproto.xyz for more info on handling updates',
    'method_updates.getDifference_param_date_type_int' => 'You cannot use this method directly, see https://docs.madelineproto.xyz for more info on handling updates',
    'method_updates.getDifference_param_qts_type_int' => 'You cannot use this method directly, see https://docs.madelineproto.xyz for more info on handling updates',
    'method_updates.getChannelDifference' => 'You cannot use this method directly, see https://docs.madelineproto.xyz for more info on handling updates',
    'method_updates.getChannelDifference_param_force_type_true' => 'You cannot use this method directly, see https://docs.madelineproto.xyz for more info on handling updates',
    'method_updates.getChannelDifference_param_channel_type_InputChannel' => 'You cannot use this method directly, see https://docs.madelineproto.xyz for more info on handling updates',
    'method_updates.getChannelDifference_param_filter_type_ChannelMessagesFilter' => 'You cannot use this method directly, see https://docs.madelineproto.xyz for more info on handling updates',
    'method_updates.getChannelDifference_param_pts_type_int' => 'You cannot use this method directly, see https://docs.madelineproto.xyz for more info on handling updates',
    'method_updates.getChannelDifference_param_limit_type_int' => 'You cannot use this method directly, see https://docs.madelineproto.xyz for more info on handling updates',
    'method_photos.updateProfilePhoto' => 'Installs a previously uploaded photo as a profile photo.',
    'method_photos.updateProfilePhoto_param_id_type_InputPhoto' => 'Input photo',
    'method_photos.uploadProfilePhoto' => 'Updates current user profile photo.',
    'method_photos.uploadProfilePhoto_param_file_type_InputFile' => 'File saved in parts by means of [upload.saveFilePart](../methods/upload.saveFilePart.md) method',
    'method_photos.deletePhotos' => 'Deletes profile photos.',
    'method_photos.deletePhotos_param_id_type_Vector t' => 'The profile photos to delete',
    'method_photos.getUserPhotos' => 'Returns the list of user photos.',
    'method_photos.getUserPhotos_param_user_id_type_InputUser' => 'User ID',
    'method_photos.getUserPhotos_param_offset_type_int' => 'Number of list elements to be skipped',
    'method_photos.getUserPhotos_param_max_id_type_long' => 'If a positive value was transferred, the method will return only photos with IDs less than the set one',
    'method_photos.getUserPhotos_param_limit_type_int' => 'Number of list elements to be returned',
    'method_upload.saveFilePart' => 'You cannot use this method directly, use the upload, downloadToStream, downloadToFile, downloadToDir methods instead; see https://docs.madelineproto.xyz for more info',
    'method_upload.saveFilePart_param_file_id_type_long' => 'You cannot use this method directly, use the upload, downloadToStream, downloadToFile, downloadToDir methods instead; see https://docs.madelineproto.xyz for more info',
    'method_upload.saveFilePart_param_file_part_type_int' => 'You cannot use this method directly, use the upload, downloadToStream, downloadToFile, downloadToDir methods instead; see https://docs.madelineproto.xyz for more info',
    'method_upload.saveFilePart_param_bytes_type_bytes' => 'You cannot use this method directly, use the upload, downloadToStream, downloadToFile, downloadToDir methods instead; see https://docs.madelineproto.xyz for more info',
    'method_upload.getFile' => 'You cannot use this method directly, use the upload, downloadToStream, downloadToFile, downloadToDir methods instead; see https://docs.madelineproto.xyz for more info',
    'method_upload.getFile_param_location_type_InputFileLocation' => 'You cannot use this method directly, use the upload, downloadToStream, downloadToFile, downloadToDir methods instead; see https://docs.madelineproto.xyz for more info',
    'method_upload.getFile_param_offset_type_int' => 'You cannot use this method directly, use the upload, downloadToStream, downloadToFile, downloadToDir methods instead; see https://docs.madelineproto.xyz for more info',
    'method_upload.getFile_param_limit_type_int' => 'You cannot use this method directly, use the upload, downloadToStream, downloadToFile, downloadToDir methods instead; see https://docs.madelineproto.xyz for more info',
    'method_upload.saveBigFilePart' => 'You cannot use this method directly, use the upload, downloadToStream, downloadToFile, downloadToDir methods instead; see https://docs.madelineproto.xyz for more info',
    'method_upload.saveBigFilePart_param_file_id_type_long' => 'You cannot use this method directly, use the upload, downloadToStream, downloadToFile, downloadToDir methods instead; see https://docs.madelineproto.xyz for more info',
    'method_upload.saveBigFilePart_param_file_part_type_int' => 'You cannot use this method directly, use the upload, downloadToStream, downloadToFile, downloadToDir methods instead; see https://docs.madelineproto.xyz for more info',
    'method_upload.saveBigFilePart_param_file_total_parts_type_int' => 'You cannot use this method directly, use the upload, downloadToStream, downloadToFile, downloadToDir methods instead; see https://docs.madelineproto.xyz for more info',
    'method_upload.saveBigFilePart_param_bytes_type_bytes' => 'You cannot use this method directly, use the upload, downloadToStream, downloadToFile, downloadToDir methods instead; see https://docs.madelineproto.xyz for more info',
    'method_upload.getWebFile' => 'Returns content of an HTTP file or a part, by proxying the request through telegram.',
    'method_upload.getWebFile_param_location_type_InputWebFileLocation' => 'The file to download',
    'method_upload.getWebFile_param_offset_type_int' => 'Number of bytes to be skipped',
    'method_upload.getWebFile_param_limit_type_int' => 'Number of bytes to be returned',
    'method_upload.getCdnFile' => 'You cannot use this method directly, use the upload, downloadToStream, downloadToFile, downloadToDir methods instead; see https://docs.madelineproto.xyz for more info',
    'method_upload.getCdnFile_param_file_token_type_bytes' => 'You cannot use this method directly, use the upload, downloadToStream, downloadToFile, downloadToDir methods instead; see https://docs.madelineproto.xyz for more info',
    'method_upload.getCdnFile_param_offset_type_int' => 'You cannot use this method directly, use the upload, downloadToStream, downloadToFile, downloadToDir methods instead; see https://docs.madelineproto.xyz for more info',
    'method_upload.getCdnFile_param_limit_type_int' => 'You cannot use this method directly, use the upload, downloadToStream, downloadToFile, downloadToDir methods instead; see https://docs.madelineproto.xyz for more info',
    'method_upload.reuploadCdnFile' => 'You cannot use this method directly, use the upload, downloadToStream, downloadToFile, downloadToDir methods instead; see https://docs.madelineproto.xyz for more info',
    'method_upload.reuploadCdnFile_param_file_token_type_bytes' => 'You cannot use this method directly, use the upload, downloadToStream, downloadToFile, downloadToDir methods instead; see https://docs.madelineproto.xyz for more info',
    'method_upload.reuploadCdnFile_param_request_token_type_bytes' => 'You cannot use this method directly, use the upload, downloadToStream, downloadToFile, downloadToDir methods instead; see https://docs.madelineproto.xyz for more info',
    'method_upload.getCdnFileHashes' => 'You cannot use this method directly, use the upload, downloadToStream, downloadToFile, downloadToDir methods instead; see https://docs.madelineproto.xyz for more info',
    'method_upload.getCdnFileHashes_param_file_token_type_bytes' => 'You cannot use this method directly, use the upload, downloadToStream, downloadToFile, downloadToDir methods instead; see https://docs.madelineproto.xyz for more info',
    'method_upload.getCdnFileHashes_param_offset_type_int' => 'You cannot use this method directly, use the upload, downloadToStream, downloadToFile, downloadToDir methods instead; see https://docs.madelineproto.xyz for more info',
    'method_help.getConfig' => 'Returns current configuration, icluding data center configuration.',
    'method_help.getNearestDc' => 'Returns info on data centre nearest to the user.',
    'method_help.getAppUpdate' => 'Returns information on update availability for the current application.',
    'method_help.saveAppLog' => 'Saves logs of application on the server.',
    'method_help.saveAppLog_param_events_type_Vector t' => 'Event list',
    'method_help.getInviteText' => 'Returns text of a text message with an invitation.',
    'method_help.getSupport' => 'Returns the support user for the \'ask a question\' feature.',
    'method_help.getAppChangelog' => 'Get changelog of current app',
    'method_help.getAppChangelog_param_prev_app_version_type_string' => 'Previous app version',
    'method_help.getTermsOfService' => 'Get terms of service',
    'method_help.setBotUpdatesStatus' => 'Informs the server about the number of pending bot updates if they haven\'t been processed for a long time; for bots only',
    'method_help.setBotUpdatesStatus_param_pending_updates_count_type_int' => 'Number of pending updates',
    'method_help.setBotUpdatesStatus_param_message_type_string' => 'Error message, if present',
    'method_help.getCdnConfig' => 'Get configuration for [CDN](https://core.telegram.org/cdn) file downloads.',
    'method_help.getRecentMeUrls' => 'Get recently used `t.me` links',
    'method_help.getRecentMeUrls_param_referer_type_string' => 'Referer',
    'method_channels.readHistory' => 'Mark [channel/supergroup](https://core.telegram.org/api/channel) history as read',
    'method_channels.readHistory_param_channel_type_InputChannel' => '[Channel/supergroup](https://core.telegram.org/api/channel)',
    'method_channels.readHistory_param_max_id_type_int' => 'ID of message up to which messages should be marked as read',
    'method_channels.deleteMessages' => 'Delete messages in a [channel/supergroup](https://core.telegram.org/api/channel)',
    'method_channels.deleteMessages_param_channel_type_InputChannel' => '[Channel/supergroup](https://core.telegram.org/api/channel)',
    'method_channels.deleteMessages_param_id_type_Vector t' => 'The IDs of messages to delete',
    'method_channels.deleteUserHistory' => 'Delete all messages sent by a certain user in a [supergroup](https://core.telegram.org/api/channel)',
    'method_channels.deleteUserHistory_param_channel_type_InputChannel' => '[Supergroup](https://core.telegram.org/api/channel)',
    'method_channels.deleteUserHistory_param_user_id_type_InputUser' => 'User whose messages should be deleted',
    'method_channels.reportSpam' => 'Reports some messages from a user in a supergroup as spam; requires administrator rights in the supergroup',
    'method_channels.reportSpam_param_channel_type_InputChannel' => 'Supergroup',
    'method_channels.reportSpam_param_user_id_type_InputUser' => 'ID of the user that sent the spam messages',
    'method_channels.reportSpam_param_id_type_Vector t' => 'The IDs of messages to report',
    'method_channels.getMessages' => 'Get [channel/supergroup](https://core.telegram.org/api/channel) messages',
    'method_channels.getMessages_param_channel_type_InputChannel' => 'Channel/supergroup',
    'method_channels.getMessages_param_id_type_Vector t' => 'The message IDs',
    'method_channels.getParticipants' => 'Get the participants of a channel',
    'method_channels.getParticipants_param_channel_type_InputChannel' => 'Channel',
    'method_channels.getParticipants_param_filter_type_ChannelParticipantsFilter' => 'Which participant types to fetch',
    'method_channels.getParticipants_param_offset_type_int' => '[Offset](https://core.telegram.org/api/offsets)',
    'method_channels.getParticipants_param_limit_type_int' => '[Limit](https://core.telegram.org/api/offsets)',
    'method_channels.getParticipants_param_hash_type_int' => '[Hash](https://core.telegram.org/api/offsets)',
    'method_channels.getParticipant' => 'Get info about a [channel/supergroup](https://core.telegram.org/api/channel) participant',
    'method_channels.getParticipant_param_channel_type_InputChannel' => 'Channel/supergroup',
    'method_channels.getParticipant_param_user_id_type_InputUser' => 'ID of participant to get info about',
    'method_channels.getChannels' => 'Get info about [channels/supergroups](https://core.telegram.org/api/channel)',
    'method_channels.getChannels_param_id_type_Vector t' => 'The channel/supergroup MTProto IDs',
    'method_channels.getFullChannel' => 'You cannot use this method directly, use the getPwrChat, getInfo, getFullInfo methods instead (see https://docs.madelineproto.xyz for more info)',
    'method_channels.getFullChannel_param_channel_type_InputChannel' => 'You cannot use this method directly, use the getPwrChat, getInfo, getFullInfo methods instead (see https://docs.madelineproto.xyz for more info)',
    'method_channels.createChannel' => 'Create a [supergroup/channel](https://core.telegram.org/api/channel).',
    'method_channels.createChannel_param_broadcast_type_true' => 'Whether to create a [channel](https://core.telegram.org/api/channel)',
    'method_channels.createChannel_param_megagroup_type_true' => 'Whether to create a [supergroup](https://core.telegram.org/api/channel)',
    'method_channels.createChannel_param_title_type_string' => 'Channel title',
    'method_channels.createChannel_param_about_type_string' => 'Channel description',
    'method_channels.editAbout' => 'Edit the about text of a channel/supergroup',
    'method_channels.editAbout_param_channel_type_InputChannel' => 'The channel',
    'method_channels.editAbout_param_about_type_string' => 'The new about text',
    'method_channels.editAdmin' => 'Modify the admin rights of a user in a [supergroup/channel](https://core.telegram.org/api/channel).',
    'method_channels.editAdmin_param_channel_type_InputChannel' => 'The [supergroup/channel](https://core.telegram.org/api/channel).',
    'method_channels.editAdmin_param_user_id_type_InputUser' => 'The ID of the user whose admin rights should be modified',
    'method_channels.editAdmin_param_admin_rights_type_ChannelAdminRights' => 'The new admin rights',
    'method_channels.editTitle' => 'Edit the name of a [channel/supergroup](https://core.telegram.org/api/channel)',
    'method_channels.editTitle_param_channel_type_InputChannel' => 'Channel/supergroup',
    'method_channels.editTitle_param_title_type_string' => 'New name',
    'method_channels.editPhoto' => 'Change the photo of a [channel/supergroup](https://core.telegram.org/api/channel)',
    'method_channels.editPhoto_param_channel_type_InputChannel' => 'Channel/supergroup whose photo should be edited',
    'method_channels.editPhoto_param_photo_type_InputChatPhoto' => 'New photo',
    'method_channels.checkUsername' => 'Check if a username is free and can be assigned to a channel/supergroup',
    'method_channels.checkUsername_param_channel_type_InputChannel' => 'The [channel/supergroup](https://core.telegram.org/api/channel) that will assigned the specified username',
    'method_channels.checkUsername_param_username_type_string' => 'The username to check',
    'method_channels.updateUsername' => 'Change the username of a supergroup/channel',
    'method_channels.updateUsername_param_channel_type_InputChannel' => 'Channel',
    'method_channels.updateUsername_param_username_type_string' => 'New username',
    'method_channels.joinChannel' => 'Join a channel/supergroup',
    'method_channels.joinChannel_param_channel_type_InputChannel' => 'Channel/supergroup to join',
    'method_channels.leaveChannel' => 'Leave a [channel/supergroup](https://core.telegram.org/api/channel)',
    'method_channels.leaveChannel_param_channel_type_InputChannel' => '[Channel/supergroup](https://core.telegram.org/api/channel) to leave',
    'method_channels.inviteToChannel' => 'Invite users to a channel/supergroup',
    'method_channels.inviteToChannel_param_channel_type_InputChannel' => 'Channel/supergroup',
    'method_channels.inviteToChannel_param_users_type_Vector t' => 'The users to add',
    'method_channels.exportInvite' => 'Export the invite link of a channel',
    'method_channels.exportInvite_param_channel_type_InputChannel' => 'The channel',
    'method_channels.deleteChannel' => 'Delete a [channel/supergroup](https://core.telegram.org/api/channel)',
    'method_channels.deleteChannel_param_channel_type_InputChannel' => '[Channel/supergroup](https://core.telegram.org/api/channel) to delete',
    'method_channels.toggleInvites' => 'Allow or disallow any user to invite users to this channel/supergroup',
    'method_channels.toggleInvites_param_channel_type_InputChannel' => 'The channel/supergroup',
    'method_channels.toggleInvites_param_enabled_type_Bool' => 'Allow or disallow',
    'method_channels.exportMessageLink' => 'Get link and embed info of a message in a [channel/supergroup](https://core.telegram.org/api/channel)',
    'method_channels.exportMessageLink_param_channel_type_InputChannel' => 'Channel',
    'method_channels.exportMessageLink_param_id_type_int' => 'Message ID',
    'method_channels.exportMessageLink_param_grouped_type_Bool' => 'Whether to include other grouped media (for albums)',
    'method_channels.toggleSignatures' => 'Enable/disable message signatures in channels',
    'method_channels.toggleSignatures_param_channel_type_InputChannel' => 'Channel',
    'method_channels.toggleSignatures_param_enabled_type_Bool' => 'Value',
    'method_channels.updatePinnedMessage' => 'Set the pinned message of a channel/supergroup',
    'method_channels.updatePinnedMessage_param_silent_type_true' => 'Pin silently',
    'method_channels.updatePinnedMessage_param_channel_type_InputChannel' => 'The channel/supergroup',
    'method_channels.updatePinnedMessage_param_id_type_int' => 'The ID of the message to pin',
    'method_channels.getAdminedPublicChannels' => 'Get [channels/supergroups/geogroups](https://core.telegram.org/api/channel) we\'re admin in. Usually called when the user exceeds the [limit](../constructors/config.md) for owned public [channels/supergroups/geogroups](https://core.telegram.org/api/channel), and the user is given the choice to remove one of his channels/supergroups/geogroups.',
    'method_channels.editBanned' => 'Ban/unban/kick a user in a [supergroup/channel](https://core.telegram.org/api/channel).',
    'method_channels.editBanned_param_channel_type_InputChannel' => 'The [supergroup/channel](https://core.telegram.org/api/channel).',
    'method_channels.editBanned_param_user_id_type_InputUser' => 'The ID of the user whose banned rights should be modified',
    'method_channels.editBanned_param_banned_rights_type_ChannelBannedRights' => 'Banned/kicked permissions',
    'method_channels.getAdminLog' => 'Get the admin log of a [channel/supergroup](https://core.telegram.org/api/channel)',
    'method_channels.getAdminLog_param_channel_type_InputChannel' => 'Channel',
    'method_channels.getAdminLog_param_q_type_string' => 'Search query, can be empty',
    'method_channels.getAdminLog_param_events_filter_type_ChannelAdminLogEventsFilter' => 'Event filter',
    'method_channels.getAdminLog_param_admins_type_Vector t' => 'Fetch only actions from these admins',
    'method_channels.getAdminLog_param_max_id_type_long' => 'Maximum ID of message to return (see [pagination](https://core.telegram.org/api/offsets))',
    'method_channels.getAdminLog_param_min_id_type_long' => 'Minimum ID of message to return (see [pagination](https://core.telegram.org/api/offsets))',
    'method_channels.getAdminLog_param_limit_type_int' => 'Maximum number of results to return, [see pagination](https://core.telegram.org/api/offsets)',
    'method_channels.setStickers' => 'Associate a stickerset to the supergroup',
    'method_channels.setStickers_param_channel_type_InputChannel' => 'Supergroup',
    'method_channels.setStickers_param_stickerset_type_InputStickerSet' => 'The stickerset to associate',
    'method_channels.readMessageContents' => 'Mark [channel/supergroup](https://core.telegram.org/api/channel) message contents as read',
    'method_channels.readMessageContents_param_channel_type_InputChannel' => '[Channel/supergroup](https://core.telegram.org/api/channel)',
    'method_channels.readMessageContents_param_id_type_Vector t' => 'List of message IDs',
    'method_channels.deleteHistory' => 'Delete the history of a [supergroup](https://core.telegram.org/api/channel)',
    'method_channels.deleteHistory_param_channel_type_InputChannel' => '[Supergroup](https://core.telegram.org/api/channel) whose history must be deleted',
    'method_channels.deleteHistory_param_max_id_type_int' => 'ID of message **up to which** the history must be deleted',
    'method_channels.togglePreHistoryHidden' => 'Hide/unhide message history for new channel/supergroup users',
    'method_channels.togglePreHistoryHidden_param_channel_type_InputChannel' => 'Channel/supergroup',
    'method_channels.togglePreHistoryHidden_param_enabled_type_Bool' => 'Hide/unhide',
    'method_bots.sendCustomRequest' => 'Sends a custom request; for bots only',
    'method_bots.sendCustomRequest_param_custom_method_type_string' => 'The method name',
    'method_bots.sendCustomRequest_param_params_type_DataJSON' => 'JSON-serialized method parameters',
    'method_bots.answerWebhookJSONQuery' => 'Answers a custom query; for bots only',
    'method_bots.answerWebhookJSONQuery_param_query_id_type_long' => 'Identifier of a custom query',
    'method_bots.answerWebhookJSONQuery_param_data_type_DataJSON' => 'JSON-serialized answer to the query',
    'method_payments.getPaymentForm' => 'Get a payment form',
    'method_payments.getPaymentForm_param_msg_id_type_int' => 'Message ID of payment form',
    'method_payments.getPaymentReceipt' => 'Get payment receipt',
    'method_payments.getPaymentReceipt_param_msg_id_type_int' => 'Message ID of receipt',
    'method_payments.validateRequestedInfo' => 'Submit requested order information for validation',
    'method_payments.validateRequestedInfo_param_save_type_true' => 'Save order information to re-use it for future orders',
    'method_payments.validateRequestedInfo_param_msg_id_type_int' => 'Message ID of payment form',
    'method_payments.validateRequestedInfo_param_info_type_PaymentRequestedInfo' => 'Requested order information',
    'method_payments.sendPaymentForm' => 'Send compiled payment form',
    'method_payments.sendPaymentForm_param_msg_id_type_int' => 'Message ID of form',
    'method_payments.sendPaymentForm_param_requested_info_id_type_string' => 'ID of saved and validated [order info](../constructors/payments.validatedRequestedInfo.md)',
    'method_payments.sendPaymentForm_param_shipping_option_id_type_string' => 'Chosen shipping option ID',
    'method_payments.sendPaymentForm_param_credentials_type_InputPaymentCredentials' => 'Payment credentials',
    'method_payments.getSavedInfo' => 'Get saved payment information',
    'method_payments.clearSavedInfo' => 'Clear saved payment information',
    'method_payments.clearSavedInfo_param_credentials_type_true' => 'Remove saved payment credentials',
    'method_payments.clearSavedInfo_param_info_type_true' => 'Clear the last order settings saved by the user',
    'method_stickers.createStickerSet' => 'Create a stickerset, bots only.',
    'method_stickers.createStickerSet_param_masks_type_true' => 'Whether this is a mask stickerset',
    'method_stickers.createStickerSet_param_user_id_type_InputUser' => 'Stickerset owner',
    'method_stickers.createStickerSet_param_title_type_string' => 'Stickerset name, `1-64` chars',
    'method_stickers.createStickerSet_param_short_name_type_string' => 'Sticker set name. Can contain only English letters, digits and underscores. Must end with *"*by*<bot username="">"</bot>* (*<bot_username></bot_username>* is case insensitive); 1-64 characters',
    'method_stickers.createStickerSet_param_stickers_type_Vector t' => 'The stickers to add',
    'method_stickers.removeStickerFromSet' => 'Remove a sticker from the set where it belongs, bots only. The sticker set must have been created by the bot.',
    'method_stickers.removeStickerFromSet_param_sticker_type_InputDocument' => 'The sticker to remove',
    'method_stickers.changeStickerPosition' => 'Changes the absolute position of a sticker in the set to which it belongs; for bots only. The sticker set must have been created by the bot',
    'method_stickers.changeStickerPosition_param_sticker_type_InputDocument' => 'The sticker',
    'method_stickers.changeStickerPosition_param_position_type_int' => 'The new position of the sticker, zero-based',
    'method_stickers.addStickerToSet' => 'Add a sticker to a stickerset, bots only. The sticker set must have been created by the bot.',
    'method_stickers.addStickerToSet_param_stickerset_type_InputStickerSet' => 'The stickerset',
    'method_stickers.addStickerToSet_param_sticker_type_InputStickerSetItem' => 'The sticker',
    'method_phone.getCallConfig' => 'Get phone call configuration to be passed to libtgvoip\'s shared config',
    'method_phone.requestCall' => 'You cannot use this method directly, see https://docs.madelineproto.xyz#calls for more info on handling calls',
    'method_phone.requestCall_param_user_id_type_InputUser' => 'You cannot use this method directly, see https://docs.madelineproto.xyz#calls for more info on handling calls',
    'method_phone.requestCall_param_g_a_hash_type_bytes' => 'You cannot use this method directly, see https://docs.madelineproto.xyz#calls for more info on handling calls',
    'method_phone.requestCall_param_protocol_type_PhoneCallProtocol' => 'You cannot use this method directly, see https://docs.madelineproto.xyz#calls for more info on handling calls',
    'method_phone.acceptCall' => 'You cannot use this method directly, see https://docs.madelineproto.xyz#calls for more info on handling calls',
    'method_phone.acceptCall_param_peer_type_InputPhoneCall' => 'You cannot use this method directly, see https://docs.madelineproto.xyz#calls for more info on handling calls',
    'method_phone.acceptCall_param_g_b_type_bytes' => 'You cannot use this method directly, see https://docs.madelineproto.xyz#calls for more info on handling calls',
    'method_phone.acceptCall_param_protocol_type_PhoneCallProtocol' => 'You cannot use this method directly, see https://docs.madelineproto.xyz#calls for more info on handling calls',
    'method_phone.confirmCall' => 'You cannot use this method directly, see https://docs.madelineproto.xyz#calls for more info on handling calls',
    'method_phone.confirmCall_param_peer_type_InputPhoneCall' => 'You cannot use this method directly, see https://docs.madelineproto.xyz#calls for more info on handling calls',
    'method_phone.confirmCall_param_g_a_type_bytes' => 'You cannot use this method directly, see https://docs.madelineproto.xyz#calls for more info on handling calls',
    'method_phone.confirmCall_param_key_fingerprint_type_long' => 'You cannot use this method directly, see https://docs.madelineproto.xyz#calls for more info on handling calls',
    'method_phone.confirmCall_param_protocol_type_PhoneCallProtocol' => 'You cannot use this method directly, see https://docs.madelineproto.xyz#calls for more info on handling calls',
    'method_phone.receivedCall' => 'Optional: notify the server that the user is currently busy in a call: this will automatically refuse all incoming phone calls until the current phone call is ended.',
    'method_phone.receivedCall_param_peer_type_InputPhoneCall' => 'The phone call we\'re currently in',
    'method_phone.discardCall' => 'You cannot use this method directly, see https://docs.madelineproto.xyz#calls for more info on handling calls',
    'method_phone.discardCall_param_peer_type_InputPhoneCall' => 'You cannot use this method directly, see https://docs.madelineproto.xyz#calls for more info on handling calls',
    'method_phone.discardCall_param_duration_type_int' => 'You cannot use this method directly, see https://docs.madelineproto.xyz#calls for more info on handling calls',
    'method_phone.discardCall_param_reason_type_PhoneCallDiscardReason' => 'You cannot use this method directly, see https://docs.madelineproto.xyz#calls for more info on handling calls',
    'method_phone.discardCall_param_connection_id_type_long' => 'You cannot use this method directly, see https://docs.madelineproto.xyz#calls for more info on handling calls',
    'method_phone.setCallRating' => 'Rate a call',
    'method_phone.setCallRating_param_peer_type_InputPhoneCall' => 'The call to rate',
    'method_phone.setCallRating_param_rating_type_int' => 'Rating in `1-5` stars',
    'method_phone.setCallRating_param_comment_type_string' => 'An additional comment',
    'method_phone.saveCallDebug' => 'Send phone call debug data to server',
    'method_phone.saveCallDebug_param_peer_type_InputPhoneCall' => 'Phone call',
    'method_phone.saveCallDebug_param_debug_type_DataJSON' => 'Debug statistics obtained from libtgvoip',
    'method_langpack.getLangPack' => 'Get localization pack strings',
    'method_langpack.getLangPack_param_lang_code_type_string' => 'Language code',
    'method_langpack.getStrings' => 'Get strings from a language pack',
    'method_langpack.getStrings_param_lang_code_type_string' => 'Language code',
    'method_langpack.getStrings_param_keys_type_Vector t' => 'Keys',
    'method_langpack.getDifference' => 'Get new strings in languagepack',
    'method_langpack.getDifference_param_from_version_type_int' => 'Previous localization pack version',
    'method_langpack.getLanguages' => 'Get information about all languages in a localization pack',
    'method_auth.sendCode_param_sms_type_type_int' => 'You cannot use this method directly, use the phoneLogin method instead (see https://docs.madelineproto.xyz for more info)',
    'method_auth.sendCode_param_lang_code_type_string' => 'You cannot use this method directly, use the phoneLogin method instead (see https://docs.madelineproto.xyz for more info)',
    'method_auth.sendCall' => 'Send verification phone call',
    'method_auth.sendCall_param_phone_number_type_string' => 'The phone number',
    'method_auth.sendCall_param_phone_code_hash_type_string' => 'The phone code hash',
    'method_account.registerDevice_param_device_model_type_string' => 'Device model',
    'method_account.registerDevice_param_system_version_type_string' => 'System version',
    'method_account.registerDevice_param_app_version_type_string' => 'App version',
    'method_account.registerDevice_param_lang_code_type_string' => 'Language code',
    'method_contacts.getContacts_param_hash_type_string' => 'List of contact user IDs you already cached',
    'method_contacts.importContacts_param_replace_type_Bool' => 'Replace contacts?',
    'method_contacts.getSuggested' => 'Get suggested contacts',
    'method_contacts.getSuggested_param_limit_type_int' => 'Number of results to return',
    'method_messages.getDialogs_param_offset_type_int' => 'Offset',
    'method_messages.getDialogs_param_max_id_type_int' => 'Maximum ID of result to return',
    'method_messages.getHistory_param_offset_type_int' => 'Message ID offset',
    'method_messages.search_param_offset_type_int' => 'Offset ',
    'method_messages.readHistory_param_offset_type_int' => 'Offset',
    'method_messages.readHistory_param_read_contents_type_Bool' => 'Mark messages as read?',
    'method_messages.deleteHistory_param_offset_type_int' => 'Offset',
    'method_messages.forwardMessages_param_peer_type_InputPeer' => 'Peer',
    'method_photos.updateProfilePhoto_param_crop_type_InputPhotoCrop' => 'Cropping info',
    'method_photos.uploadProfilePhoto_param_caption_type_string' => 'Caption type',
    'method_photos.uploadProfilePhoto_param_geo_point_type_InputGeoPoint' => 'Location',
    'method_photos.uploadProfilePhoto_param_crop_type_InputPhotoCrop' => 'Cropping info',
    'method_help.getAppUpdate_param_device_model_type_string' => 'Device model',
    'method_help.getAppUpdate_param_system_version_type_string' => 'System version',
    'method_help.getAppUpdate_param_app_version_type_string' => 'App version',
    'method_help.getAppUpdate_param_lang_code_type_string' => 'Langauge code',
    'method_help.getInviteText_param_lang_code_type_string' => 'Language',
    'method_photos.getUserPhotos_param_max_id_type_int' => 'Maximum ID of photo to return',
    'method_messages.forwardMessage' => 'Forward message',
    'method_messages.forwardMessage_param_peer_type_InputPeer' => 'From where to forward the message',
    'method_messages.forwardMessage_param_id_type_int' => 'The message ID',
    'method_messages.sendBroadcast' => 'Send a message to all users in the chat list',
    'method_messages.sendBroadcast_param_contacts_type_Vector t' => 'The users to which send the message',
    'method_messages.sendBroadcast_param_message_type_string' => 'The message',
    'method_messages.sendBroadcast_param_media_type_InputMedia' => 'The media',
    'method_auth.sendSms' => 'Send SMS verification code',
    'method_auth.sendSms_param_phone_number_type_string' => 'Phone number',
    'method_auth.sendSms_param_phone_code_hash_type_string' => 'Phone code ash',
    'method_invokeWithLayer18' => 'Invoke this method with layer 18',
    'method_invokeWithLayer18_param_query_type_!X' => 'The method call',
    'method_messages.getAllStickers_param_hash_type_string' => 'Previously fetched stickers',
    'method_geochats.getLocated' => 'Get nearby geochats',
    'method_geochats.getLocated_param_geo_point_type_InputGeoPoint' => 'Current location',
    'method_geochats.getLocated_param_radius_type_int' => 'Radius',
    'method_geochats.getLocated_param_limit_type_int' => 'Number of results to return',
    'method_geochats.getRecents' => 'Get recent geochats',
    'method_geochats.getRecents_param_offset_type_int' => 'Offset',
    'method_geochats.getRecents_param_limit_type_int' => 'Number of results to return',
    'method_geochats.checkin' => 'Join a geochat',
    'method_geochats.checkin_param_peer_type_InputGeoChat' => 'The geochat',
    'method_geochats.getFullChat' => 'Get full info about a geochat',
    'method_geochats.getFullChat_param_peer_type_InputGeoChat' => 'The geochat',
    'method_geochats.editChatTitle' => 'Edit geochat title',
    'method_geochats.editChatTitle_param_peer_type_InputGeoChat' => 'The geochat',
    'method_geochats.editChatTitle_param_title_type_string' => 'The new title',
    'method_geochats.editChatTitle_param_address_type_string' => 'The new address',
    'method_geochats.editChatPhoto' => 'Edit geochat photo',
    'method_geochats.editChatPhoto_param_peer_type_InputGeoChat' => 'The geochat',
    'method_geochats.editChatPhoto_param_photo_type_InputChatPhoto' => 'The new photo',
    'method_geochats.search' => 'Search messages in geocha',
    'method_geochats.search_param_peer_type_InputGeoChat' => 'The geochat',
    'method_geochats.search_param_q_type_string' => 'The search query',
    'method_geochats.search_param_filter_type_MessagesFilter' => 'Search filter',
    'method_geochats.search_param_min_date_type_int' => 'Minumum date',
    'method_geochats.search_param_max_date_type_int' => 'Maximum date',
    'method_geochats.search_param_offset_type_int' => 'Offset',
    'method_geochats.search_param_max_id_type_int' => 'Maximum message ID',
    'method_geochats.search_param_limit_type_int' => 'Number of results to return',
    'method_geochats.getHistory' => 'Get geochat history',
    'method_geochats.getHistory_param_peer_type_InputGeoChat' => 'The geochat',
    'method_geochats.getHistory_param_offset_type_int' => 'Offset',
    'method_geochats.getHistory_param_max_id_type_int' => 'Maximum message ID',
    'method_geochats.getHistory_param_limit_type_int' => 'Number of results to return',
    'method_geochats.setTyping' => 'Send typing notification to geochat',
    'method_geochats.setTyping_param_peer_type_InputGeoChat' => 'The geochat',
    'method_geochats.setTyping_param_typing_type_Bool' => 'Typing or not typing',
    'method_geochats.sendMessage' => 'Send message to geochat',
    'method_geochats.sendMessage_param_peer_type_InputGeoChat' => 'The geochat',
    'method_geochats.sendMessage_param_message_type_string' => 'The message',
    'method_geochats.sendMedia' => 'Send media to geochat',
    'method_geochats.sendMedia_param_peer_type_InputGeoChat' => 'The geochat',
    'method_geochats.sendMedia_param_media_type_InputMedia' => 'The media',
    'method_geochats.createGeoChat' => 'Create geochat',
    'method_geochats.createGeoChat_param_title_type_string' => 'Geochat title',
    'method_geochats.createGeoChat_param_geo_point_type_InputGeoPoint' => 'Geochat location',
    'method_geochats.createGeoChat_param_address_type_string' => 'Geochat address',
    'method_geochats.createGeoChat_param_venue_type_string' => 'Geochat venue ',
    'method_account.setPassword' => 'Set 2FA password',
    'method_account.setPassword_param_current_password_hash_type_bytes' => 'Use only if you have set a 2FA password: `$current_salt = $MadelineProto->account->getPassword()[\'current_salt\']; $current_password_hash = hash(\'sha256\', $current_salt.$password.$current_salt, true);`',
    'method_account.setPassword_param_new_salt_type_bytes' => 'New salt',
    'method_account.setPassword_param_new_password_hash_type_bytes' => '`hash(\'sha256\', $new_salt.$new_password.$new_salt, true)`',
    'method_account.setPassword_param_hint_type_string' => 'Hint',
    'method_messages.installStickerSet_param_disabled_type_Bool' => 'Disable stickerset?',
    'method_messages.startBot_param_chat_id_type_InputPeer' => 'Chat ID',
    'method_help.getAppChangelog_param_device_model_type_string' => 'Device model',
    'method_help.getAppChangelog_param_system_version_type_string' => 'System version',
    'method_help.getAppChangelog_param_app_version_type_string' => 'App version',
    'method_help.getAppChangelog_param_lang_code_type_string' => 'Language code',
    'method_channels.getDialogs' => 'Get channel dialogs',
    'method_channels.getDialogs_param_offset_type_int' => 'Offset',
    'method_channels.getDialogs_param_limit_type_int' => 'Number of results to return',
    'method_channels.getImportantHistory' => 'Get important channel/supergroup history',
    'method_channels.getImportantHistory_param_channel_type_InputChannel' => 'The supergroup/channel',
    'method_channels.getImportantHistory_param_offset_id_type_int' => 'Message ID offset',
    'method_channels.getImportantHistory_param_add_offset_type_int' => 'Additional offset',
    'method_channels.getImportantHistory_param_limit_type_int' => 'Number of results to return',
    'method_channels.getImportantHistory_param_max_id_type_int' => 'Maximum message ID',
    'method_channels.getImportantHistory_param_min_id_type_int' => 'Minumum message ID',
    'method_channels.createChannel_param_users_type_Vector t' => 'Users to add to channel',
    'method_channels.editAdmin_param_role_type_ChannelParticipantRole' => 'User role',
    'method_channels.toggleComments' => 'Enable channel comments',
    'method_channels.toggleComments_param_channel_type_InputChannel' => 'The channel ',
    'method_channels.toggleComments_param_enabled_type_Bool' => 'Enable or disable comments',
    'method_channels.kickFromChannel' => 'Kick user from channel',
    'method_channels.kickFromChannel_param_channel_type_InputChannel' => 'The channel',
    'method_channels.kickFromChannel_param_user_id_type_InputUser' => 'The user to kick',
    'method_channels.kickFromChannel_param_kicked_type_Bool' => 'Kick or unkick?',
    'method_messages.getChannelDialogs' => 'Get channel/supergruop dialogs',
    'method_messages.getChannelDialogs_param_offset_type_int' => 'Offset',
    'method_messages.getChannelDialogs_param_limit_type_int' => 'Number of results to return',
    'method_messages.getImportantHistory' => 'Get important message history',
    'method_messages.getImportantHistory_param_peer_type_InputPeer' => 'Peer',
    'method_messages.getImportantHistory_param_max_id_type_int' => 'Maximum message ID to fetch',
    'method_messages.getImportantHistory_param_min_id_type_int' => 'Minumum message ID to fetch',
    'method_messages.getImportantHistory_param_limit_type_int' => 'Number of results to fetch',
    'method_messages.readChannelHistory' => 'Mark channel/supergroup history as read',
    'method_messages.readChannelHistory_param_peer_type_InputPeer' => 'The channel/supergruop',
    'method_messages.readChannelHistory_param_max_id_type_int' => 'Maximum message ID to mark as read',
    'method_messages.createChannel' => 'Create channel',
    'method_messages.createChannel_param_title_type_string' => 'Channel/supergroup title',
    'method_messages.deleteChannelMessages' => 'Delete channel messages',
    'method_messages.deleteChannelMessages_param_peer_type_InputPeer' => 'The channel/supergroup',
    'method_messages.deleteChannelMessages_param_id_type_Vector t' => 'The IDs of messages to delete',
    'method_updates.getChannelDifference_param_peer_type_InputPeer' => 'You cannot use this method directly, see https://docs.madelineproto.xyz for more info on handling updates',
    'method_messages.search_param_important_only_type_true' => 'Show only important messages',
    'method_messages.sendMessage_param_broadcast_type_true' => 'Broadcast this message',
    'method_messages.sendMedia_param_broadcast_type_true' => 'Broadcast this message',
    'method_messages.forwardMessages_param_broadcast_type_true' => 'Broadcast this message',
    'method_messages.deactivateChat' => 'Deactivate chat',
    'method_messages.deactivateChat_param_chat_id_type_InputPeer' => 'The chat to deactivate',
    'method_messages.deactivateChat_param_enabled_type_Bool' => 'Activate or deactivate?',
    'method_help.getTermsOfService_param_lang_code_type_string' => 'Language code',
    'method_messages.sendInlineBotResult_param_broadcast_type_true' => 'Broadcast this message?',
    'method_channels.getImportantHistory_param_offset_date_type_int' => 'Date offset',
    'method_messages.getUnusedStickers' => 'Get unused stickers',
    'method_messages.getUnusedStickers_param_limit_type_int' => 'Number of results to return',
    'method_destroy_auth_key' => 'Destroy current authorization key',
    'method_phone.requestCall_param_g_a_type_bytes' => 'You cannot use this method directly, see https://docs.madelineproto.xyz#calls for more info on handling calls',
    'method_phone.acceptCall_param_key_fingerprint_type_long' => 'You cannot use this method directly, see https://docs.madelineproto.xyz#calls for more info on handling calls',
    'method_req_DH_params_param_p_type_string' => 'Factorized p from pq',
    'method_req_DH_params_param_q_type_string' => 'Factorized q from pq',
    'method_req_DH_params_param_encrypted_data_type_string' => 'Encrypted message',
    'method_set_client_DH_params_param_encrypted_data_type_string' => 'Encrypted message',
    'method_contest.saveDeveloperInfo' => 'Save developer info for telegram contest',
    'method_contest.saveDeveloperInfo_param_vk_id_type_int' => 'VK user ID',
    'method_contest.saveDeveloperInfo_param_name_type_string' => 'Name',
    'method_contest.saveDeveloperInfo_param_phone_number_type_string' => 'Phone number',
    'method_contest.saveDeveloperInfo_param_age_type_int' => 'Age',
    'method_contest.saveDeveloperInfo_param_city_type_string' => 'City',
    'method_auth.importBotAuthorization_param_a_type_true' => 'You cannot use this method directly, use the botLogin method instead (see https://docs.madelineproto.xyz for more info)',
    'method_auth.importBotAuthorization_param_b_type_true' => 'You cannot use this method directly, use the botLogin method instead (see https://docs.madelineproto.xyz for more info)',
    'method_auth.importBotAuthorization_param_c_type_true' => 'You cannot use this method directly, use the botLogin method instead (see https://docs.madelineproto.xyz for more info)',
    'method_auth.importBotAuthorization_param_d_type_true' => 'You cannot use this method directly, use the botLogin method instead (see https://docs.madelineproto.xyz for more info)',
    'object_vector' => 'A universal vector constructor.',
    'object_resPQ' => 'Contains pq to factorize',
    'object_resPQ_param_nonce_type_int128' => 'Nonce',
    'object_resPQ_param_server_nonce_type_int128' => 'Server nonce',
    'object_resPQ_param_pq_type_bytes' => 'PQ ',
    'object_resPQ_param_server_public_key_fingerprints_type_Vector t' => 'RSA key fingerprints',
    'object_p_q_inner_data' => 'PQ inner data',
    'object_p_q_inner_data_param_pq_type_bytes' => 'PQ',
    'object_p_q_inner_data_param_p_type_bytes' => 'P',
    'object_p_q_inner_data_param_q_type_bytes' => 'Q',
    'object_p_q_inner_data_param_nonce_type_int128' => 'Nonce',
    'object_p_q_inner_data_param_server_nonce_type_int128' => 'Nonce',
    'object_p_q_inner_data_param_new_nonce_type_int256' => 'Nonce',
    'object_p_q_inner_data_temp' => 'Inner data temp',
    'object_p_q_inner_data_temp_param_pq_type_bytes' => 'Pq',
    'object_p_q_inner_data_temp_param_p_type_bytes' => 'P',
    'object_p_q_inner_data_temp_param_q_type_bytes' => 'Q',
    'object_p_q_inner_data_temp_param_nonce_type_int128' => 'Random number for cryptographic security',
    'object_p_q_inner_data_temp_param_server_nonce_type_int128' => 'Random number for cryptographic security, given by server',
    'object_p_q_inner_data_temp_param_new_nonce_type_int256' => 'New nonce',
    'object_p_q_inner_data_temp_param_expires_in_type_int' => 'Expires in',
    'object_server_DH_params_fail' => 'Server params fail',
    'object_server_DH_params_fail_param_nonce_type_int128' => 'Random number for cryptographic security',
    'object_server_DH_params_fail_param_server_nonce_type_int128' => 'Random number for cryptographic security, given by server',
    'object_server_DH_params_fail_param_new_nonce_hash_type_int128' => 'New nonce hash',
    'object_server_DH_params_ok' => 'Server params ok',
    'object_server_DH_params_ok_param_nonce_type_int128' => 'Random number for cryptographic security',
    'object_server_DH_params_ok_param_server_nonce_type_int128' => 'Random number for cryptographic security, given by server',
    'object_server_DH_params_ok_param_encrypted_answer_type_bytes' => 'Encrypted answer',
    'object_server_DH_inner_data' => 'Server inner data',
    'object_server_DH_inner_data_param_nonce_type_int128' => 'Random number for cryptographic security',
    'object_server_DH_inner_data_param_server_nonce_type_int128' => 'Random number for cryptographic security, given by server',
    'object_server_DH_inner_data_param_g_type_int' => 'G',
    'object_server_DH_inner_data_param_dh_prime_type_bytes' => 'Dh prime',
    'object_server_DH_inner_data_param_g_a_type_bytes' => 'G a',
    'object_server_DH_inner_data_param_server_time_type_int' => 'Server time',
    'object_client_DH_inner_data' => 'Client inner data',
    'object_client_DH_inner_data_param_nonce_type_int128' => 'Random number for cryptographic security',
    'object_client_DH_inner_data_param_server_nonce_type_int128' => 'Random number for cryptographic security, given by server',
    'object_client_DH_inner_data_param_retry_id_type_long' => 'Retry ID',
    'object_client_DH_inner_data_param_g_b_type_bytes' => 'G b',
    'object_dh_gen_ok' => 'Dh gen ok',
    'object_dh_gen_ok_param_nonce_type_int128' => 'Random number for cryptographic security',
    'object_dh_gen_ok_param_server_nonce_type_int128' => 'Random number for cryptographic security, given by server',
    'object_dh_gen_ok_param_new_nonce_hash1_type_int128' => 'New nonce hash1',
    'object_dh_gen_retry' => 'Dh gen retry',
    'object_dh_gen_retry_param_nonce_type_int128' => 'Random number for cryptographic security',
    'object_dh_gen_retry_param_server_nonce_type_int128' => 'Random number for cryptographic security, given by server',
    'object_dh_gen_retry_param_new_nonce_hash2_type_int128' => 'New nonce hash2',
    'object_dh_gen_fail' => 'Dh gen fail',
    'object_dh_gen_fail_param_nonce_type_int128' => 'Random number for cryptographic security',
    'object_dh_gen_fail_param_server_nonce_type_int128' => 'Random number for cryptographic security, given by server',
    'object_dh_gen_fail_param_new_nonce_hash3_type_int128' => 'New nonce hash3',
    'object_rpc_result' => 'Rpc result',
    'object_rpc_result_param_req_msg_id_type_long' => 'Req msg ID',
    'object_rpc_result_param_result_type_Object' => 'Result',
    'object_rpc_error' => 'Rpc error',
    'object_rpc_error_param_error_code_type_int' => 'Error code',
    'object_rpc_error_param_error_message_type_string' => 'Error message',
    'object_rpc_answer_unknown' => 'Rpc answer unknown',
    'object_rpc_answer_dropped_running' => 'Rpc answer dropped running',
    'object_rpc_answer_dropped' => 'Rpc answer dropped',
    'object_rpc_answer_dropped_param_msg_id_type_long' => 'Msg ID',
    'object_rpc_answer_dropped_param_seq_no_type_int' => 'Seq no',
    'object_rpc_answer_dropped_param_bytes_type_int' => 'Bytes',
    'object_future_salt' => 'Future salt',
    'object_future_salt_param_valid_since_type_int' => 'Valid since',
    'object_future_salt_param_valid_until_type_int' => 'Valid until',
    'object_future_salt_param_salt_type_long' => 'Salt',
    'object_future_salts' => 'Future salts',
    'object_future_salts_param_req_msg_id_type_long' => 'Req msg ID',
    'object_future_salts_param_now_type_int' => 'Now',
    'object_future_salts_param_salts_type_vector' => 'Salts',
    'object_pong' => 'Pong',
    'object_pong_param_msg_id_type_long' => 'Msg ID',
    'object_pong_param_ping_id_type_long' => 'Ping ID',
    'object_destroy_session_ok' => 'Destroy session ok',
    'object_destroy_session_ok_param_session_id_type_long' => 'Session ID',
    'object_destroy_session_none' => 'Destroy session none',
    'object_destroy_session_none_param_session_id_type_long' => 'Session ID',
    'object_new_session_created' => 'New session created',
    'object_new_session_created_param_first_msg_id_type_long' => 'First msg ID',
    'object_new_session_created_param_unique_id_type_long' => 'Unique ID',
    'object_new_session_created_param_server_salt_type_long' => 'Server salt',
    'object_msg_container' => 'Msg container',
    'object_msg_container_param_messages_type_vector' => 'Messages',
    'object_MTmessage' => 'MTProto message',
    'object_MTmessage_param_msg_id_type_long' => 'Message ID',
    'object_MTmessage_param_seqno_type_int' => 'Seqno',
    'object_MTmessage_param_bytes_type_int' => 'Message body',
    'object_MTmessage_param_body_type_Object' => 'Message body',
    'object_msg_copy' => 'Msg copy',
    'object_msg_copy_param_orig_message_type_MTMessage' => 'Orig message',
    'object_gzip_packed' => 'Gzip packed',
    'object_gzip_packed_param_packed_data_type_bytes' => 'Packed data',
    'object_msgs_ack' => 'Msgs ack',
    'object_msgs_ack_param_msg_ids_type_Vector t' => 'Msg IDs',
    'object_bad_msg_notification' => 'Bad msg notification',
    'object_bad_msg_notification_param_bad_msg_id_type_long' => 'Bad msg ID',
    'object_bad_msg_notification_param_bad_msg_seqno_type_int' => 'Bad msg seqno',
    'object_bad_msg_notification_param_error_code_type_int' => 'Error code',
    'object_bad_server_salt' => 'Bad server salt',
    'object_bad_server_salt_param_bad_msg_id_type_long' => 'Bad msg ID',
    'object_bad_server_salt_param_bad_msg_seqno_type_int' => 'Bad msg seqno',
    'object_bad_server_salt_param_error_code_type_int' => 'Error code',
    'object_bad_server_salt_param_new_server_salt_type_long' => 'New server salt',
    'object_msg_resend_req' => 'Msg resend req',
    'object_msg_resend_req_param_msg_ids_type_Vector t' => 'Msg IDs',
    'object_msgs_state_req' => 'Msgs state req',
    'object_msgs_state_req_param_msg_ids_type_Vector t' => 'Msg IDs',
    'object_msgs_state_info' => 'Msgs state info',
    'object_msgs_state_info_param_req_msg_id_type_long' => 'Req msg ID',
    'object_msgs_state_info_param_info_type_bytes' => 'Info',
    'object_msgs_all_info' => 'Msgs all info',
    'object_msgs_all_info_param_msg_ids_type_Vector t' => 'Msg IDs',
    'object_msgs_all_info_param_info_type_bytes' => 'Info',
    'object_msg_detailed_info' => 'Msg detailed info',
    'object_msg_detailed_info_param_msg_id_type_long' => 'Msg ID',
    'object_msg_detailed_info_param_answer_msg_id_type_long' => 'Answer msg ID',
    'object_msg_detailed_info_param_bytes_type_int' => 'Bytes',
    'object_msg_detailed_info_param_status_type_int' => 'Status',
    'object_msg_new_detailed_info' => 'Msg new detailed info',
    'object_msg_new_detailed_info_param_answer_msg_id_type_long' => 'Answer msg ID',
    'object_msg_new_detailed_info_param_bytes_type_int' => 'Bytes',
    'object_msg_new_detailed_info_param_status_type_int' => 'Status',
    'object_bind_auth_key_inner' => 'Bind auth key inner',
    'object_bind_auth_key_inner_param_nonce_type_long' => 'Nonce',
    'object_bind_auth_key_inner_param_temp_auth_key_id_type_long' => 'Temp auth key ID',
    'object_bind_auth_key_inner_param_perm_auth_key_id_type_long' => 'Perm auth key ID',
    'object_bind_auth_key_inner_param_temp_session_id_type_long' => 'Temp session ID',
    'object_bind_auth_key_inner_param_expires_at_type_int' => 'Expires at',
    'object_boolFalse' => 'Constructor may be interpreted as a **boolean**`false` value.',
    'object_boolTrue' => 'The constructor can be interpreted as a **boolean**`true` value.',
    'object_true' => 'See [predefined identifiers](https://core.telegram.org/mtproto/TL-formal#predefined-identifiers).',
    'object_error' => 'Error.',
    'object_error_param_code_type_int' => 'Error code',
    'object_error_param_text_type_string' => 'Message',
    'object_null' => 'Corresponds to an arbitrary empty object.',
    'object_inputPeerEmpty' => 'An empty constructor, no user or chat is defined.',
    'object_inputPeerSelf' => 'Defines the current user.',
    'object_inputPeerChat' => 'Defines a chat for further interaction.',
    'object_inputPeerChat_param_chat_id_type_int' => 'Chat idientifier',
    'object_inputPeerUser' => 'Defines a user for further interaction.',
    'object_inputPeerUser_param_user_id_type_int' => 'User identifier',
    'object_inputPeerUser_param_access_hash_type_long' => '**access\\_hash** value from the [user](../constructors/user.md) constructor',
    'object_inputPeerChannel' => 'Defines a channel for further interaction.',
    'object_inputPeerChannel_param_channel_id_type_int' => 'Channel identifier',
    'object_inputPeerChannel_param_access_hash_type_long' => '**access\\_hash** value from the [channel](../constructors/channel.md) constructor',
    'object_inputUserEmpty' => 'Empty constructor, does not define a user.',
    'object_inputUserSelf' => 'Defines the current user.',
    'object_inputUser' => 'Defines a user for further interaction.',
    'object_inputUser_param_user_id_type_int' => 'User identifier',
    'object_inputUser_param_access_hash_type_long' => '**access\\_hash** value from the [user](../constructors/user.md) constructor',
    'object_inputPhoneContact' => 'Phone contact. The `client_id` is just an arbitrary contact ID: it should be set, for example, to an incremental number when using [contacts.importContacts](../methods/contacts.importContacts.md), in order to retry importing only the contacts that weren\'t imported successfully.',
    'object_inputPhoneContact_param_client_id_type_long' => 'User identifier on the client',
    'object_inputPhoneContact_param_phone_type_string' => 'Phone number',
    'object_inputPhoneContact_param_first_name_type_string' => 'Contact\'s first name',
    'object_inputPhoneContact_param_last_name_type_string' => 'Contact\'s last name',
    'object_inputFile' => 'Defines a file saved in parts using the method [upload.saveFilePart](../methods/upload.saveFilePart.md).',
    'object_inputFile_param_id_type_long' => 'Random file identifier created by the client',
    'object_inputFile_param_parts_type_int' => 'Number of parts saved',
    'object_inputFile_param_name_type_string' => 'Full name of the file',
    'object_inputFile_param_md5_checksum_type_string' => 'In case the file\'s [md5-hash](https://en.wikipedia.org/wiki/MD5#MD5_hashes) was passed, contents of the file will be checked prior to use',
    'object_inputFileBig' => 'Assigns a big file (over 10Mb in size), saved in part using the method [upload.saveBigFilePart](../methods/upload.saveBigFilePart.md).',
    'object_inputFileBig_param_id_type_long' => 'Random file id, created by the client',
    'object_inputFileBig_param_parts_type_int' => 'Number of parts saved',
    'object_inputFileBig_param_name_type_string' => 'Full file name',
    'object_inputMediaEmpty' => 'Empty media content of a message.',
    'object_inputMediaUploadedPhoto' => 'Photo',
    'object_inputMediaUploadedPhoto_param_file_type_InputFile' => 'The [uploaded file](https://core.telegram.org/api/files)',
    'object_inputMediaUploadedPhoto_param_stickers_type_Vector t' => 'Stickers',
    'object_inputMediaUploadedPhoto_param_ttl_seconds_type_int' => 'Time to live in seconds of self-destructing photo',
    'object_inputMediaPhoto' => 'Forwarded photo',
    'object_inputMediaPhoto_param_id_type_InputPhoto' => 'Photo to be forwarded',
    'object_inputMediaPhoto_param_ttl_seconds_type_int' => 'Time to live in seconds of self-destructing photo',
    'object_inputMediaGeoPoint' => 'Map.',
    'object_inputMediaGeoPoint_param_geo_point_type_InputGeoPoint' => 'GeoPoint',
    'object_inputMediaContact' => 'Phonebook contact',
    'object_inputMediaContact_param_phone_number_type_string' => 'Phone number',
    'object_inputMediaContact_param_first_name_type_string' => 'Contact\'s first name',
    'object_inputMediaContact_param_last_name_type_string' => 'Contact\'s last name',
    'object_inputMediaUploadedDocument' => 'New document',
    'object_inputMediaUploadedDocument_param_nosound_video_type_true' => 'Whether the specified document is a video file with no audio tracks (a GIF animation (even as MPEG4), for example)',
    'object_inputMediaUploadedDocument_param_file_type_InputFile' => 'The [uploaded file](https://core.telegram.org/api/files)',
    'object_inputMediaUploadedDocument_param_thumb_type_InputFile' => 'Thumbnail of the document, uploaded as for the file',
    'object_inputMediaUploadedDocument_param_mime_type_type_string' => 'MIME type of document',
    'object_inputMediaUploadedDocument_param_attributes_type_Vector t' => 'Attributes',
    'object_inputMediaUploadedDocument_param_stickers_type_Vector t' => 'Stickers',
    'object_inputMediaUploadedDocument_param_ttl_seconds_type_int' => 'Time to live in seconds of self-destructing document',
    'object_inputMediaDocument' => 'Forwarded document',
    'object_inputMediaDocument_param_id_type_InputDocument' => 'The document to be forwarded.',
    'object_inputMediaDocument_param_ttl_seconds_type_int' => 'Time to live of self-destructing document',
    'object_inputMediaVenue' => 'Can be used to send a venue geolocation.',
    'object_inputMediaVenue_param_geo_point_type_InputGeoPoint' => 'Geolocation',
    'object_inputMediaVenue_param_title_type_string' => 'Venue name',
    'object_inputMediaVenue_param_address_type_string' => 'Physical address of the venue',
    'object_inputMediaVenue_param_provider_type_string' => 'Venue provider: currently only "foursquare" needs to be supported',
    'object_inputMediaVenue_param_venue_id_type_string' => 'Venue ID in the provider\'s database',
    'object_inputMediaVenue_param_venue_type_type_string' => 'Venue type in the provider\'s database',
    'object_inputMediaGifExternal' => 'New GIF animation that will be uploaded by the server using the specified URL',
    'object_inputMediaGifExternal_param_url_type_string' => 'URL',
    'object_inputMediaGifExternal_param_q_type_string' => 'Query',
    'object_inputMediaPhotoExternal' => 'New photo that will be uploaded by the server using the specified URL',
    'object_inputMediaPhotoExternal_param_url_type_string' => 'URL of the photo',
    'object_inputMediaPhotoExternal_param_ttl_seconds_type_int' => 'Self-destruct time to live of photo',
    'object_inputMediaDocumentExternal' => 'Document that will be downloaded by the telegram servers',
    'object_inputMediaDocumentExternal_param_url_type_string' => 'URL of the document',
    'object_inputMediaDocumentExternal_param_ttl_seconds_type_int' => 'Self-destruct time to live of document',
    'object_inputMediaGame' => 'A game',
    'object_inputMediaGame_param_id_type_InputGame' => 'The game to forward',
    'object_inputMediaInvoice' => 'Generated invoice of a [bot payment](https://core.telegram.org/bots/payments)',
    'object_inputMediaInvoice_param_title_type_string' => 'Product name, 1-32 characters',
    'object_inputMediaInvoice_param_description_type_string' => 'Product description, 1-255 characters',
    'object_inputMediaInvoice_param_photo_type_InputWebDocument' => 'URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service. People like it better when they see what they are paying for.',
    'object_inputMediaInvoice_param_invoice_type_Invoice' => 'The actual invoice',
    'object_inputMediaInvoice_param_payload_type_bytes' => 'Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes.',
    'object_inputMediaInvoice_param_provider_type_string' => 'Payments provider token, obtained via [Botfather](https://t.me/botfather)',
    'object_inputMediaInvoice_param_provider_data_type_DataJSON' => 'JSON-encoded data about the invoice, which will be shared with the payment provider. A detailed description of required fields should be provided by the payment provider.',
    'object_inputMediaInvoice_param_start_param_type_string' => 'Start parameter',
    'object_inputMediaGeoLive' => 'Live geographical location',
    'object_inputMediaGeoLive_param_geo_point_type_InputGeoPoint' => 'Current geolocation',
    'object_inputMediaGeoLive_param_period_type_int' => 'Validity period of the current location',
    'object_inputChatPhotoEmpty' => 'Empty constructor, remove group photo.',
    'object_inputChatUploadedPhoto' => 'New photo to be set as group profile photo.',
    'object_inputChatUploadedPhoto_param_file_type_InputFile' => 'File saved in parts using the method [upload.saveFilePart](../methods/upload.saveFilePart.md)',
    'object_inputChatPhoto' => 'Existing photo to be set as a chat profile photo.',
    'object_inputChatPhoto_param_id_type_InputPhoto' => 'Existing photo',
    'object_inputGeoPointEmpty' => 'Empty GeoPoint constructor.',
    'object_inputGeoPoint' => 'Defines a GeoPoint by its coordinates.',
    'object_inputGeoPoint_param_lat_type_double' => 'Latitide',
    'object_inputGeoPoint_param_long_type_double' => 'Longtitude',
    'object_inputPhotoEmpty' => 'Empty constructor.',
    'object_inputPhoto' => 'Defines a photo for further interaction.',
    'object_inputPhoto_param_id_type_long' => 'Photo identifier',
    'object_inputPhoto_param_access_hash_type_long' => '**access\\_hash** value from the [photo](../constructors/photo.md) constructor',
    'object_inputFileLocation' => 'DEPRECATED location of a photo',
    'object_inputFileLocation_param_volume_id_type_long' => 'Server volume',
    'object_inputFileLocation_param_local_id_type_int' => 'File identifier',
    'object_inputFileLocation_param_secret_type_long' => 'Check sum to access the file',
    'object_inputEncryptedFileLocation' => 'Location of encrypted secret chat file.',
    'object_inputEncryptedFileLocation_param_id_type_long' => 'File ID, **id** parameter value from [encryptedFile](../constructors/encryptedFile.md)',
    'object_inputEncryptedFileLocation_param_access_hash_type_long' => 'Checksum, **access\\_hash** parameter value from [encryptedFile](../constructors/encryptedFile.md)',
    'object_inputDocumentFileLocation' => 'Document location (video, voice, audio, basically every type except photo)',
    'object_inputDocumentFileLocation_param_id_type_long' => 'Document ID',
    'object_inputDocumentFileLocation_param_access_hash_type_long' => '**access\\_hash** parameter from the [document](../constructors/document.md) constructor',
    'object_inputDocumentFileLocation_param_version_type_int' => 'Version',
    'object_inputAppEvent' => 'Event that occured in the application.',
    'object_inputAppEvent_param_time_type_double' => 'Client\'s exact timestamp for the event',
    'object_inputAppEvent_param_type_type_string' => 'Type of event',
    'object_inputAppEvent_param_peer_type_long' => 'Arbitrary numeric value for more convenient selection of certain event types, or events referring to a certain object',
    'object_inputAppEvent_param_data_type_string' => 'Data',
    'object_peerUser' => 'Chat partner',
    'object_peerUser_param_user_id_type_int' => 'User identifier',
    'object_peerChat' => 'Group.',
    'object_peerChat_param_chat_id_type_int' => 'Group identifier',
    'object_peerChannel' => 'Channel/supergroup',
    'object_peerChannel_param_channel_id_type_int' => 'Channel ID',
    'object_storage.fileUnknown' => 'Unknown type.',
    'object_storage.filePartial' => 'Part of a bigger file.',
    'object_storage.fileJpeg' => 'JPEG image. MIME type: `image/jpeg`.',
    'object_storage.fileGif' => 'GIF image. MIME type: `image/gif`.',
    'object_storage.filePng' => 'PNG image. MIME type: `image/png`.',
    'object_storage.filePdf' => 'PDF document image. MIME type: `application/pdf`.',
    'object_storage.fileMp3' => 'Mp3 audio. MIME type: `audio/mpeg`.',
    'object_storage.fileMov' => 'Quicktime video. MIME type: `video/quicktime`.',
    'object_storage.fileMp4' => 'MPEG-4 video. MIME type: `video/mp4`.',
    'object_storage.fileWebp' => 'WEBP image. MIME type: `image/webp`.',
    'object_fileLocationUnavailable' => 'File location unavailable',
    'object_fileLocationUnavailable_param_volume_id_type_long' => 'Volume ID',
    'object_fileLocationUnavailable_param_local_id_type_int' => 'Local ID',
    'object_fileLocationUnavailable_param_secret_type_long' => 'Secret',
    'object_fileLocation' => 'File location',
    'object_fileLocation_param_dc_id_type_int' => 'DC ID',
    'object_fileLocation_param_volume_id_type_long' => 'Volume ID',
    'object_fileLocation_param_local_id_type_int' => 'Local ID',
    'object_fileLocation_param_secret_type_long' => 'Secret',
    'object_userEmpty' => 'Empty constructor, non-existent user.',
    'object_userEmpty_param_id_type_int' => 'User identifier or `0`',
    'object_user' => 'Indicates info about a certain user',
    'object_user_param_self_type_true' => 'Whether this user indicates the currently logged in user',
    'object_user_param_contact_type_true' => 'Whether this user is a contact',
    'object_user_param_mutual_contact_type_true' => 'Whether this user is a mutual contact',
    'object_user_param_deleted_type_true' => 'Whether the account of this user was deleted',
    'object_user_param_bot_type_true' => 'Is this user a bot?',
    'object_user_param_bot_chat_history_type_true' => 'Can the bot see all messages in groups?',
    'object_user_param_bot_nochats_type_true' => 'Can the bot be added to groups?',
    'object_user_param_verified_type_true' => 'Whether this user is verified',
    'object_user_param_restricted_type_true' => 'Access to this user must be restricted for the reason specified in `restriction_reason`',
    'object_user_param_min_type_true' => 'See [min](https://core.telegram.org/api/min)',
    'object_user_param_bot_inline_geo_type_true' => 'Whether the bot can request our geolocation in inline mode',
    'object_user_param_id_type_int' => 'ID of the user',
    'object_user_param_access_hash_type_long' => 'Access hash of the user',
    'object_user_param_first_name_type_string' => 'First name',
    'object_user_param_last_name_type_string' => 'Last name',
    'object_user_param_username_type_string' => 'Username',
    'object_user_param_phone_type_string' => 'Phone number',
    'object_user_param_photo_type_UserProfilePhoto' => 'Profile picture of user',
    'object_user_param_status_type_UserStatus' => 'Online status of user',
    'object_user_param_bot_info_version_type_int' => 'Version of the [bot\\_info field in userFull](../constructors/userFull.md), incremented every time it changes',
    'object_user_param_restriction_reason_type_string' => 'Restriction reason',
    'object_user_param_bot_inline_placeholder_type_string' => 'Inline placeholder for this inline bot',
    'object_user_param_lang_code_type_string' => 'Language code of the user',
    'object_userProfilePhotoEmpty' => 'Profile photo has not been set, or was hidden.',
    'object_userProfilePhoto' => 'User profile photo.',
    'object_userProfilePhoto_param_photo_id_type_long' => 'Identifier of the respective photo<br>Parameter added in [Layer 2](https://core.telegram.org/api/layers#layer-2)',
    'object_userProfilePhoto_param_photo_small_type_FileLocation' => 'Location of the file, corresponding to the small profile photo thumbnail',
    'object_userProfilePhoto_param_photo_big_type_FileLocation' => 'Location of the file, corresponding to the big profile photo thumbnail',
    'object_chatEmpty' => 'Empty constructor, group doesn\'t exist',
    'object_chatEmpty_param_id_type_int' => 'Group identifier',
    'object_chat' => 'Info about a group',
    'object_chat_param_creator_type_true' => 'Whether the current user is the creator of the group',
    'object_chat_param_kicked_type_true' => 'Whether the current user was kicked from the group',
    'object_chat_param_left_type_true' => 'Whether the current user has left the group',
    'object_chat_param_admins_enabled_type_true' => 'Admins enabled?',
    'object_chat_param_admin_type_true' => 'Admin?',
    'object_chat_param_deactivated_type_true' => 'Whether the group was [migrated](https://core.telegram.org/api/channel)',
    'object_chat_param_id_type_int' => 'ID of the group',
    'object_chat_param_title_type_string' => 'Title',
    'object_chat_param_photo_type_ChatPhoto' => 'Chat photo',
    'object_chat_param_participants_count_type_int' => 'Participant count',
    'object_chat_param_date_type_int' => 'Date of creation of the group',
    'object_chat_param_version_type_int' => 'Used in basic groups to reorder updates and make sure that all of them were received.',
    'object_chat_param_migrated_to_type_InputChannel' => 'Means this chat was [upgraded](https://core.telegram.org/api/channel) to a supergroup',
    'object_chatForbidden' => 'A group to which the user has no access. E.g., because the user was kicked from the group.',
    'object_chatForbidden_param_id_type_int' => 'User identifier',
    'object_chatForbidden_param_title_type_string' => 'Group name',
    'object_channel' => 'Channel/supergroup info',
    'object_channel_param_creator_type_true' => 'Whether the current user is the creator of this channel',
    'object_channel_param_left_type_true' => 'Whether the current user has left this channel',
    'object_channel_param_editor_type_true' => 'Editor?',
    'object_channel_param_broadcast_type_true' => 'Is this a channel?',
    'object_channel_param_verified_type_true' => 'Is this channel verified by telegram?',
    'object_channel_param_megagroup_type_true' => 'Is this a supergroup?',
    'object_channel_param_restricted_type_true' => 'Whether viewing/writing in this channel for a reason (see `restriction_reason`',
    'object_channel_param_democracy_type_true' => 'Democracy?',
    'object_channel_param_signatures_type_true' => 'Whether signatures are enabled (channels)',
    'object_channel_param_min_type_true' => 'See [min](https://core.telegram.org/api/min)',
    'object_channel_param_id_type_int' => 'ID of the channel',
    'object_channel_param_access_hash_type_long' => 'Access hash',
    'object_channel_param_title_type_string' => 'Title',
    'object_channel_param_username_type_string' => 'Username',
    'object_channel_param_photo_type_ChatPhoto' => 'Profile photo',
    'object_channel_param_date_type_int' => 'Creation date',
    'object_channel_param_version_type_int' => 'Version of the channel (always `0`)',
    'object_channel_param_restriction_reason_type_string' => 'Restriction reason',
    'object_channel_param_admin_rights_type_ChannelAdminRights' => 'Admin rights',
    'object_channel_param_banned_rights_type_ChannelBannedRights' => 'Banned rights',
    'object_channel_param_participants_count_type_int' => 'Participant count',
    'object_channelForbidden' => 'Indicates a channel/supergroup we can\'t access because we were banned, or for some other reason.',
    'object_channelForbidden_param_broadcast_type_true' => 'Is this a channel',
    'object_channelForbidden_param_megagroup_type_true' => 'Is this a supergroup',
    'object_channelForbidden_param_id_type_int' => 'Channel ID',
    'object_channelForbidden_param_access_hash_type_long' => 'Access hash',
    'object_channelForbidden_param_title_type_string' => 'Title',
    'object_channelForbidden_param_until_date_type_int' => 'The ban is valid until the specified date',
    'object_chatFull' => 'Detailed chat info',
    'object_chatFull_param_id_type_int' => 'ID of the chat',
    'object_chatFull_param_participants_type_ChatParticipants' => 'Participant list',
    'object_chatFull_param_chat_photo_type_Photo' => 'Chat photo',
    'object_chatFull_param_notify_settings_type_PeerNotifySettings' => 'Notification settings',
    'object_chatFull_param_exported_invite_type_ExportedChatInvite' => 'Chat invite',
    'object_chatFull_param_bot_info_type_Vector t' => 'Bot info',
    'object_channelFull' => 'Full info about a [channel/supergroup](https://core.telegram.org/api/channel)',
    'object_channelFull_param_can_view_participants_type_true' => 'Can we vew the participant list?',
    'object_channelFull_param_can_set_username_type_true' => 'Can we set the channel\'s username?',
    'object_channelFull_param_can_set_stickers_type_true' => 'Can we [associate](../methods/channels.setStickers.md) a stickerpack to the supergroup?',
    'object_channelFull_param_hidden_prehistory_type_true' => 'Is the history before we joined hidden to us?',
    'object_channelFull_param_id_type_int' => 'ID of the channel',
    'object_channelFull_param_about_type_string' => 'Info about the channel',
    'object_channelFull_param_participants_count_type_int' => 'Number of participants of the channel',
    'object_channelFull_param_admins_count_type_int' => 'Number of channel admins',
    'object_channelFull_param_kicked_count_type_int' => 'Number of users [kicked](https://core.telegram.org/api/rights) from the channel',
    'object_channelFull_param_banned_count_type_int' => 'Number of users [banned](https://core.telegram.org/api/rights) from the channel',
    'object_channelFull_param_read_inbox_max_id_type_int' => 'Position up to which all incoming messages are read.',
    'object_channelFull_param_read_outbox_max_id_type_int' => 'Position up to which all outgoing messages are read.',
    'object_channelFull_param_unread_count_type_int' => 'Count of unread messages',
    'object_channelFull_param_chat_photo_type_Photo' => 'Channel picture',
    'object_channelFull_param_notify_settings_type_PeerNotifySettings' => 'Notification settings',
    'object_channelFull_param_exported_invite_type_ExportedChatInvite' => 'Invite link',
    'object_channelFull_param_bot_info_type_Vector t' => 'Bot info',
    'object_channelFull_param_migrated_from_chat_id_type_int' => 'The chat ID from which this group was [migrated](https://core.telegram.org/api/channel)',
    'object_channelFull_param_migrated_from_max_id_type_int' => 'The message ID in the original chat at which this group was [migrated](https://core.telegram.org/api/channel)',
    'object_channelFull_param_pinned_msg_id_type_int' => 'Message ID of the pinned message',
    'object_channelFull_param_stickerset_type_StickerSet' => 'Associated stickerset',
    'object_channelFull_param_available_min_id_type_int' => 'Identifier of a maximum unavailable message in a channel due to hidden history.',
    'object_chatParticipant' => 'Group member.',
    'object_chatParticipant_param_user_id_type_int' => 'Member user ID',
    'object_chatParticipant_param_inviter_id_type_int' => 'ID of the user that added the member to the group',
    'object_chatParticipant_param_date_type_int' => 'Date added to the group',
    'object_chatParticipantCreator' => 'Represents the creator of the group',
    'object_chatParticipantCreator_param_user_id_type_int' => 'ID of the user that created the group',
    'object_chatParticipantAdmin' => 'Chat admin',
    'object_chatParticipantAdmin_param_user_id_type_int' => 'ID of a group member that is admin',
    'object_chatParticipantAdmin_param_inviter_id_type_int' => 'ID of the user that added the member to the group',
    'object_chatParticipantAdmin_param_date_type_int' => 'Date when the user was added',
    'object_chatParticipantsForbidden' => 'Info on members is unavailable',
    'object_chatParticipantsForbidden_param_chat_id_type_int' => 'Group ID',
    'object_chatParticipantsForbidden_param_self_participant_type_ChatParticipant' => 'Info about the group membership of the current user',
    'object_chatParticipants' => 'Group members.',
    'object_chatParticipants_param_chat_id_type_int' => 'Group identifier',
    'object_chatParticipants_param_participants_type_Vector t' => 'Participants',
    'object_chatParticipants_param_version_type_int' => 'Group version number',
    'object_chatPhotoEmpty' => 'Group photo is not set.',
    'object_chatPhoto' => 'Group profile photo.',
    'object_chatPhoto_param_photo_small_type_FileLocation' => 'Location of the file corresponding to the small thumbnail for group profile photo',
    'object_chatPhoto_param_photo_big_type_FileLocation' => 'Location of the file corresponding to the small thumbnail for group profile photo',
    'object_messageEmpty' => 'Empty constructor, non-existent message.',
    'object_messageEmpty_param_id_type_int' => 'Message identifier',
    'object_message' => 'A message',
    'object_message_param_out_type_true' => 'Is this an outgoing message',
    'object_message_param_mentioned_type_true' => 'Whether we were mentioned in this message',
    'object_message_param_media_unread_type_true' => 'Whether there are unread media attachments in this message',
    'object_message_param_silent_type_true' => 'Whether this is a silent message (no notification triggered)',
    'object_message_param_post_type_true' => 'Whether this is a channel post',
    'object_message_param_id_type_int' => 'ID of the message',
    'object_message_param_from_id_type_int' => 'ID of the sender of the message',
    'object_message_param_to_id_type_Peer' => 'ID of the chat were the message was sent',
    'object_message_param_fwd_from_type_MessageFwdHeader' => 'Info about forwarded messages',
    'object_message_param_via_bot_id_type_int' => 'ID of the inline bot that generated the message',
    'object_message_param_reply_to_msg_id_type_int' => 'ID of the message this message replies to',
    'object_message_param_date_type_int' => 'Date of the message',
    'object_message_param_message_type_string' => 'The message',
    'object_message_param_media_type_MessageMedia' => 'Media attachment',
    'object_message_param_reply_markup_type_ReplyMarkup' => 'Reply markup (bot/inline keyboards)',
    'object_message_param_entities_type_Vector t' => 'Entities',
    'object_message_param_views_type_int' => 'View count for channel posts',
    'object_message_param_edit_date_type_int' => 'Last edit date of this message',
    'object_message_param_post_author_type_string' => 'Name of the author of this message for channel posts (with signatures enabled)',
    'object_message_param_grouped_id_type_long' => 'Multiple media messages sent using [messages.sendMultiMedia](../methods/messages.sendMultiMedia.md) with the same grouped ID indicate an album',
    'object_messageService' => 'Indicates a service message',
    'object_messageService_param_out_type_true' => 'Whether the message is outgoing',
    'object_messageService_param_mentioned_type_true' => 'Whether we were mentioned in the message',
    'object_messageService_param_media_unread_type_true' => 'Whether the message contains unread media',
    'object_messageService_param_silent_type_true' => 'Whether the message is silent',
    'object_messageService_param_post_type_true' => 'Whether it\'s a channel post',
    'object_messageService_param_id_type_int' => 'Message ID',
    'object_messageService_param_from_id_type_int' => 'Id of te sender of the message',
    'object_messageService_param_to_id_type_Peer' => 'ID of the destination of the message',
    'object_messageService_param_reply_to_msg_id_type_int' => 'ID of the message this message replies to',
    'object_messageService_param_date_type_int' => 'Message date',
    'object_messageService_param_action_type_MessageAction' => 'Event connected with the service message',
    'object_messageMediaEmpty' => 'Empty constructor.',
    'object_messageMediaPhoto' => 'Attached photo.',
    'object_messageMediaPhoto_param_photo_type_Photo' => 'Photo',
    'object_messageMediaPhoto_param_ttl_seconds_type_int' => 'Time to live in seconds of self-destructing photo',
    'object_messageMediaGeo' => 'Attached map.',
    'object_messageMediaGeo_param_geo_type_GeoPoint' => 'GeoPoint',
    'object_messageMediaContact' => 'Attached contact.',
    'object_messageMediaContact_param_phone_number_type_string' => 'Phone number',
    'object_messageMediaContact_param_first_name_type_string' => 'Contact\'s first name',
    'object_messageMediaContact_param_last_name_type_string' => 'Contact\'s last name',
    'object_messageMediaContact_param_user_id_type_int' => 'User identifier or `0`, if the user with the given phone number is not registered',
    'object_messageMediaUnsupported' => 'Current version of the client does not support this media type.',
    'object_messageMediaDocument' => 'Document (video, audio, voice, sticker, any media type except photo)',
    'object_messageMediaDocument_param_document_type_Document' => 'Attached document',
    'object_messageMediaDocument_param_ttl_seconds_type_int' => 'Time to live of self-destructing document',
    'object_messageMediaWebPage' => 'Preview of webpage',
    'object_messageMediaWebPage_param_webpage_type_WebPage' => 'Webpage preview',
    'object_messageMediaVenue' => 'Venue',
    'object_messageMediaVenue_param_geo_type_GeoPoint' => 'Geolocation of venue',
    'object_messageMediaVenue_param_title_type_string' => 'Venue name',
    'object_messageMediaVenue_param_address_type_string' => 'Address',
    'object_messageMediaVenue_param_provider_type_string' => 'Venue provider: currently only "foursquare" needs to be supported',
    'object_messageMediaVenue_param_venue_id_type_string' => 'Venue ID in the provider\'s database',
    'object_messageMediaVenue_param_venue_type_type_string' => 'Venue type in the provider\'s database',
    'object_messageMediaGame' => 'Telegram game',
    'object_messageMediaGame_param_game_type_Game' => 'Game',
    'object_messageMediaInvoice' => 'Invoice',
    'object_messageMediaInvoice_param_shipping_address_requested_type_true' => 'Whether the shipping address was requested',
    'object_messageMediaInvoice_param_test_type_true' => 'Whether this is an example invoice',
    'object_messageMediaInvoice_param_title_type_string' => 'Product name, 1-32 characters',
    'object_messageMediaInvoice_param_description_type_string' => 'Product description, 1-255 characters',
    'object_messageMediaInvoice_param_photo_type_WebDocument' => 'URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service. People like it better when they see what they are paying for.',
    'object_messageMediaInvoice_param_receipt_msg_id_type_int' => 'Message ID of receipt: if set, clients should change the text of the first [keyboardButtonBuy](../constructors/keyboardButtonBuy.md) button always attached to the [message](../constructors/message.md) to a localized version of the word `Receipt`',
    'object_messageMediaInvoice_param_currency_type_string' => 'Three-letter ISO 4217 [currency](https://core.telegram.org/bots/payments#supported-currencies) code',
    'object_messageMediaInvoice_param_total_amount_type_long' => 'Total price in the smallest units of the currency (integer, not float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).',
    'object_messageMediaInvoice_param_start_param_type_string' => 'Unique bot deep-linking parameter that can be used to generate this invoice',
    'object_messageMediaGeoLive' => 'Indicates a live geolocation',
    'object_messageMediaGeoLive_param_geo_type_GeoPoint' => 'Geolocation',
    'object_messageMediaGeoLive_param_period_type_int' => 'Validity period of provided geolocation',
    'object_messageActionEmpty' => 'Empty constructor.',
    'object_messageActionChatCreate' => 'Group created',
    'object_messageActionChatCreate_param_title_type_string' => 'Group name',
    'object_messageActionChatCreate_param_users_type_Vector t' => 'Users',
    'object_messageActionChatEditTitle' => 'Group name changed.',
    'object_messageActionChatEditTitle_param_title_type_string' => 'New group name',
    'object_messageActionChatEditPhoto' => 'Group profile changed',
    'object_messageActionChatEditPhoto_param_photo_type_Photo' => 'New group pofile photo',
    'object_messageActionChatDeletePhoto' => 'Group profile photo removed.',
    'object_messageActionChatAddUser' => 'New member in the group',
    'object_messageActionChatAddUser_param_users_type_Vector t' => 'Users',
    'object_messageActionChatDeleteUser' => 'User left the group.',
    'object_messageActionChatDeleteUser_param_user_id_type_int' => 'Leaving user ID',
    'object_messageActionChatJoinedByLink' => 'A user joined the chat via an invite link',
    'object_messageActionChatJoinedByLink_param_inviter_id_type_int' => 'ID of the user that created the invite link',
    'object_messageActionChannelCreate' => 'The channel was created',
    'object_messageActionChannelCreate_param_title_type_string' => 'Original channel/supergroup title',
    'object_messageActionChatMigrateTo' => 'Indicates the chat was [migrated](https://core.telegram.org/api/channel) to the specified supergroup',
    'object_messageActionChatMigrateTo_param_channel_id_type_int' => 'The supergroup it was migrated to',
    'object_messageActionChannelMigrateFrom' => 'Indicates the channel was [migrated](https://core.telegram.org/api/channel) from the specified chat',
    'object_messageActionChannelMigrateFrom_param_title_type_string' => 'The old chat tite',
    'object_messageActionChannelMigrateFrom_param_chat_id_type_int' => 'The old chat ID',
    'object_messageActionPinMessage' => 'A message was pinned',
    'object_messageActionHistoryClear' => 'Chat history was cleared',
    'object_messageActionGameScore' => 'Someone scored in a game',
    'object_messageActionGameScore_param_game_id_type_long' => 'Game ID',
    'object_messageActionGameScore_param_score_type_int' => 'Score',
    'object_messageActionPaymentSentMe' => 'A user just sent a payment to me (a bot)',
    'object_messageActionPaymentSentMe_param_currency_type_string' => 'Three-letter ISO 4217 [currency](https://core.telegram.org/bots/payments#supported-currencies) code',
    'object_messageActionPaymentSentMe_param_total_amount_type_long' => 'Price of the product in the smallest units of the currency (integer, not float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).',
    'object_messageActionPaymentSentMe_param_payload_type_bytes' => 'Bot specified invoice payload',
    'object_messageActionPaymentSentMe_param_info_type_PaymentRequestedInfo' => 'Order info provided by the user',
    'object_messageActionPaymentSentMe_param_shipping_option_id_type_string' => 'Identifier of the shipping option chosen by the user',
    'object_messageActionPaymentSentMe_param_charge_type_PaymentCharge' => 'Provider payment identifier',
    'object_messageActionPaymentSent' => 'A payment was sent',
    'object_messageActionPaymentSent_param_currency_type_string' => 'Three-letter ISO 4217 [currency](https://core.telegram.org/bots/payments#supported-currencies) code',
    'object_messageActionPaymentSent_param_total_amount_type_long' => 'Price of the product in the smallest units of the currency (integer, not float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).',
    'object_messageActionPhoneCall' => 'A phone call',
    'object_messageActionPhoneCall_param_call_id_type_long' => 'Call ID',
    'object_messageActionPhoneCall_param_reason_type_PhoneCallDiscardReason' => 'If the call has ended, the reason why it ended',
    'object_messageActionPhoneCall_param_duration_type_int' => 'Duration of the call in seconds',
    'object_messageActionScreenshotTaken' => 'A screenshot of the chat was taken',
    'object_messageActionCustomAction' => 'Custom action (most likely not supported by the current layer, an upgrade might be needed)',
    'object_messageActionCustomAction_param_message_type_string' => 'Action message',
    'object_dialog' => 'Chat',
    'object_dialog_param_pinned_type_true' => 'Is the dialog pinned',
    'object_dialog_param_peer_type_Peer' => 'The chat',
    'object_dialog_param_top_message_type_int' => 'The latest message ID',
    'object_dialog_param_read_inbox_max_id_type_int' => 'Position up to which all incoming messages are read.',
    'object_dialog_param_read_outbox_max_id_type_int' => 'Position up to which all outgoing messages are read.',
    'object_dialog_param_unread_count_type_int' => 'Number of unread messages',
    'object_dialog_param_unread_mentions_count_type_int' => 'Number of unread mentions',
    'object_dialog_param_notify_settings_type_PeerNotifySettings' => 'Notification settings',
    'object_dialog_param_pts_type_int' => '[PTS](https://core.telegram.org/api/updates)',
    'object_dialog_param_draft_type_DraftMessage' => 'Message draft',
    'object_photoEmpty' => 'Empty constructor, non-existent photo',
    'object_photoEmpty_param_id_type_long' => 'Photo identifier',
    'object_photo' => 'Photo',
    'object_photo_param_has_stickers_type_true' => 'Whether the photo has mask stickers attached to it',
    'object_photo_param_id_type_long' => 'ID',
    'object_photo_param_access_hash_type_long' => 'Access hash',
    'object_photo_param_date_type_int' => 'Date of upload',
    'object_photo_param_sizes_type_Vector t' => 'Sizes',
    'object_photoSizeEmpty' => 'Empty constructor. Image with this thumbnail is unavailable.',
    'object_photoSizeEmpty_param_type_type_string' => 'Thumbnail type (see. [photoSize](../constructors/photoSize.md))',
    'object_photoSize' => 'Image description.',
    'object_photoSize_param_type_type_string' => 'Thumbnail type',
    'object_photoSize_param_location_type_FileLocation' => 'File location',
    'object_photoSize_param_w_type_int' => 'Image width',
    'object_photoSize_param_h_type_int' => 'Image height',
    'object_photoSize_param_size_type_int' => 'File size',
    'object_photoCachedSize' => 'Description of an image and its content.',
    'object_photoCachedSize_param_type_type_string' => 'Thumbnail type',
    'object_photoCachedSize_param_location_type_FileLocation' => 'File location',
    'object_photoCachedSize_param_w_type_int' => 'Image width',
    'object_photoCachedSize_param_h_type_int' => 'Image height',
    'object_photoCachedSize_param_bytes_type_bytes' => 'Binary data, file content',
    'object_geoPointEmpty' => 'Empty constructor.',
    'object_geoPoint' => 'GeoPoint.',
    'object_geoPoint_param_long_type_double' => 'Longtitude',
    'object_geoPoint_param_lat_type_double' => 'Latitude',
    'object_auth.checkedPhone' => 'Checked phone',
    'object_auth.checkedPhone_param_phone_registered_type_Bool' => 'Phone registered?',
    'object_auth.sentCode' => 'Contains info about a sent verification code.',
    'object_auth.sentCode_param_phone_registered_type_true' => 'Phone registered?',
    'object_auth.sentCode_param_type_type_auth.SentCodeType' => 'Phone code type',
    'object_auth.sentCode_param_phone_code_hash_type_string' => 'Phone code hash, to be stored and later re-used with [auth.signIn](../methods/auth.signIn.md)',
    'object_auth.sentCode_param_next_type_type_auth.CodeType' => 'Phone code type that will be sent next, if the phone code is not received within `timeout` seconds: to send it use [auth.resendCode](../methods/auth.resendCode.md)',
    'object_auth.sentCode_param_timeout_type_int' => 'Timeout for reception of the phone code',
    'object_auth.authorization' => 'Contains user authorization info.',
    'object_auth.authorization_param_tmp_sessions_type_int' => 'Temporary [passport](https://core.telegram.org/passport) sessions',
    'object_auth.authorization_param_user_type_User' => 'Info on authorized user',
    'object_auth.exportedAuthorization' => 'Data for copying of authorization between data centres.',
    'object_auth.exportedAuthorization_param_id_type_int' => 'Current user identifier',
    'object_auth.exportedAuthorization_param_bytes_type_bytes' => 'Authorizes key',
    'object_inputNotifyPeer' => 'Notifications generated by a certain user or group.',
    'object_inputNotifyPeer_param_peer_type_InputPeer' => 'User or group',
    'object_inputNotifyUsers' => 'Notifications generated by all users.',
    'object_inputNotifyChats' => 'Notifications generated by all groups.',
    'object_inputNotifyAll' => 'Notify all',
    'object_inputPeerNotifyEventsEmpty' => 'Empty input peer notify events',
    'object_inputPeerNotifyEventsAll' => 'Peer notify events all',
    'object_inputPeerNotifySettings' => 'Notification settings.',
    'object_inputPeerNotifySettings_param_show_previews_type_true' => 'Show previews?',
    'object_inputPeerNotifySettings_param_silent_type_true' => 'Silent?',
    'object_inputPeerNotifySettings_param_mute_until_type_int' => 'Date until which all notifications shall be switched off',
    'object_inputPeerNotifySettings_param_sound_type_string' => 'Name of an audio file for notification',
    'object_peerNotifyEventsEmpty' => 'Empty peer notify events',
    'object_peerNotifyEventsAll' => 'Peer notify events all',
    'object_peerNotifySettingsEmpty' => 'Empty peer notify settings',
    'object_peerNotifySettings' => 'Notification settings.',
    'object_peerNotifySettings_param_show_previews_type_true' => 'Show previews?',
    'object_peerNotifySettings_param_silent_type_true' => 'Silent?',
    'object_peerNotifySettings_param_mute_until_type_int' => 'Mute all notifications until this date',
    'object_peerNotifySettings_param_sound_type_string' => 'Audio file name for notifications',
    'object_peerSettings' => 'Peer settings',
    'object_peerSettings_param_report_spam_type_true' => 'Whether we can still report the user for spam',
    'object_wallPaper' => 'Wallpaper settings.',
    'object_wallPaper_param_id_type_int' => 'ID',
    'object_wallPaper_param_title_type_string' => 'Title',
    'object_wallPaper_param_sizes_type_Vector t' => 'Sizes',
    'object_wallPaper_param_color_type_int' => 'Color',
    'object_wallPaperSolid' => 'Wall paper solid',
    'object_wallPaperSolid_param_id_type_int' => 'ID',
    'object_wallPaperSolid_param_title_type_string' => 'Title',
    'object_wallPaperSolid_param_bg_color_type_int' => 'Bg color',
    'object_wallPaperSolid_param_color_type_int' => 'Color',
    'object_inputReportReasonSpam' => 'Report for spam',
    'object_inputReportReasonViolence' => 'Report for violence',
    'object_inputReportReasonPornography' => 'Report for pornography',
    'object_inputReportReasonOther' => 'Other',
    'object_inputReportReasonOther_param_text_type_string' => 'Other report reason',
    'object_userFull' => 'Extended user info',
    'object_userFull_param_blocked_type_true' => 'Whether you have blocked this user',
    'object_userFull_param_phone_calls_available_type_true' => 'Whether this user can make VoIP calls',
    'object_userFull_param_phone_calls_private_type_true' => 'Whether this user\'s privacy settings allow you to call him',
    'object_userFull_param_user_type_User' => 'Remaining user info',
    'object_userFull_param_about_type_string' => 'Bio of the user',
    'object_userFull_param_link_type_contacts.Link' => 'Link',
    'object_userFull_param_profile_photo_type_Photo' => 'Profile photo',
    'object_userFull_param_notify_settings_type_PeerNotifySettings' => 'Notification settings',
    'object_userFull_param_bot_info_type_BotInfo' => 'For bots, info about the bot (bot commands, etc)',
    'object_userFull_param_common_chats_count_type_int' => 'Chats in common with this user',
    'object_contact' => 'A contact of the current user that is registered in the system.',
    'object_contact_param_user_id_type_int' => 'User identifier',
    'object_contact_param_mutual_type_Bool' => 'Current user is in the user\'s contact list',
    'object_importedContact' => 'Successfully imported contact.',
    'object_importedContact_param_user_id_type_int' => 'User identifier',
    'object_importedContact_param_client_id_type_long' => 'The contact\'s client identifier (passed to one of the [InputContact](../types/InputContact.md) constructors)',
    'object_contactBlocked' => 'A blocked user.',
    'object_contactBlocked_param_user_id_type_int' => 'User identifier',
    'object_contactBlocked_param_date_type_int' => 'Date blacklisted',
    'object_contactStatus' => 'Contact status: online / offline.',
    'object_contactStatus_param_user_id_type_int' => 'User identifier',
    'object_contactStatus_param_status_type_UserStatus' => 'Online status',
    'object_contacts.link' => 'Link',
    'object_contacts.link_param_my_link_type_ContactLink' => 'My link',
    'object_contacts.link_param_foreign_link_type_ContactLink' => 'Foreign link',
    'object_contacts.link_param_user_type_User' => 'User',
    'object_contacts.contactsNotModified' => 'Contact list on the server is the same as the list on the client.',
    'object_contacts.contacts' => 'The current user\'s contact list and info on users.',
    'object_contacts.contacts_param_contacts_type_Vector t' => 'Contacts',
    'object_contacts.contacts_param_saved_count_type_int' => 'Number of contacts that were saved successfully',
    'object_contacts.contacts_param_users_type_Vector t' => 'Users',
    'object_contacts.importedContacts' => 'Info on succesfully imported contacts.',
    'object_contacts.importedContacts_param_imported_type_Vector t' => 'Imported',
    'object_contacts.importedContacts_param_popular_invites_type_Vector t' => 'Popular invites',
    'object_contacts.importedContacts_param_retry_contacts_type_Vector t' => 'Retry importing contacts whose client IDs appear here',
    'object_contacts.importedContacts_param_users_type_Vector t' => 'Users',
    'object_contacts.blocked' => 'Full list of blocked users.',
    'object_contacts.blocked_param_blocked_type_Vector t' => 'Blocked',
    'object_contacts.blocked_param_users_type_Vector t' => 'Users',
    'object_contacts.blockedSlice' => 'Incomplete list of blocked users.',
    'object_contacts.blockedSlice_param_count_type_int' => 'Total number of elements in the list',
    'object_contacts.blockedSlice_param_blocked_type_Vector t' => 'Blocked',
    'object_contacts.blockedSlice_param_users_type_Vector t' => 'Users',
    'object_messages.dialogs' => 'Full list of chats with messages and auxiliary data.',
    'object_messages.dialogs_param_dialogs_type_Vector t' => 'Dialogs',
    'object_messages.dialogs_param_messages_type_Vector t' => 'Messages',
    'object_messages.dialogs_param_chats_type_Vector t' => 'Chats',
    'object_messages.dialogs_param_users_type_Vector t' => 'Users',
    'object_messages.dialogsSlice' => 'Incomplete list of dialogs with messages and auxiliary data.',
    'object_messages.dialogsSlice_param_count_type_int' => 'Total number of dialogs',
    'object_messages.dialogsSlice_param_dialogs_type_Vector t' => 'Dialogs',
    'object_messages.dialogsSlice_param_messages_type_Vector t' => 'Messages',
    'object_messages.dialogsSlice_param_chats_type_Vector t' => 'Chats',
    'object_messages.dialogsSlice_param_users_type_Vector t' => 'Users',
    'object_messages.messages' => 'Full list of messages with auxilary data.',
    'object_messages.messages_param_messages_type_Vector t' => 'Messages',
    'object_messages.messages_param_chats_type_Vector t' => 'Chats',
    'object_messages.messages_param_users_type_Vector t' => 'Users',
    'object_messages.messagesSlice' => 'Incomplete list of messages and auxiliary data.',
    'object_messages.messagesSlice_param_count_type_int' => 'Total number of messages in the list',
    'object_messages.messagesSlice_param_messages_type_Vector t' => 'Messages',
    'object_messages.messagesSlice_param_chats_type_Vector t' => 'Chats',
    'object_messages.messagesSlice_param_users_type_Vector t' => 'Users',
    'object_messages.channelMessages' => 'Channel messages',
    'object_messages.channelMessages_param_pts_type_int' => '[Event count after generation](https://core.telegram.org/api/updates)',
    'object_messages.channelMessages_param_count_type_int' => 'Total number of results were found server-side (may not be all included here)',
    'object_messages.channelMessages_param_messages_type_Vector t' => 'Messages',
    'object_messages.channelMessages_param_chats_type_Vector t' => 'Chats',
    'object_messages.channelMessages_param_users_type_Vector t' => 'Users',
    'object_messages.messagesNotModified' => 'No new messages matching the query were found',
    'object_messages.messagesNotModified_param_count_type_int' => 'Number of results found server-side by the given query',
    'object_messages.chats' => 'List of chats with auxiliary data.',
    'object_messages.chats_param_chats_type_Vector t' => 'Chats',
    'object_messages.chatsSlice' => 'Partial list of chats, more would have to be fetched with [pagination](https://core.telegram.org/api/offsets)',
    'object_messages.chatsSlice_param_count_type_int' => 'Total number of results that were found server-side (not all are included in `chats`)',
    'object_messages.chatsSlice_param_chats_type_Vector t' => 'Chats',
    'object_messages.chatFull' => 'Extended info on chat and auxiliary data.',
    'object_messages.chatFull_param_full_chat_type_ChatFull' => 'Extended info on a chat',
    'object_messages.chatFull_param_chats_type_Vector t' => 'Chats',
    'object_messages.chatFull_param_users_type_Vector t' => 'Users',
    'object_messages.affectedHistory' => 'Affected part of communication history with the user or in a chat.',
    'object_messages.affectedHistory_param_pts_type_int' => 'Number of events occured in a text box',
    'object_messages.affectedHistory_param_pts_count_type_int' => 'Number of affected events',
    'object_messages.affectedHistory_param_offset_type_int' => 'If a parameter contains positive value, it is necessary to repeat the method call using the given value; during the proceeding of all the history the value itself shall gradually decrease',
    'object_inputMessagesFilterEmpty' => 'Filter is absent.',
    'object_inputMessagesFilterPhotos' => 'Filter for messages containing photos.',
    'object_inputMessagesFilterVideo' => 'Filter for messages containing videos.',
    'object_inputMessagesFilterPhotoVideo' => 'Filter for messages containing photos or videos.',
    'object_inputMessagesFilterDocument' => 'Filter for messages containing documents.',
    'object_inputMessagesFilterUrl' => 'Return only messages containing URLs',
    'object_inputMessagesFilterGif' => 'Return only messages containing gifs',
    'object_inputMessagesFilterVoice' => 'Return only messages containing voice notes',
    'object_inputMessagesFilterMusic' => 'Return only messages containing audio files',
    'object_inputMessagesFilterChatPhotos' => 'Return only chat photo changes',
    'object_inputMessagesFilterPhoneCalls' => 'Return only phone calls',
    'object_inputMessagesFilterPhoneCalls_param_missed_type_true' => 'Return only missed phone calls',
    'object_inputMessagesFilterRoundVoice' => 'Return only round videos and voice notes',
    'object_inputMessagesFilterRoundVideo' => 'Return only round videos',
    'object_inputMessagesFilterMyMentions' => 'Return only messages where the current user was mentioned',
    'object_inputMessagesFilterGeo' => 'Return only messages containing geolocations',
    'object_inputMessagesFilterContacts' => 'Return only messages containing contacts',
    'object_updateNewMessage' => 'New message.',
    'object_updateNewMessage_param_message_type_Message' => 'Message',
    'object_updateNewMessage_param_pts_type_int' => 'New quantity of actions in a message box',
    'object_updateNewMessage_param_pts_count_type_int' => 'Number of generated events',
    'object_updateMessageID' => 'Sent message with **random\\_id** client identifier was assigned an identifier.',
    'object_updateMessageID_param_id_type_int' => '**id** identifier of a respective [Message](../types/Message.md)',
    'object_updateDeleteMessages' => 'Messages were deleted.',
    'object_updateDeleteMessages_param_messages_type_Vector t' => 'Messages',
    'object_updateDeleteMessages_param_pts_type_int' => 'New quality of actions in a message box',
    'object_updateDeleteMessages_param_pts_count_type_int' => 'Number of generated [events](https://core.telegram.org/api/updates)',
    'object_updateUserTyping' => 'The user is preparing a message; typing, recording, uploading, etc. This update is valid for 6 seconds. If no repeated update received after 6 seconds, it should be considered that the user stopped doing whatever he\'s been doing.',
    'object_updateUserTyping_param_user_id_type_int' => 'User id',
    'object_updateUserTyping_param_action_type_SendMessageAction' => 'Action type<br>Param added in [Layer 17](https://core.telegram.org/api/layers#layer-17).',
    'object_updateChatUserTyping' => 'The user is preparing a message in a group; typing, recording, uploading, etc. This update is valid for 6 seconds. If no repeated update received after 6 seconds, it should be considered that the user stopped doing whatever he\'s been doing.',
    'object_updateChatUserTyping_param_chat_id_type_int' => 'Group id',
    'object_updateChatUserTyping_param_user_id_type_int' => 'User id',
    'object_updateChatUserTyping_param_action_type_SendMessageAction' => 'Type of action<br>Parameter added in [Layer 17](https://core.telegram.org/api/layers#layer-17).',
    'object_updateChatParticipants' => 'Composition of chat participants changed.',
    'object_updateChatParticipants_param_participants_type_ChatParticipants' => 'Updated chat participants',
    'object_updateUserName' => 'Changes the user\'s first name, last name and username.',
    'object_updateUserName_param_user_id_type_int' => 'User identifier',
    'object_updateUserName_param_first_name_type_string' => 'New first name. Corresponds to the new value of **real\\_first\\_name** field of the [userFull](../constructors/userFull.md) constructor.',
    'object_updateUserName_param_last_name_type_string' => 'New last name. Corresponds to the new value of **real\\_last\\_name** field of the [userFull](../constructors/userFull.md) constructor.',
    'object_updateUserName_param_username_type_string' => 'New username.<br>Parameter added in [Layer 18](https://core.telegram.org/api/layers#layer-18).',
    'object_updateUserPhoto' => 'Change of contact\'s profile photo.',
    'object_updateUserPhoto_param_user_id_type_int' => 'User identifier',
    'object_updateUserPhoto_param_date_type_int' => 'Date of photo update.<br>Parameter was added in [second layer](?layer=2).',
    'object_updateUserPhoto_param_photo_type_UserProfilePhoto' => 'New profile photo',
    'object_updateUserPhoto_param_previous_type_Bool' => '([boolTrue](../constructors/boolTrue.md)), if one of the previously used photos is set a profile photo.<br>Parameter was added in [second layer](?layer=2).',
    'object_updateContactRegistered' => 'Update contact registered',
    'object_updateContactRegistered_param_user_id_type_int' => 'User ID',
    'object_updateContactRegistered_param_date_type_int' => 'Date',
    'object_updateContactLink' => 'Update contact link',
    'object_updateContactLink_param_user_id_type_int' => 'User ID',
    'object_updateContactLink_param_my_link_type_ContactLink' => 'My link',
    'object_updateContactLink_param_foreign_link_type_ContactLink' => 'Foreign link',
    'object_updateNewEncryptedMessage' => 'New encrypted message.',
    'object_updateNewEncryptedMessage_param_message_type_EncryptedMessage' => 'Message',
    'object_updateNewEncryptedMessage_param_qts_type_int' => 'New **qts** value',
    'object_updateEncryptedChatTyping' => 'Interlocutor is typing a message in an encrypted chat. Update period is 6 second. If upon this time there is no repeated update, it shall be considered that the interlocutor stopped typing.',
    'object_updateEncryptedChatTyping_param_chat_id_type_int' => 'Chat ID',
    'object_updateEncryption' => 'Change of state in an encrypted chat.',
    'object_updateEncryption_param_chat_type_EncryptedChat' => 'Encrypted chat',
    'object_updateEncryption_param_date_type_int' => 'Date of change',
    'object_updateEncryptedMessagesRead' => 'Communication history in an encrypted chat was marked as read.',
    'object_updateEncryptedMessagesRead_param_chat_id_type_int' => 'Chat ID',
    'object_updateEncryptedMessagesRead_param_max_date_type_int' => 'Maximum value of data for read messages',
    'object_updateEncryptedMessagesRead_param_date_type_int' => 'Time when messages were read',
    'object_updateChatParticipantAdd' => 'New group member.',
    'object_updateChatParticipantAdd_param_chat_id_type_int' => 'Group ID',
    'object_updateChatParticipantAdd_param_user_id_type_int' => 'ID of the new member',
    'object_updateChatParticipantAdd_param_inviter_id_type_int' => 'ID of the user, who added member to the group',
    'object_updateChatParticipantAdd_param_date_type_int' => 'When was the participant added',
    'object_updateChatParticipantAdd_param_version_type_int' => 'Chat version number',
    'object_updateChatParticipantDelete' => 'A member has left the group.',
    'object_updateChatParticipantDelete_param_chat_id_type_int' => 'Group ID',
    'object_updateChatParticipantDelete_param_user_id_type_int' => 'ID of the user',
    'object_updateChatParticipantDelete_param_version_type_int' => 'Used in basic groups to reorder updates and make sure that all of them was received.',
    'object_updateDcOptions' => 'Changes in the data center configuration options.',
    'object_updateDcOptions_param_dc_options_type_Vector t' => 'DC options',
    'object_updateUserBlocked' => 'User was added to the blacklist (method [contacts.block](../methods/contacts.block.md)) or removed from the blacklist (method [contacts.unblock](../methods/contacts.unblock.md)).',
    'object_updateUserBlocked_param_user_id_type_int' => 'User id',
    'object_updateUserBlocked_param_blocked_type_Bool' => '([boolTrue](../constructors/boolTrue.md)) if the the user is blocked',
    'object_updateNotifySettings' => 'Changes in notification settings.',
    'object_updateNotifySettings_param_peer_type_NotifyPeer' => 'Nofication source',
    'object_updateNotifySettings_param_notify_settings_type_PeerNotifySettings' => 'New notification settings',
    'object_updateServiceNotification' => 'A service message for the user.

The app must show the message to the user upon receiving this update. In case the **popup** parameter was passed, the text message must be displayed in a popup alert immediately upon receipt. It is recommended to handle the text as you would an ordinary message in terms of highlighting links, etc. The message must also be stored locally as part of the message history with the user id `777000` (Telegram Notifications).',
    'object_updateServiceNotification_param_popup_type_true' => '(boolTrue) if the message must be displayed in a popup.',
    'object_updateServiceNotification_param_inbox_date_type_int' => 'When was the notification received<br>The message must also be stored locally as part of the message history with the user id `777000` (Telegram Notifications).',
    'object_updateServiceNotification_param_type_type_string' => 'String, identical in format and contents to the [**type**](https://core.telegram.org/api/errors#error-type) field in API errors. Describes type of service message. It is acceptable to ignore repeated messages of the same **type** within a short period of time (15 minutes).',
    'object_updateServiceNotification_param_message_type_string' => 'Message text',
    'object_updateServiceNotification_param_media_type_MessageMedia' => 'Media content (optional)',
    'object_updateServiceNotification_param_entities_type_Vector t' => 'Entities',
    'object_updatePrivacy' => 'Privacy rules were changed',
    'object_updatePrivacy_param_key_type_PrivacyKey' => 'Peers to which the privacy rules apply',
    'object_updatePrivacy_param_rules_type_Vector t' => 'Rules',
    'object_updateUserPhone' => 'A user\'s phone number was changed',
    'object_updateUserPhone_param_user_id_type_int' => 'User ID',
    'object_updateUserPhone_param_phone_type_string' => 'New phone number',
    'object_updateReadHistoryInbox' => 'Incoming messages were read',
    'object_updateReadHistoryInbox_param_peer_type_Peer' => 'Peer',
    'object_updateReadHistoryInbox_param_max_id_type_int' => 'Maximum ID of messages read',
    'object_updateReadHistoryInbox_param_pts_type_int' => '[Event count after generation](https://core.telegram.org/api/updates)',
    'object_updateReadHistoryInbox_param_pts_count_type_int' => '[Number of events that were generated](https://core.telegram.org/api/updates)',
    'object_updateReadHistoryOutbox' => 'Outgoing messages were read',
    'object_updateReadHistoryOutbox_param_peer_type_Peer' => 'Peer',
    'object_updateReadHistoryOutbox_param_max_id_type_int' => 'Maximum ID of read outgoing messages',
    'object_updateReadHistoryOutbox_param_pts_type_int' => '[Event count after generation](https://core.telegram.org/api/updates)',
    'object_updateReadHistoryOutbox_param_pts_count_type_int' => '[Number of events that were generated](https://core.telegram.org/api/updates)',
    'object_updateWebPage' => 'An [instant view](https://instantview.telegram.org) webpage preview was generated',
    'object_updateWebPage_param_webpage_type_WebPage' => 'Webpage preview',
    'object_updateWebPage_param_pts_type_int' => '[Event count after generation](https://core.telegram.org/api/updates)',
    'object_updateWebPage_param_pts_count_type_int' => '[Number of events that were generated](https://core.telegram.org/api/updates)',
    'object_updateReadMessagesContents' => 'Contents of messages in the common [message box](https://core.telegram.org/api/updates) were read',
    'object_updateReadMessagesContents_param_messages_type_Vector t' => 'Messages',
    'object_updateReadMessagesContents_param_pts_type_int' => '[Event count after generation](https://core.telegram.org/api/updates)',
    'object_updateReadMessagesContents_param_pts_count_type_int' => '[Number of events that were generated](https://core.telegram.org/api/updates)',
    'object_updateChannelTooLong' => 'There are new updates in the specified channel, the client must fetch them, eventually starting the specified pts if the difference is too long or if the channel isn\'t currently in the states.',
    'object_updateChannelTooLong_param_channel_id_type_int' => 'The channel',
    'object_updateChannelTooLong_param_pts_type_int' => 'The [PTS](https://core.telegram.org/api/updates).',
    'object_updateChannel' => 'A new channel is available',
    'object_updateChannel_param_channel_id_type_int' => 'Channel ID',
    'object_updateNewChannelMessage' => 'A new message was sent in a [channel/supergroup](https://core.telegram.org/api/channel)',
    'object_updateNewChannelMessage_param_message_type_Message' => 'New message',
    'object_updateNewChannelMessage_param_pts_type_int' => '[Event count after generation](https://core.telegram.org/api/updates)',
    'object_updateNewChannelMessage_param_pts_count_type_int' => '[Number of events that were generated](https://core.telegram.org/api/updates)',
    'object_updateReadChannelInbox' => 'Incoming messages in a [channel/supergroup](https://core.telegram.org/api/channel) were read',
    'object_updateReadChannelInbox_param_channel_id_type_int' => 'Channel/supergroup ID',
    'object_updateReadChannelInbox_param_max_id_type_int' => 'Position up to which all incoming messages are read.',
    'object_updateDeleteChannelMessages' => 'Some messages in a [supergroup/channel](https://core.telegram.org/api/channel) were deleted',
    'object_updateDeleteChannelMessages_param_channel_id_type_int' => 'Channel ID',
    'object_updateDeleteChannelMessages_param_messages_type_Vector t' => 'Messages',
    'object_updateDeleteChannelMessages_param_pts_type_int' => '[Event count after generation](https://core.telegram.org/api/updates)',
    'object_updateDeleteChannelMessages_param_pts_count_type_int' => '[Number of events that were generated](https://core.telegram.org/api/updates)',
    'object_updateChannelMessageViews' => 'The view counter of a message in a channel has changed',
    'object_updateChannelMessageViews_param_channel_id_type_int' => 'Channel ID',
    'object_updateChannelMessageViews_param_id_type_int' => 'ID of the message',
    'object_updateChannelMessageViews_param_views_type_int' => 'New view counter',
    'object_updateChatAdmins' => 'Update chat admins',
    'object_updateChatAdmins_param_chat_id_type_int' => 'Chat ID',
    'object_updateChatAdmins_param_enabled_type_Bool' => 'Enabled?',
    'object_updateChatAdmins_param_version_type_int' => 'Version',
    'object_updateChatParticipantAdmin' => 'Admin permissions of a user in a [legacy group](https://core.telegram.org/api/channel) were changed',
    'object_updateChatParticipantAdmin_param_chat_id_type_int' => 'Chat ID',
    'object_updateChatParticipantAdmin_param_user_id_type_int' => 'ID of the (de)admined user',
    'object_updateChatParticipantAdmin_param_is_admin_type_Bool' => 'Whether the user was rendered admin',
    'object_updateChatParticipantAdmin_param_version_type_int' => 'Used in basic groups to reorder updates and make sure that all of them was received.',
    'object_updateNewStickerSet' => 'A new stickerset was installed',
    'object_updateNewStickerSet_param_stickerset_type_messages.StickerSet' => 'The installed stickerset',
    'object_updateStickerSetsOrder' => 'The order of stickersets was changed',
    'object_updateStickerSetsOrder_param_masks_type_true' => 'Whether the updated stickers are mask stickers',
    'object_updateStickerSetsOrder_param_order_type_Vector t' => 'Order',
    'object_updateStickerSets' => 'Installed stickersets have changed, the client should refetch them using [messages.getAllStickers](https://core.telegram.org/method/messages.getAllStickers)',
    'object_updateSavedGifs' => 'The saved gif list has changed, the client should refetch it using [messages.getSavedGifs](https://core.telegram.org/method/messages.getSavedGifs)',
    'object_updateBotInlineQuery' => 'An incoming inline query',
    'object_updateBotInlineQuery_param_query_id_type_long' => 'Query ID',
    'object_updateBotInlineQuery_param_user_id_type_int' => 'User that sent the query',
    'object_updateBotInlineQuery_param_query_type_string' => 'Text of query',
    'object_updateBotInlineQuery_param_geo_type_GeoPoint' => 'Attached geolocation',
    'object_updateBotInlineQuery_param_offset_type_string' => 'Offset to navigate through results',
    'object_updateBotInlineSend' => 'The result of an inline query that was chosen by a user and sent to their chat partner. Please see our documentation on the [feedback collecting](https://core.telegram.org/bots/inline#collecting-feedback) for details on how to enable these updates for your bot.',
    'object_updateBotInlineSend_param_user_id_type_int' => 'The user that chose the result',
    'object_updateBotInlineSend_param_query_type_string' => 'The query that was used to obtain the result',
    'object_updateBotInlineSend_param_geo_type_GeoPoint' => 'Optional. Sender location, only for bots that require user location',
    'object_updateBotInlineSend_param_id_type_string' => 'The unique identifier for the result that was chosen',
    'object_updateBotInlineSend_param_msg_id_type_InputBotInlineMessageID' => 'Identifier of the sent inline message. Available only if there is an inline keyboard attached to the message. Will be also received in callback queries and can be used to edit the message.',
    'object_updateEditChannelMessage' => 'A message was edited in a [channel/supergroup](https://core.telegram.org/api/channel)',
    'object_updateEditChannelMessage_param_message_type_Message' => 'The new message',
    'object_updateEditChannelMessage_param_pts_type_int' => '[Event count after generation](https://core.telegram.org/api/updates)',
    'object_updateEditChannelMessage_param_pts_count_type_int' => '[Number of events that were generated](https://core.telegram.org/api/updates)',
    'object_updateChannelPinnedMessage' => 'A message was pinned in a [channel/supergroup](https://core.telegram.org/api/channel).',
    'object_updateChannelPinnedMessage_param_channel_id_type_int' => 'Channel/supergroup ID',
    'object_updateChannelPinnedMessage_param_id_type_int' => 'ID of pinned message',
    'object_updateBotCallbackQuery' => 'A callback button was pressed, and the button data was sent to the bot that created the button',
    'object_updateBotCallbackQuery_param_query_id_type_long' => 'Query ID',
    'object_updateBotCallbackQuery_param_user_id_type_int' => 'ID of the user that pressed the button',
    'object_updateBotCallbackQuery_param_peer_type_Peer' => 'Chat where the inline keyboard was sent',
    'object_updateBotCallbackQuery_param_msg_id_type_int' => 'Message ID',
    'object_updateBotCallbackQuery_param_chat_instance_type_long' => 'Global identifier, uniquely corresponding to the chat to which the message with the callback button was sent. Useful for high scores in games.',
    'object_updateBotCallbackQuery_param_data_type_bytes' => 'Callback data',
    'object_updateBotCallbackQuery_param_game_short_name_type_string' => 'Short name of a Game to be returned, serves as the unique identifier for the game',
    'object_updateEditMessage' => 'A message was edited',
    'object_updateEditMessage_param_message_type_Message' => 'The new edited message',
    'object_updateEditMessage_param_pts_type_int' => '[PTS](https://core.telegram.org/api/updates)',
    'object_updateEditMessage_param_pts_count_type_int' => '[PTS count](https://core.telegram.org/api/updates)',
    'object_updateInlineBotCallbackQuery' => 'This notification is received by bots when a button is pressed',
    'object_updateInlineBotCallbackQuery_param_query_id_type_long' => 'Query ID',
    'object_updateInlineBotCallbackQuery_param_user_id_type_int' => 'ID of the user that pressed the button',
    'object_updateInlineBotCallbackQuery_param_msg_id_type_InputBotInlineMessageID' => 'ID of the inline message with the button',
    'object_updateInlineBotCallbackQuery_param_chat_instance_type_long' => 'Global identifier, uniquely corresponding to the chat to which the message with the callback button was sent. Useful for high scores in games.',
    'object_updateInlineBotCallbackQuery_param_data_type_bytes' => 'Data associated with the callback button. Be aware that a bad client can send arbitrary data in this field.',
    'object_updateInlineBotCallbackQuery_param_game_short_name_type_string' => 'Short name of a Game to be returned, serves as the unique identifier for the game',
    'object_updateReadChannelOutbox' => 'Outgoing messages in a [channel/supergroup](https://core.telegram.org/api/channel) were read',
    'object_updateReadChannelOutbox_param_channel_id_type_int' => 'Channel/supergroup ID',
    'object_updateReadChannelOutbox_param_max_id_type_int' => 'Position up to which all outgoing messages are read.',
    'object_updateDraftMessage' => 'Notifies a change of a message [draft](https://core.telegram.org/api/drafts).',
    'object_updateDraftMessage_param_peer_type_Peer' => 'The peer to which the draft is associated',
    'object_updateDraftMessage_param_draft_type_DraftMessage' => 'The draft',
    'object_updateReadFeaturedStickers' => 'Some featured stickers were marked as read',
    'object_updateRecentStickers' => 'The recent sticker list was updated',
    'object_updateConfig' => 'The server-side configuration has changed; the client should re-fetch the config using [help.getConfig](../methods/help.getConfig.md)',
    'object_updatePtsChanged' => '[Common message box sequence PTS](https://core.telegram.org/api/updates) has changed, [state has to be refetched using updates.getState](https://core.telegram.org/api/updates#fetching-state)',
    'object_updateChannelWebPage' => 'A webpage preview of a link in a [channel/supergroup](https://core.telegram.org/api/channel) message was generated',
    'object_updateChannelWebPage_param_channel_id_type_int' => '[Channel/supergroup](https://core.telegram.org/api/channel) ID',
    'object_updateChannelWebPage_param_webpage_type_WebPage' => 'Generated webpage preview',
    'object_updateChannelWebPage_param_pts_type_int' => '[Event count after generation](https://core.telegram.org/api/updates)',
    'object_updateChannelWebPage_param_pts_count_type_int' => '[Number of events that were generated](https://core.telegram.org/api/updates)',
    'object_updateDialogPinned' => 'A dialog was pinned/unpinned',
    'object_updateDialogPinned_param_pinned_type_true' => 'Whether the dialog was pinned',
    'object_updateDialogPinned_param_peer_type_Peer' => 'Peer',
    'object_updatePinnedDialogs' => 'Pinned dialogs were updated',
    'object_updatePinnedDialogs_param_order_type_Vector t' => 'Order',
    'object_updateBotWebhookJSON' => 'A new incoming event; for bots only',
    'object_updateBotWebhookJSON_param_data_type_DataJSON' => 'The event',
    'object_updateBotWebhookJSONQuery' => 'A new incoming query; for bots only',
    'object_updateBotWebhookJSONQuery_param_query_id_type_long' => 'Query identifier',
    'object_updateBotWebhookJSONQuery_param_data_type_DataJSON' => 'Query data',
    'object_updateBotWebhookJSONQuery_param_timeout_type_int' => 'Query timeout',
    'object_updateBotShippingQuery' => 'This object contains information about an incoming shipping query.',
    'object_updateBotShippingQuery_param_query_id_type_long' => 'Unique query identifier',
    'object_updateBotShippingQuery_param_user_id_type_int' => 'User who sent the query',
    'object_updateBotShippingQuery_param_payload_type_bytes' => 'Bot specified invoice payload',
    'object_updateBotShippingQuery_param_shipping_address_type_PostAddress' => 'User specified shipping address',
    'object_updateBotPrecheckoutQuery' => 'This object contains information about an incoming pre-checkout query.',
    'object_updateBotPrecheckoutQuery_param_query_id_type_long' => 'Unique query identifier',
    'object_updateBotPrecheckoutQuery_param_user_id_type_int' => 'User who sent the query',
    'object_updateBotPrecheckoutQuery_param_payload_type_bytes' => 'Bot specified invoice payload',
    'object_updateBotPrecheckoutQuery_param_info_type_PaymentRequestedInfo' => 'Order info provided by the user',
    'object_updateBotPrecheckoutQuery_param_shipping_option_id_type_string' => 'Identifier of the shipping option chosen by the user',
    'object_updateBotPrecheckoutQuery_param_currency_type_string' => 'Three-letter ISO 4217 [currency](https://core.telegram.org/bots/payments#supported-currencies) code',
    'object_updateBotPrecheckoutQuery_param_total_amount_type_long' => 'Total amount in the smallest units of the currency (integer, not float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).',
    'object_updatePhoneCall' => 'An incoming phone call',
    'object_updatePhoneCall_param_phone_call_type_PhoneCall' => 'Phone call',
    'object_updateLangPackTooLong' => 'A language pack has changed, the client should manually fetch the changed strings using [langpack.getDifference](../methods/langpack.getDifference.md)',
    'object_updateLangPack' => 'Language pack updated',
    'object_updateLangPack_param_difference_type_LangPackDifference' => 'Changed strings',
    'object_updateFavedStickers' => 'The list of favorited stickers was changed, the client should call [messages.getFavedStickers](../methods/messages.getFavedStickers.md) to refetch the new list',
    'object_updateChannelReadMessagesContents' => 'The specified [channel/supergroup](https://core.telegram.org/api/channel) messages were read',
    'object_updateChannelReadMessagesContents_param_channel_id_type_int' => '[Channel/supergroup](https://core.telegram.org/api/channel) ID',
    'object_updateChannelReadMessagesContents_param_messages_type_Vector t' => 'Messages',
    'object_updateContactsReset' => 'All contacts were deleted',
    'object_updateChannelAvailableMessages' => 'The history of a [channel/supergroup](https://core.telegram.org/api/channel) was hidden.',
    'object_updateChannelAvailableMessages_param_channel_id_type_int' => 'Channel/supergroup ID',
    'object_updateChannelAvailableMessages_param_available_min_id_type_int' => 'Identifier of a maximum unavailable message in a channel due to hidden history.',
    'object_updates.state' => 'Updates state.',
    'object_updates.state_param_pts_type_int' => 'Number of events occured in a text box',
    'object_updates.state_param_qts_type_int' => 'Position in a sequence of updates in secret chats. For further detailes refer to article [secret chats](https://core.telegram.org/api/end-to-end)<br>Parameter was added in [eigth layer](https://core.telegram.org/api/layers#layer-8).',
    'object_updates.state_param_date_type_int' => 'Date of condition',
    'object_updates.state_param_seq_type_int' => 'Number of sent updates',
    'object_updates.state_param_unread_count_type_int' => 'Number of unread messages',
    'object_updates.differenceEmpty' => 'No events.',
    'object_updates.differenceEmpty_param_date_type_int' => 'Current date',
    'object_updates.differenceEmpty_param_seq_type_int' => 'Number of sent updates',
    'object_updates.difference' => 'Full list of occurred events.',
    'object_updates.difference_param_new_messages_type_Vector t' => 'New messages',
    'object_updates.difference_param_new_encrypted_messages_type_Vector t' => 'New encrypted messages',
    'object_updates.difference_param_other_updates_type_Vector t' => 'Other updates',
    'object_updates.difference_param_chats_type_Vector t' => 'Chats',
    'object_updates.difference_param_users_type_Vector t' => 'Users',
    'object_updates.difference_param_state_type_updates.State' => 'Current state',
    'object_updates.differenceSlice' => 'Incomplete list of occurred events.',
    'object_updates.differenceSlice_param_new_messages_type_Vector t' => 'New messages',
    'object_updates.differenceSlice_param_new_encrypted_messages_type_Vector t' => 'New encrypted messages',
    'object_updates.differenceSlice_param_other_updates_type_Vector t' => 'Other updates',
    'object_updates.differenceSlice_param_chats_type_Vector t' => 'Chats',
    'object_updates.differenceSlice_param_users_type_Vector t' => 'Users',
    'object_updates.differenceSlice_param_intermediate_state_type_updates.State' => 'Intermediary state',
    'object_updates.differenceTooLong' => 'The difference is [too long](https://core.telegram.org/api/updates#recovering-gaps), and the specified state must be used to refetch updates.',
    'object_updates.differenceTooLong_param_pts_type_int' => 'The new state to use.',
    'object_updatesTooLong' => 'Too many updates, it is necessary to execute [updates.getDifference](../methods/updates.getDifference.md).',
    'object_updateShortMessage' => 'Info about a message sent to (received from) another user',
    'object_updateShortMessage_param_out_type_true' => 'Whether the message is outgoing',
    'object_updateShortMessage_param_mentioned_type_true' => 'Whether we were mentioned in the message',
    'object_updateShortMessage_param_media_unread_type_true' => 'Whether there are some **unread** mentions in this message',
    'object_updateShortMessage_param_silent_type_true' => 'If true, the message is a silent message, no notifications should be triggered',
    'object_updateShortMessage_param_id_type_int' => 'The message ID',
    'object_updateShortMessage_param_user_id_type_int' => 'The ID of the sender (if `outgoing` will be the ID of the destination) of the message',
    'object_updateShortMessage_param_message_type_string' => 'The message',
    'object_updateShortMessage_param_pts_type_int' => '[PTS](https://core.telegram.org/api/updates)',
    'object_updateShortMessage_param_pts_count_type_int' => '[PTS count](https://core.telegram.org/api/updates)',
    'object_updateShortMessage_param_date_type_int' => '[date](https://core.telegram.org/api/updates)',
    'object_updateShortMessage_param_fwd_from_type_MessageFwdHeader' => 'Info about a forwarded message',
    'object_updateShortMessage_param_via_bot_id_type_int' => 'Info about the inline bot used to generate this message',
    'object_updateShortMessage_param_reply_to_msg_id_type_int' => 'ID of the message this message replies to',
    'object_updateShortMessage_param_entities_type_Vector t' => 'Entities',
    'object_updateShortChatMessage' => 'Shortened constructor containing info on one new incoming text message from a chat',
    'object_updateShortChatMessage_param_out_type_true' => 'Whether the message is outgoing',
    'object_updateShortChatMessage_param_mentioned_type_true' => 'Whether we were mentioned in this message',
    'object_updateShortChatMessage_param_media_unread_type_true' => 'Whether the message contains some **unread** mentions',
    'object_updateShortChatMessage_param_silent_type_true' => 'If true, the message is a silent message, no notifications should be triggered',
    'object_updateShortChatMessage_param_id_type_int' => 'ID of the message',
    'object_updateShortChatMessage_param_from_id_type_int' => 'ID of the sender of the message',
    'object_updateShortChatMessage_param_chat_id_type_int' => 'ID of the chat where the message was sent',
    'object_updateShortChatMessage_param_message_type_string' => 'Message',
    'object_updateShortChatMessage_param_pts_type_int' => '[PTS](https://core.telegram.org/api/updates)',
    'object_updateShortChatMessage_param_pts_count_type_int' => '[PTS count](https://core.telegram.org/api/updates)',
    'object_updateShortChatMessage_param_date_type_int' => '[date](https://core.telegram.org/api/updates)',
    'object_updateShortChatMessage_param_fwd_from_type_MessageFwdHeader' => 'Info about a forwarded message',
    'object_updateShortChatMessage_param_via_bot_id_type_int' => 'Info about the inline bot used to generate this message',
    'object_updateShortChatMessage_param_reply_to_msg_id_type_int' => 'ID of the message this message replies to',
    'object_updateShortChatMessage_param_entities_type_Vector t' => 'Entities',
    'object_updateShort' => 'Shortened constructor containing info on one update not requiring auxiliary data',
    'object_updateShort_param_update_type_Update' => 'Update',
    'object_updateShort_param_date_type_int' => 'Date of event',
    'object_updatesCombined' => 'Constructor for a group of updates.',
    'object_updatesCombined_param_updates_type_Vector t' => 'Updates',
    'object_updatesCombined_param_users_type_Vector t' => 'Users',
    'object_updatesCombined_param_chats_type_Vector t' => 'Chats',
    'object_updatesCombined_param_date_type_int' => 'Current date',
    'object_updatesCombined_param_seq_start_type_int' => 'Value **seq** for the earliest update in a group',
    'object_updatesCombined_param_seq_type_int' => 'Value **seq** for the latest update in a group',
    'object_updates' => 'Full constructor of updates',
    'object_updates_param_updates_type_Vector t' => 'Updates',
    'object_updates_param_users_type_Vector t' => 'Users',
    'object_updates_param_chats_type_Vector t' => 'Chats',
    'object_updates_param_date_type_int' => 'Current date',
    'object_updates_param_seq_type_int' => 'Total number of sent updates',
    'object_updateShortSentMessage' => 'Shortened constructor containing info on one outgoing message to a contact (the destination chat has to be extracted from the method call that returned this object).',
    'object_updateShortSentMessage_param_out_type_true' => 'Whether the message is outgoing',
    'object_updateShortSentMessage_param_id_type_int' => 'ID of the sent message',
    'object_updateShortSentMessage_param_pts_type_int' => '[PTS](https://core.telegram.org/api/updates)',
    'object_updateShortSentMessage_param_pts_count_type_int' => '[PTS count](https://core.telegram.org/api/updates)',
    'object_updateShortSentMessage_param_date_type_int' => '[date](https://core.telegram.org/api/updates)',
    'object_updateShortSentMessage_param_media_type_MessageMedia' => 'Attached media',
    'object_updateShortSentMessage_param_entities_type_Vector t' => 'Entities',
    'object_photos.photos' => 'Full list of photos with auxiliary data.',
    'object_photos.photos_param_photos_type_Vector t' => 'Photos',
    'object_photos.photos_param_users_type_Vector t' => 'Users',
    'object_photos.photosSlice' => 'Incomplete list of photos with auxiliary data.',
    'object_photos.photosSlice_param_count_type_int' => 'Total number of photos',
    'object_photos.photosSlice_param_photos_type_Vector t' => 'Photos',
    'object_photos.photosSlice_param_users_type_Vector t' => 'Users',
    'object_photos.photo' => 'Photo with auxiliary data.',
    'object_photos.photo_param_photo_type_Photo' => 'Photo',
    'object_photos.photo_param_users_type_Vector t' => 'Users',
    'object_upload.file' => 'File content.',
    'object_upload.file_param_type_type_storage.FileType' => 'File type',
    'object_upload.file_param_mtime_type_int' => 'Modification type',
    'object_upload.file_param_bytes_type_bytes' => 'Binary data, file content',
    'object_upload.fileCdnRedirect' => 'The file must be downloaded from a [CDN DC](https://core.telegram.org/cdn).',
    'object_upload.fileCdnRedirect_param_dc_id_type_int' => '[CDN DC](https://core.telegram.org/cdn) ID',
    'object_upload.fileCdnRedirect_param_file_token_type_bytes' => 'File token (see [CDN files](https://core.telegram.org/cdn)',
    'object_upload.fileCdnRedirect_param_encryption_key_type_bytes' => 'Encryption key (see [CDN files](https://core.telegram.org/cdn)',
    'object_upload.fileCdnRedirect_param_encryption_iv_type_bytes' => 'Encryption IV (see [CDN files](https://core.telegram.org/cdn)',
    'object_upload.fileCdnRedirect_param_cdn_file_hashes_type_Vector t' => 'Cdn file hashes',
    'object_dcOption' => 'Data centre',
    'object_dcOption_param_ipv6_type_true' => 'Whether the specified IP is an IPv6 address',
    'object_dcOption_param_media_only_type_true' => 'Whether this DC should only be used to [download or upload files](https://core.telegram.org/api/files)',
    'object_dcOption_param_tcpo_only_type_true' => 'Whether this DC only supports connection with [transport obfuscation](https://core.telegram.org/mtproto/mtproto-transports#transport-obfuscation)',
    'object_dcOption_param_cdn_type_true' => 'Whether this is a [CDN DC](https://core.telegram.org/cdn).',
    'object_dcOption_param_static_type_true' => 'If set, this IP should be used when connecting through a proxy',
    'object_dcOption_param_id_type_int' => 'DC ID',
    'object_dcOption_param_ip_address_type_string' => 'IP address of DC',
    'object_dcOption_param_port_type_int' => 'Port',
    'object_config' => 'Current configuration',
    'object_config_param_phonecalls_enabled_type_true' => 'Whether phone calls can be used',
    'object_config_param_default_p2p_contacts_type_true' => 'Whether the client should use P2P by default for phone calls with contacts',
    'object_config_param_date_type_int' => 'Current date at the server',
    'object_config_param_expires_type_int' => 'Expiration date of this config: when it expires it\'ll have to be refetched using [help.getConfig](../methods/help.getConfig.md)',
    'object_config_param_test_mode_type_Bool' => 'Whether we\'re connected to the test DCs',
    'object_config_param_this_dc_type_int' => 'ID of the DC that returned the reply',
    'object_config_param_dc_options_type_Vector t' => 'DC options',
    'object_config_param_chat_size_max_type_int' => 'Maximum member count for normal [groups](https://core.telegram.org/api/channel)',
    'object_config_param_megagroup_size_max_type_int' => 'Maximum member count for [supergroups](https://core.telegram.org/api/channel)',
    'object_config_param_forwarded_count_max_type_int' => 'Maximum number of messages that can be forwarded at once using [messages.forwardMessages](../methods/messages.forwardMessages.md).',
    'object_config_param_online_update_period_ms_type_int' => 'The client should [update its online status](../methods/account.updateStatus.md) every N milliseconds',
    'object_config_param_offline_blur_timeout_ms_type_int' => 'Delay before offline status needs to be sent to the server',
    'object_config_param_offline_idle_timeout_ms_type_int' => 'Time without any user activity after which it should be treated offline',
    'object_config_param_online_cloud_timeout_ms_type_int' => 'If we are offline, but were online from some other client in last `online_cloud_timeout_ms` milliseconds after we had gone offline, then delay offline notification for `notify_cloud_delay_ms` milliseconds.',
    'object_config_param_notify_cloud_delay_ms_type_int' => 'If we are offline, but online from some other client then delay sending the offline notification for `notify_cloud_delay_ms` milliseconds.',
    'object_config_param_notify_default_delay_ms_type_int' => 'If some other client is online, then delay notification for `notification_default_delay_ms` milliseconds',
    'object_config_param_chat_big_size_type_int' => 'Chat big size',
    'object_config_param_push_chat_period_ms_type_int' => 'Not for client use',
    'object_config_param_push_chat_limit_type_int' => 'Not for client use',
    'object_config_param_saved_gifs_limit_type_int' => 'Maximum count of saved gifs',
    'object_config_param_edit_time_limit_type_int' => 'Only messages with age smaller than the one specified can be edited',
    'object_config_param_rating_e_decay_type_int' => 'Exponential decay rate for computing [top peer rating](https://core.telegram.org/api/top-rating)',
    'object_config_param_stickers_recent_limit_type_int' => 'Maximum number of recent stickers',
    'object_config_param_stickers_faved_limit_type_int' => 'Maximum number of faved stickers',
    'object_config_param_channels_read_media_period_type_int' => 'Indicates that round videos (video notes) and voice messages sent in channels and older than the specified period must be marked as read',
    'object_config_param_tmp_sessions_type_int' => 'Temporary [passport](https://core.telegram.org/passport) sessions',
    'object_config_param_pinned_dialogs_count_max_type_int' => 'Maximum count of pinned dialogs',
    'object_config_param_call_receive_timeout_ms_type_int' => 'Maximum allowed outgoing ring time in VoIP calls: if the user we\'re calling doesn\'t reply within the specified time (in milliseconds), we should hang up the call',
    'object_config_param_call_ring_timeout_ms_type_int' => 'Maximum allowed incoming ring time in VoIP calls: if the current user doesn\'t reply within the specified time (in milliseconds), the call will be automatically refused',
    'object_config_param_call_connect_timeout_ms_type_int' => 'VoIP connection timeout: if the instance of libtgvoip on the other side of the call doesn\'t connect to our instance of libtgvoip within the specified time (in milliseconds), the call must be aborted',
    'object_config_param_call_packet_timeout_ms_type_int' => 'If during a VoIP call a packet isn\'t received for the specified period of time, the call must be aborted',
    'object_config_param_me_url_prefix_type_string' => 'The domain to use to parse in-app links.<br>For example t.me indicates that t.me/username links should parsed to @username, t.me/addsticker/name should be parsed to the appropriate stickerset and so on...',
    'object_config_param_suggested_lang_code_type_string' => 'Suggested language code',
    'object_config_param_lang_pack_version_type_int' => 'Language pack version',
    'object_config_param_disabled_features_type_Vector t' => 'Disabled features',
    'object_nearestDc' => 'Nearest data centre, according to geo-ip.',
    'object_nearestDc_param_country_type_string' => 'Country code determined by geo-ip',
    'object_nearestDc_param_this_dc_type_int' => 'Number of current data centre',
    'object_nearestDc_param_nearest_dc_type_int' => 'Number of nearest data centre',
    'object_help.appUpdate' => 'An update is available for the application.',
    'object_help.appUpdate_param_id_type_int' => 'Update ID',
    'object_help.appUpdate_param_critical_type_Bool' => 'Critical?',
    'object_help.appUpdate_param_url_type_string' => 'Application download URL',
    'object_help.appUpdate_param_text_type_string' => 'Text description of the update',
    'object_help.noAppUpdate' => 'No updates are available for the application.',
    'object_help.inviteText' => 'Text of a text message with an invitation to install application.',
    'object_help.inviteText_param_message_type_string' => 'Text of a message',
    'object_encryptedChatEmpty' => 'Empty constructor.',
    'object_encryptedChatEmpty_param_id_type_int' => 'Chat ID',
    'object_encryptedChatWaiting' => 'Chat waiting for approval of second participant.',
    'object_encryptedChatWaiting_param_id_type_int' => 'Chat ID',
    'object_encryptedChatWaiting_param_access_hash_type_long' => 'Checking sum depending on user ID',
    'object_encryptedChatWaiting_param_date_type_int' => 'Date of chat creation',
    'object_encryptedChatWaiting_param_admin_id_type_int' => 'Chat creator ID',
    'object_encryptedChatWaiting_param_participant_id_type_int' => 'ID of second chat participant',
    'object_encryptedChatRequested' => 'Request to create an encrypted chat.',
    'object_encryptedChatRequested_param_id_type_int' => 'Chat ID',
    'object_encryptedChatRequested_param_access_hash_type_long' => 'Check sum depending on user ID',
    'object_encryptedChatRequested_param_date_type_int' => 'Chat creation date',
    'object_encryptedChatRequested_param_admin_id_type_int' => 'Chat creator ID',
    'object_encryptedChatRequested_param_participant_id_type_int' => 'ID of second chat participant',
    'object_encryptedChatRequested_param_g_a_type_bytes' => '`A = g ^ a mod p`, see [Wikipedia](https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange)',
    'object_encryptedChat' => 'Encrypted chat',
    'object_encryptedChat_param_id_type_int' => 'Chat ID',
    'object_encryptedChat_param_access_hash_type_long' => 'Check sum dependant on the user ID',
    'object_encryptedChat_param_date_type_int' => 'Date chat was created',
    'object_encryptedChat_param_admin_id_type_int' => 'Chat creator ID',
    'object_encryptedChat_param_participant_id_type_int' => 'ID of the second chat participant',
    'object_encryptedChat_param_g_a_or_b_type_bytes' => '`B = g ^ b mod p`, if the currently authorized user is the chat\'s creator,<br>or `A = g ^ a mod p` otherwise<br>See [Wikipedia](https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange) for more info',
    'object_encryptedChat_param_key_fingerprint_type_long' => '64-bit fingerprint of received key',
    'object_encryptedChatDiscarded' => 'Discarded or deleted chat.',
    'object_encryptedChatDiscarded_param_id_type_int' => 'Chat ID',
    'object_inputEncryptedChat' => 'Creates an encrypted chat.',
    'object_inputEncryptedChat_param_chat_id_type_int' => 'Chat ID',
    'object_inputEncryptedChat_param_access_hash_type_long' => 'Checking sum from constructor [encryptedChat](../constructors/encryptedChat.md), [encryptedChatWaiting](../constructors/encryptedChatWaiting.md) or [encryptedChatRequested](../constructors/encryptedChatRequested.md)',
    'object_encryptedFileEmpty' => 'Empty constructor, unexisitng file.',
    'object_encryptedFile' => 'Encrypted file.',
    'object_encryptedFile_param_id_type_long' => 'File ID',
    'object_encryptedFile_param_access_hash_type_long' => 'Checking sum depending on user ID',
    'object_encryptedFile_param_size_type_int' => 'File size in bytes',
    'object_encryptedFile_param_dc_id_type_int' => 'Number of data centre',
    'object_encryptedFile_param_key_fingerprint_type_int' => '32-bit fingerprint of key used for file encryption',
    'object_inputEncryptedFileEmpty' => 'Empty constructor.',
    'object_inputEncryptedFileUploaded' => 'Sets new encrypted file saved by parts using upload.saveFilePart method.',
    'object_inputEncryptedFileUploaded_param_id_type_long' => 'Random file ID created by clien',
    'object_inputEncryptedFileUploaded_param_parts_type_int' => 'Number of saved parts',
    'object_inputEncryptedFileUploaded_param_md5_checksum_type_string' => 'In case [md5-HASH](https://en.wikipedia.org/wiki/MD5) of the (already encrypted) file was transmitted, file content will be checked prior to use',
    'object_inputEncryptedFileUploaded_param_key_fingerprint_type_int' => '32-bit fingerprint of the key used to encrypt a file',
    'object_inputEncryptedFile' => 'Sets forwarded encrypted file for attachment.',
    'object_inputEncryptedFile_param_id_type_long' => 'File ID, value of **id** parameter from [encryptedFile](../constructors/encryptedFile.md)',
    'object_inputEncryptedFile_param_access_hash_type_long' => 'Checking sum, value of **access\\_hash** parameter from [encryptedFile](../constructors/encryptedFile.md)',
    'object_inputEncryptedFileBigUploaded' => 'Assigns a new big encrypted file (over 10Mb in size), saved in parts using the method [upload.saveBigFilePart](../methods/upload.saveBigFilePart.md).',
    'object_inputEncryptedFileBigUploaded_param_id_type_long' => 'Random file id, created by the client',
    'object_inputEncryptedFileBigUploaded_param_parts_type_int' => 'Number of saved parts',
    'object_inputEncryptedFileBigUploaded_param_key_fingerprint_type_int' => '32-bit imprint of the key used to encrypt the file',
    'object_encryptedMessage' => 'Encrypted message.',
    'object_encryptedMessage_param_chat_id_type_int' => 'ID of encrypted chat',
    'object_encryptedMessage_param_date_type_int' => 'Date of sending',
    'object_encryptedMessage_param_decrypted_message_type_DecryptedMessage' => 'Decrypted message',
    'object_encryptedMessage_param_file_type_EncryptedFile' => 'Attached encrypted file',
    'object_encryptedMessageService' => 'Encrypted service message',
    'object_encryptedMessageService_param_chat_id_type_int' => 'ID of encrypted chat',
    'object_encryptedMessageService_param_date_type_int' => 'Date of sending',
    'object_encryptedMessageService_param_decrypted_message_type_DecryptedMessage' => 'Decrypted message',
    'object_messages.dhConfigNotModified' => 'Configuring parameters did not change.',
    'object_messages.dhConfigNotModified_param_random_type_bytes' => 'Random sequence of bytes of assigned length',
    'object_messages.dhConfig' => 'New set of configuring parameters.',
    'object_messages.dhConfig_param_g_type_int' => 'New value **prime**, see [Wikipedia](https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange)',
    'object_messages.dhConfig_param_p_type_bytes' => 'New value **primitive root**, see [Wikipedia](https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange)',
    'object_messages.dhConfig_param_version_type_int' => 'Vestion of set of parameters',
    'object_messages.dhConfig_param_random_type_bytes' => 'Random sequence of bytes of assigned length',
    'object_messages.sentEncryptedMessage' => 'Message without file attachemts sent to an encrypted file.',
    'object_messages.sentEncryptedMessage_param_date_type_int' => 'Date of sending',
    'object_messages.sentEncryptedFile' => 'Message with a file enclosure sent to a protected chat',
    'object_messages.sentEncryptedFile_param_date_type_int' => 'Sending date',
    'object_messages.sentEncryptedFile_param_file_type_EncryptedFile' => 'Attached file',
    'object_inputDocumentEmpty' => 'Empty constructor.',
    'object_inputDocument' => 'Defines a video for subsequent interaction.',
    'object_inputDocument_param_id_type_long' => 'Document ID',
    'object_inputDocument_param_access_hash_type_long' => '**access\\_hash** parameter from the [document](../constructors/document.md) constructor',
    'object_documentEmpty' => 'Empty constructor, document doesn\'t exist.',
    'object_documentEmpty_param_id_type_long' => 'Document ID or `0`',
    'object_document' => 'Document',
    'object_document_param_id_type_long' => 'Document ID',
    'object_document_param_access_hash_type_long' => 'Check sum, dependant on document ID',
    'object_document_param_date_type_int' => 'Creation date',
    'object_document_param_mime_type_type_string' => 'MIME type',
    'object_document_param_size_type_int' => 'Size',
    'object_document_param_thumb_type_PhotoSize' => 'Thumbnail',
    'object_document_param_dc_id_type_int' => 'DC ID',
    'object_document_param_version_type_int' => 'Version',
    'object_document_param_attributes_type_Vector t' => 'Attributes',
    'object_help.support' => 'Info on support user.',
    'object_help.support_param_phone_number_type_string' => 'Phone number',
    'object_help.support_param_user_type_User' => 'User',
    'object_notifyPeer' => 'Notifications generated by a certain user or group.',
    'object_notifyPeer_param_peer_type_Peer' => 'User or group',
    'object_notifyUsers' => 'Notifications generated by all users.',
    'object_notifyChats' => 'Notifications generated by all groups.',
    'object_notifyAll' => 'Notify all',
    'object_sendMessageTypingAction' => 'User is typing.',
    'object_sendMessageCancelAction' => 'Invalidate all previous action updates. E.g. when user deletes entered text or aborts a video upload.',
    'object_sendMessageRecordVideoAction' => 'User is recording a video.',
    'object_sendMessageUploadVideoAction' => 'User is uploading a video.',
    'object_sendMessageUploadVideoAction_param_progress_type_int' => 'Progress percentage',
    'object_sendMessageRecordAudioAction' => 'User is recording a voice message.',
    'object_sendMessageUploadAudioAction' => 'User is uploading a voice message.',
    'object_sendMessageUploadAudioAction_param_progress_type_int' => 'Progress percentage',
    'object_sendMessageUploadPhotoAction' => 'User is uploading a photo.',
    'object_sendMessageUploadPhotoAction_param_progress_type_int' => 'Progress percentage',
    'object_sendMessageUploadDocumentAction' => 'User is uploading a file.',
    'object_sendMessageUploadDocumentAction_param_progress_type_int' => 'Progress percentage',
    'object_sendMessageGeoLocationAction' => 'User is selecting a location to share.',
    'object_sendMessageChooseContactAction' => 'User is selecting a contact to share.',
    'object_sendMessageGamePlayAction' => 'User is playing a game',
    'object_sendMessageRecordRoundAction' => 'User is recording a round video to share',
    'object_sendMessageUploadRoundAction' => 'User is uploading a round video',
    'object_sendMessageUploadRoundAction_param_progress_type_int' => 'Progress percentage',
    'object_contacts.found' => 'Users found by name substring and auxiliary data.',
    'object_contacts.found_param_my_results_type_Vector t' => 'My results',
    'object_contacts.found_param_results_type_Vector t' => 'Results',
    'object_contacts.found_param_chats_type_Vector t' => 'Chats',
    'object_contacts.found_param_users_type_Vector t' => 'Users',
    'object_inputPrivacyKeyStatusTimestamp' => 'Whether we can see the exact last online timestamp of the user',
    'object_inputPrivacyKeyChatInvite' => 'Whether the user can be invited to chats',
    'object_inputPrivacyKeyPhoneCall' => 'Whether the user will accept phone calls',
    'object_privacyKeyStatusTimestamp' => 'Whether we can see the last online timestamp',
    'object_privacyKeyPhoneCall' => 'Whether the user accepts phone calls',
    'object_inputPrivacyValueAllowContacts' => 'Allow only contacts',
    'object_inputPrivacyValueAllowAll' => 'Allow all users',
    'object_inputPrivacyValueAllowUsers' => 'Allow only certain users',
    'object_inputPrivacyValueAllowUsers_param_users_type_Vector t' => 'Users',
    'object_inputPrivacyValueDisallowContacts' => 'Disallow only contacts',
    'object_inputPrivacyValueDisallowAll' => 'Disallow all',
    'object_inputPrivacyValueDisallowUsers' => 'Disallow only certain users',
    'object_inputPrivacyValueDisallowUsers_param_users_type_Vector t' => 'Users',
    'object_privacyValueAllowContacts' => 'Allow all contacts',
    'object_privacyValueAllowAll' => 'Allow all users',
    'object_privacyValueAllowUsers' => 'Allow only certain users',
    'object_privacyValueAllowUsers_param_users_type_Vector t' => 'Users',
    'object_privacyValueDisallowContacts' => 'Disallow only contacts',
    'object_privacyValueDisallowAll' => 'Disallow all users',
    'object_privacyValueDisallowUsers' => 'Disallow only certain users',
    'object_privacyValueDisallowUsers_param_users_type_Vector t' => 'Users',
    'object_account.privacyRules' => 'Privacy rules',
    'object_account.privacyRules_param_rules_type_Vector t' => 'Rules',
    'object_account.privacyRules_param_users_type_Vector t' => 'Users',
    'object_accountDaysTTL' => 'Time to live in days of the current account',
    'object_accountDaysTTL_param_days_type_int' => 'This account will self-destruct in the specified number of days',
    'object_documentAttributeImageSize' => 'Defines the width and height of an image uploaded as document',
    'object_documentAttributeImageSize_param_w_type_int' => 'Width of image',
    'object_documentAttributeImageSize_param_h_type_int' => 'Height of image',
    'object_documentAttributeAnimated' => 'Defines an animated GIF',
    'object_documentAttributeSticker' => 'Defines a sticker',
    'object_documentAttributeSticker_param_mask_type_true' => 'Whether this is a mask sticker',
    'object_documentAttributeSticker_param_alt_type_string' => 'Alternative emoji representation of sticker',
    'object_documentAttributeSticker_param_stickerset_type_InputStickerSet' => 'Associated stickerset',
    'object_documentAttributeSticker_param_mask_coords_type_MaskCoords' => 'Mask coordinates (if this is a mask sticker, attached to a photo)',
    'object_documentAttributeVideo' => 'Defines a video',
    'object_documentAttributeVideo_param_round_message_type_true' => 'Whether this is a round video',
    'object_documentAttributeVideo_param_supports_streaming_type_true' => 'Whether the video supports streaming',
    'object_documentAttributeVideo_param_duration_type_int' => 'Duration in seconds',
    'object_documentAttributeVideo_param_w_type_int' => 'Video width',
    'object_documentAttributeVideo_param_h_type_int' => 'Video height',
    'object_documentAttributeAudio' => 'Represents an audio file',
    'object_documentAttributeAudio_param_voice_type_true' => 'Whether this is a voice message',
    'object_documentAttributeAudio_param_duration_type_int' => 'Duration in seconds',
    'object_documentAttributeAudio_param_title_type_string' => 'Name of song',
    'object_documentAttributeAudio_param_performer_type_string' => 'Performer',
    'object_documentAttributeAudio_param_waveform_type_bytes' => 'Waveform',
    'object_documentAttributeFilename' => 'A simple document with a file name',
    'object_documentAttributeFilename_param_file_name_type_string' => 'The file name',
    'object_documentAttributeHasStickers' => 'Whether the current document has stickers attached',
    'object_messages.stickersNotModified' => 'No new stickers were found for the given query',
    'object_messages.stickers' => 'Found stickers',
    'object_messages.stickers_param_hash_type_string' => 'Hash',
    'object_messages.stickers_param_stickers_type_Vector t' => 'Stickers',
    'object_stickerPack' => 'A stickerpack is a group of stickers associated to the same emoji.  
It is **not** a sticker pack the way it is usually intended, you may be looking for a [StickerSet](../types/StickerSet.md).',
    'object_stickerPack_param_emoticon_type_string' => 'Emoji',
    'object_stickerPack_param_documents_type_Vector t' => 'Documents',
    'object_messages.allStickersNotModified' => 'Info about all installed stickers hasn\'t changed',
    'object_messages.allStickers' => 'Info about all installed stickers',
    'object_messages.allStickers_param_hash_type_int' => '[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)',
    'object_messages.allStickers_param_sets_type_Vector t' => 'Sets',
    'object_disabledFeature' => 'Disabled feature',
    'object_disabledFeature_param_feature_type_string' => 'Feature',
    'object_disabledFeature_param_description_type_string' => 'Description',
    'object_messages.affectedMessages' => 'Events affected by operation',
    'object_messages.affectedMessages_param_pts_type_int' => '[Event count after generation](https://core.telegram.org/api/updates)',
    'object_messages.affectedMessages_param_pts_count_type_int' => '[Number of events that were generated](https://core.telegram.org/api/updates)',
    'object_contactLinkUnknown' => 'Contact link unknown',
    'object_contactLinkNone' => 'Contact link none',
    'object_contactLinkHasPhone' => 'Contact link has phone',
    'object_contactLinkContact' => 'Contact link contact',
    'object_webPageEmpty' => 'No preview is available for the webpage',
    'object_webPageEmpty_param_id_type_long' => 'Preview ID',
    'object_webPagePending' => 'A preview of the webpage is currently being generated',
    'object_webPagePending_param_id_type_long' => 'ID of preview',
    'object_webPagePending_param_date_type_int' => 'When was the processing started',
    'object_webPage' => 'Webpage preview',
    'object_webPage_param_id_type_long' => 'Preview ID',
    'object_webPage_param_url_type_string' => 'URL of previewed webpage',
    'object_webPage_param_display_url_type_string' => 'Webpage URL to be displayed to the user',
    'object_webPage_param_hash_type_int' => '[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)',
    'object_webPage_param_type_type_string' => 'Type of the web page. Can be: article, photo, audio, video, document, profile, app, or something else',
    'object_webPage_param_site_name_type_string' => 'Short name of the site (e.g., Google Docs, App Store)',
    'object_webPage_param_title_type_string' => 'Title of the content',
    'object_webPage_param_description_type_string' => 'Content description',
    'object_webPage_param_photo_type_Photo' => 'Image representing the content',
    'object_webPage_param_embed_url_type_string' => 'URL to show in the embedded preview',
    'object_webPage_param_embed_type_type_string' => 'MIME type of the embedded preview, (e.g., text/html or video/mp4)',
    'object_webPage_param_embed_width_type_int' => 'Width of the embedded preview',
    'object_webPage_param_embed_height_type_int' => 'Height of the embedded preview',
    'object_webPage_param_duration_type_int' => 'Duration of the content, in seconds',
    'object_webPage_param_author_type_string' => 'Author of the content',
    'object_webPage_param_document_type_Document' => 'Preview of the content as a media file',
    'object_webPage_param_cached_page_type_Page' => 'Page contents in [instant view](https://instantview.telegram.org) format',
    'object_webPageNotModified' => 'The preview of the webpage hasn\'t changed',
    'object_authorization' => 'Logged-in session',
    'object_authorization_param_hash_type_long' => 'Identifier',
    'object_authorization_param_device_model_type_string' => 'Device model',
    'object_authorization_param_platform_type_string' => 'Platform',
    'object_authorization_param_system_version_type_string' => 'System version',
    'object_authorization_param_api_id_type_int' => '[API ID](https://core.telegram.org/api/obtaining_api_id)',
    'object_authorization_param_app_name_type_string' => 'App name',
    'object_authorization_param_app_version_type_string' => 'App version',
    'object_authorization_param_date_created_type_int' => 'When was the session created',
    'object_authorization_param_date_active_type_int' => 'When was the session last active',
    'object_authorization_param_ip_type_string' => 'Last known IP',
    'object_authorization_param_country_type_string' => 'Country determined from IP',
    'object_authorization_param_region_type_string' => 'Region determined from IP',
    'object_account.authorizations' => 'Logged-in sessions',
    'object_account.authorizations_param_authorizations_type_Vector t' => 'Authorizations',
    'object_account.noPassword' => 'No password',
    'object_account.noPassword_param_new_salt_type_bytes' => 'New salt',
    'object_account.noPassword_param_email_unconfirmed_pattern_type_string' => 'Email unconfirmed pattern',
    'object_account.password' => 'Configuration for two-factor authorization',
    'object_account.password_param_current_salt_type_bytes' => 'Current salt',
    'object_account.password_param_new_salt_type_bytes' => 'New salt',
    'object_account.password_param_hint_type_string' => 'Text hint for the password',
    'object_account.password_param_has_recovery_type_Bool' => 'Has recovery?',
    'object_account.password_param_email_unconfirmed_pattern_type_string' => 'A [password recovery email](https://core.telegram.org/api/srp#email-verification) with the specified [pattern](https://core.telegram.org/api/pattern) is still awaiting verification',
    'object_account.passwordSettings' => 'Private info associated to the password info (recovery email, telegram [passport](https://core.telegram.org/passport) info & so on)',
    'object_account.passwordSettings_param_email_type_string' => '[2FA Recovery email](https://core.telegram.org/api/srp#email-verification)',
    'object_account.passwordInputSettings' => 'Settings for setting up a new password',
    'object_account.passwordInputSettings_param_new_salt_type_bytes' => '`$new_salt = $MadelineProto->account->getPassword()[\'new_salt\'].$MadelineProto->random(8);`',
    'object_account.passwordInputSettings_param_new_password_hash_type_bytes' => 'The [computed password hash](https://core.telegram.org/api/srp)',
    'object_account.passwordInputSettings_param_hint_type_string' => 'Text hint for the password',
    'object_account.passwordInputSettings_param_email_type_string' => 'Password recovery email',
    'object_auth.passwordRecovery' => 'Recovery info of a [2FA password](https://core.telegram.org/api/srp), only for accounts with a [recovery email configured](https://core.telegram.org/api/srp#email-verification).',
    'object_auth.passwordRecovery_param_email_pattern_type_string' => 'The email to which the recovery code was sent must match this [pattern](https://core.telegram.org/api/pattern).',
    'object_receivedNotifyMessage' => 'Message ID, for which PUSH-notifications were cancelled.',
    'object_receivedNotifyMessage_param_id_type_int' => 'Message ID, for which PUSH-notifications were canceled',
    'object_chatInviteEmpty' => 'No info is associated to the chat invite',
    'object_chatInviteExported' => 'Exported chat invite',
    'object_chatInviteExported_param_link_type_string' => 'Chat invitation link',
    'object_chatInviteAlready' => 'The user has already joined this chat',
    'object_chatInviteAlready_param_chat_type_Chat' => 'The chat connected to the invite',
    'object_chatInvite' => 'Chat invite info',
    'object_chatInvite_param_channel_type_true' => 'Whether this is a [channel/supergroup](https://core.telegram.org/api/channel) or a [normal group](https://core.telegram.org/api/channel)',
    'object_chatInvite_param_broadcast_type_true' => 'Whether this is a [channel](https://core.telegram.org/api/channel)',
    'object_chatInvite_param_public_type_true' => 'Whether this is a public [channel/supergroup](https://core.telegram.org/api/channel)',
    'object_chatInvite_param_megagroup_type_true' => 'Whether this is a [supergroup](https://core.telegram.org/api/channel)',
    'object_chatInvite_param_title_type_string' => 'Chat/supergroup/channel title',
    'object_chatInvite_param_photo_type_ChatPhoto' => 'Photo',
    'object_chatInvite_param_participants_count_type_int' => 'Participant count',
    'object_chatInvite_param_participants_type_Vector t' => 'Participants',
    'object_inputStickerSetEmpty' => 'Empty constructor',
    'object_inputStickerSetID' => 'Stickerset by ID',
    'object_inputStickerSetID_param_id_type_long' => 'ID',
    'object_inputStickerSetID_param_access_hash_type_long' => 'Access hash',
    'object_inputStickerSetShortName' => 'Stickerset by short name, from `tg://addstickers?set=short_name`',
    'object_inputStickerSetShortName_param_short_name_type_string' => 'From `tg://addstickers?set=short_name`',
    'object_stickerSet' => 'Represents a stickerset (stickerpack)',
    'object_stickerSet_param_installed_type_true' => 'Installed?',
    'object_stickerSet_param_archived_type_true' => 'Whether this stickerset was archived (due to too many saved stickers in the current account)',
    'object_stickerSet_param_official_type_true' => 'Is this stickerset official',
    'object_stickerSet_param_masks_type_true' => 'Is this a mask stickerset',
    'object_stickerSet_param_id_type_long' => 'ID of the stickerset',
    'object_stickerSet_param_access_hash_type_long' => 'Access hash of stickerset',
    'object_stickerSet_param_title_type_string' => 'Title of stickerset',
    'object_stickerSet_param_short_name_type_string' => 'Short name of stickerset to use in `tg://addstickers?set=short_name`',
    'object_stickerSet_param_count_type_int' => 'Number of stickers in pack',
    'object_stickerSet_param_hash_type_int' => 'Hash',
    'object_messages.stickerSet' => 'Stickerset and stickers inside it',
    'object_messages.stickerSet_param_set_type_StickerSet' => 'The stickerset',
    'object_messages.stickerSet_param_packs_type_Vector t' => 'Packs',
    'object_messages.stickerSet_param_documents_type_Vector t' => 'Documents',
    'object_botInfo' => 'Info about bots (available bot commands, etc)',
    'object_botInfo_param_user_id_type_int' => 'ID of the bot',
    'object_botInfo_param_description_type_string' => 'Description of the bot',
    'object_botInfo_param_commands_type_Vector t' => 'Commands',
    'object_keyboardButton' => 'Bot keyboard button',
    'object_keyboardButton_param_text_type_string' => 'Button text',
    'object_keyboardButtonUrl' => 'URL button',
    'object_keyboardButtonUrl_param_text_type_string' => 'Button label',
    'object_keyboardButtonUrl_param_url_type_string' => 'URL',
    'object_keyboardButtonCallback' => 'Callback button',
    'object_keyboardButtonCallback_param_text_type_string' => 'Button text',
    'object_keyboardButtonCallback_param_data_type_bytes' => 'Callback data',
    'object_keyboardButtonRequestPhone' => 'Button to request a user\'s phone number',
    'object_keyboardButtonRequestPhone_param_text_type_string' => 'Button text',
    'object_keyboardButtonRequestGeoLocation' => 'Button to request a user\'s geolocation',
    'object_keyboardButtonRequestGeoLocation_param_text_type_string' => 'Button text',
    'object_keyboardButtonSwitchInline' => 'Button to force a user to switch to inline mode Pressing the button will prompt the user to select one of their chats, open that chat and insert the bot‘s username and the specified inline query in the input field.',
    'object_keyboardButtonSwitchInline_param_same_peer_type_true' => 'If set, pressing the button will insert the bot‘s username and the specified inline `query` in the current chat\'s input field.',
    'object_keyboardButtonSwitchInline_param_text_type_string' => 'Button label',
    'object_keyboardButtonSwitchInline_param_query_type_string' => 'The inline query to use',
    'object_keyboardButtonGame' => 'Button to start a game',
    'object_keyboardButtonGame_param_text_type_string' => 'Button text',
    'object_keyboardButtonBuy' => 'Button to buy a product',
    'object_keyboardButtonBuy_param_text_type_string' => 'Button text',
    'object_keyboardButtonRow' => 'Inline keyboard row',
    'object_keyboardButtonRow_param_buttons_type_Vector t' => 'Buttons',
    'object_replyKeyboardHide' => 'Hide sent bot keyboard',
    'object_replyKeyboardHide_param_selective_type_true' => 'Use this flag if you want to remove the keyboard for specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot\'s message is a reply (has reply\\_to\\_message\\_id), sender of the original message.<br><br>Example: A user votes in a poll, bot returns confirmation message in reply to the vote and removes the keyboard for that user, while still showing the keyboard with poll options to users who haven\'t voted yet',
    'object_replyKeyboardForceReply' => 'Force the user to send a reply',
    'object_replyKeyboardForceReply_param_single_use_type_true' => 'Requests clients to hide the keyboard as soon as it\'s been used. The keyboard will still be available, but clients will automatically display the usual letter-keyboard in the chat – the user can press a special button in the input field to see the custom keyboard again.',
    'object_replyKeyboardForceReply_param_selective_type_true' => 'Use this parameter if you want to show the keyboard to specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot\'s message is a reply (has reply\\_to\\_message\\_id), sender of the original message. <br>Example: A user requests to change the bot‘s language, bot replies to the request with a keyboard to select the new language. Other users in the group don’t see the keyboard.',
    'object_replyKeyboardMarkup' => 'Bot keyboard',
    'object_replyKeyboardMarkup_param_resize_type_true' => 'Requests clients to resize the keyboard vertically for optimal fit (e.g., make the keyboard smaller if there are just two rows of buttons). If not set, the custom keyboard is always of the same height as the app\'s standard keyboard.',
    'object_replyKeyboardMarkup_param_single_use_type_true' => 'Requests clients to hide the keyboard as soon as it\'s been used. The keyboard will still be available, but clients will automatically display the usual letter-keyboard in the chat – the user can press a special button in the input field to see the custom keyboard again.',
    'object_replyKeyboardMarkup_param_selective_type_true' => 'Use this parameter if you want to show the keyboard to specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot\'s message is a reply (has reply\\_to\\_message\\_id), sender of the original message.<br><br>Example: A user requests to change the bot‘s language, bot replies to the request with a keyboard to select the new language. Other users in the group don’t see the keyboard.',
    'object_replyKeyboardMarkup_param_rows_type_Vector t' => 'Rows',
    'object_replyInlineMarkup' => 'Bot or inline keyboard',
    'object_replyInlineMarkup_param_rows_type_Vector t' => 'Rows',
    'object_messageEntityUnknown' => 'Unknown message entity',
    'object_messageEntityUnknown_param_offset_type_int' => 'Offset of message entity within message (in UTF-8 codepoints)',
    'object_messageEntityUnknown_param_length_type_int' => 'Length of message entity within message (in UTF-8 codepoints)',
    'object_messageEntityMention' => 'Message entity mentioning the current user',
    'object_messageEntityMention_param_offset_type_int' => 'Offset of message entity within message (in UTF-8 codepoints)',
    'object_messageEntityMention_param_length_type_int' => 'Length of message entity within message (in UTF-8 codepoints)',
    'object_messageEntityHashtag' => '**\\#hashtag** message entity',
    'object_messageEntityHashtag_param_offset_type_int' => 'Offset of message entity within message (in UTF-8 codepoints)',
    'object_messageEntityHashtag_param_length_type_int' => 'Length of message entity within message (in UTF-8 codepoints)',
    'object_messageEntityBotCommand' => 'Message entity representing a bot /command',
    'object_messageEntityBotCommand_param_offset_type_int' => 'Offset of message entity within message (in UTF-8 codepoints)',
    'object_messageEntityBotCommand_param_length_type_int' => 'Length of message entity within message (in UTF-8 codepoints)',
    'object_messageEntityUrl' => 'Message entity representing an in-text url: <https://google.com>; for [text urls](https://google.com), use [messageEntityTextUrl](../constructors/messageEntityTextUrl.md).',
    'object_messageEntityUrl_param_offset_type_int' => 'Offset of message entity within message (in UTF-8 codepoints)',
    'object_messageEntityUrl_param_length_type_int' => 'Length of message entity within message (in UTF-8 codepoints)',
    'object_messageEntityEmail' => 'Message entity representing an <email@example.com>.',
    'object_messageEntityEmail_param_offset_type_int' => 'Offset of message entity within message (in UTF-8 codepoints)',
    'object_messageEntityEmail_param_length_type_int' => 'Length of message entity within message (in UTF-8 codepoints)',
    'object_messageEntityBold' => 'Message entity representing **bold text**.',
    'object_messageEntityBold_param_offset_type_int' => 'Offset of message entity within message (in UTF-8 codepoints)',
    'object_messageEntityBold_param_length_type_int' => 'Length of message entity within message (in UTF-8 codepoints)',
    'object_messageEntityItalic' => 'Message entity representing *italic text*.',
    'object_messageEntityItalic_param_offset_type_int' => 'Offset of message entity within message (in UTF-8 codepoints)',
    'object_messageEntityItalic_param_length_type_int' => 'Length of message entity within message (in UTF-8 codepoints)',
    'object_messageEntityCode' => 'Message entity representing a `codeblock`.',
    'object_messageEntityCode_param_offset_type_int' => 'Offset of message entity within message (in UTF-8 codepoints)',
    'object_messageEntityCode_param_length_type_int' => 'Length of message entity within message (in UTF-8 codepoints)',
    'object_messageEntityPre' => 'Message entity representing a preformatted `codeblock`, allowing the user to specify a programming language for the codeblock.',
    'object_messageEntityPre_param_offset_type_int' => 'Offset of message entity within message (in UTF-8 codepoints)',
    'object_messageEntityPre_param_length_type_int' => 'Length of message entity within message (in UTF-8 codepoints)',
    'object_messageEntityPre_param_language_type_string' => 'Programming language of the code',
    'object_messageEntityTextUrl' => 'Message entity representing a [text url](https://google.com): for in-text urls like <https://google.com> use [messageEntityUrl](../constructors/messageEntityUrl.md).',
    'object_messageEntityTextUrl_param_offset_type_int' => 'Offset of message entity within message (in UTF-8 codepoints)',
    'object_messageEntityTextUrl_param_length_type_int' => 'Length of message entity within message (in UTF-8 codepoints)',
    'object_messageEntityTextUrl_param_url_type_string' => 'The actual URL',
    'object_messageEntityMentionName' => 'Message entity representing a [user mention](https://t.me/test): for *creating* a mention use [inputMessageEntityMentionName](../constructors/inputMessageEntityMentionName.md).',
    'object_messageEntityMentionName_param_offset_type_int' => 'Offset of message entity within message (in UTF-8 codepoints)',
    'object_messageEntityMentionName_param_length_type_int' => 'Length of message entity within message (in UTF-8 codepoints)',
    'object_messageEntityMentionName_param_user_id_type_int' => 'Identifier of the user that was mentioned',
    'object_inputMessageEntityMentionName' => 'Message entity that can be used to create a user [user mention](https://t.me/test): received mentions use the [messageEntityMentionName](../constructors/messageEntityMentionName.md) constructor, instead.',
    'object_inputMessageEntityMentionName_param_offset_type_int' => 'Offset of message entity within message (in UTF-8 codepoints)',
    'object_inputMessageEntityMentionName_param_length_type_int' => 'Length of message entity within message (in UTF-8 codepoints)',
    'object_inputMessageEntityMentionName_param_user_id_type_InputUser' => 'Identifier of the user that was mentioned',
    'object_inputChannelEmpty' => 'Represents the absence of a channel',
    'object_inputChannel' => 'Represents a channel',
    'object_inputChannel_param_channel_id_type_int' => 'Channel ID',
    'object_inputChannel_param_access_hash_type_long' => 'Access hash taken from the [channel](../constructors/channel.md) constructor',
    'object_contacts.resolvedPeer' => 'Resolved peer',
    'object_contacts.resolvedPeer_param_peer_type_Peer' => 'The peer',
    'object_contacts.resolvedPeer_param_chats_type_Vector t' => 'Chats',
    'object_contacts.resolvedPeer_param_users_type_Vector t' => 'Users',
    'object_messageRange' => 'Indicates a range of chat messages',
    'object_messageRange_param_min_id_type_int' => 'Start of range (message ID)',
    'object_messageRange_param_max_id_type_int' => 'End of range (message ID)',
    'object_updates.channelDifferenceEmpty' => 'There are no new updates',
    'object_updates.channelDifferenceEmpty_param_final_type_true' => 'Whether there are more updates that must be fetched (always false)',
    'object_updates.channelDifferenceEmpty_param_pts_type_int' => 'The latest [PTS](https://core.telegram.org/api/updates)',
    'object_updates.channelDifferenceEmpty_param_timeout_type_int' => 'Clients are supposed to refetch the channel difference after timeout seconds have elapsed',
    'object_updates.channelDifferenceTooLong' => 'The provided `pts + limit < remote pts`. Simply, there are too many updates to be fetched (more than `limit`), the client has to resolve the update gap in one of the following ways:

1. Delete all known messages in the chat, begin from scratch by refetching all messages manually with [getHistory](../methods/messages.getHistory.md). It is easy to implement, but suddenly disappearing messages looks awful for the user.
2. Save all messages loaded in the memory until application restart, but delete all messages from database. Messages left in the memory must be lazily updated using calls to [getHistory](../methods/messages.getHistory.md). It looks much smoothly for the user, he will need to redownload messages only after client restart. Unsynchronized messages left in the memory shouldn\'t be saved to database, results of [getHistory](../methods/messages.getHistory.md) and [getMessages](../methods/messages.getMessages.md) must be used to update state of deleted and edited messages left in the memory.
3. Save all messages loaded in the memory and stored in the database without saving that some messages form continuous ranges. Messages in the database will be excluded from results of getChatHistory and searchChatMessages after application restart and will be available only through getMessage. Every message should still be checked using getHistory. It has more disadvantages over 2) than advantages.
4. Save all messages with saving all data about continuous message ranges. Messages from the database may be used as results of getChatHistory and (if implemented continuous ranges support for searching shared media) searchChatMessages. The messages should still be lazily checked using getHistory, but they are still available offline. It is the best way for gaps support, but it is pretty hard to implement correctly. It should be also noted that some messages like live location messages shouldn\'t be deleted.',
    'object_updates.channelDifferenceTooLong_param_final_type_true' => 'Whether there are more updates that must be fetched (always false)',
    'object_updates.channelDifferenceTooLong_param_pts_type_int' => 'Pts',
    'object_updates.channelDifferenceTooLong_param_timeout_type_int' => 'Clients are supposed to refetch the channel difference after timeout seconds have elapsed',
    'object_updates.channelDifferenceTooLong_param_top_message_type_int' => 'Top message',
    'object_updates.channelDifferenceTooLong_param_read_inbox_max_id_type_int' => 'Read inbox max ID',
    'object_updates.channelDifferenceTooLong_param_read_outbox_max_id_type_int' => 'Read outbox max ID',
    'object_updates.channelDifferenceTooLong_param_unread_count_type_int' => 'Unread count',
    'object_updates.channelDifferenceTooLong_param_unread_mentions_count_type_int' => 'Unread mentions count',
    'object_updates.channelDifferenceTooLong_param_messages_type_Vector t' => 'Messages',
    'object_updates.channelDifferenceTooLong_param_chats_type_Vector t' => 'Chats',
    'object_updates.channelDifferenceTooLong_param_users_type_Vector t' => 'Users',
    'object_updates.channelDifference' => 'The new updates',
    'object_updates.channelDifference_param_final_type_true' => 'Whether there are more updates to be fetched using getDifference, starting from the provided `pts`',
    'object_updates.channelDifference_param_pts_type_int' => 'The [PTS](https://core.telegram.org/api/updates) from which to start getting updates the next time',
    'object_updates.channelDifference_param_timeout_type_int' => 'Clients are supposed to refetch the channel difference after timeout seconds have elapsed',
    'object_updates.channelDifference_param_new_messages_type_Vector t' => 'New messages',
    'object_updates.channelDifference_param_other_updates_type_Vector t' => 'Other updates',
    'object_updates.channelDifference_param_chats_type_Vector t' => 'Chats',
    'object_updates.channelDifference_param_users_type_Vector t' => 'Users',
    'object_channelMessagesFilterEmpty' => 'No filter',
    'object_channelMessagesFilter' => 'Filter for getting only certain types of channel messages',
    'object_channelMessagesFilter_param_exclude_new_messages_type_true' => 'Whether to exclude new messages from the search',
    'object_channelMessagesFilter_param_ranges_type_Vector t' => 'Ranges',
    'object_channelParticipant' => 'Channel/supergroup participant',
    'object_channelParticipant_param_user_id_type_int' => 'Pariticipant user ID',
    'object_channelParticipant_param_date_type_int' => 'Date joined',
    'object_channelParticipantSelf' => 'Myself',
    'object_channelParticipantSelf_param_user_id_type_int' => 'User ID',
    'object_channelParticipantSelf_param_inviter_id_type_int' => 'User that invited me to the channel/supergroup',
    'object_channelParticipantSelf_param_date_type_int' => 'When did I join the channel/supergroup',
    'object_channelParticipantCreator' => 'Channel/supergroup creator',
    'object_channelParticipantCreator_param_user_id_type_int' => 'User ID',
    'object_channelParticipantAdmin' => 'Admin',
    'object_channelParticipantAdmin_param_can_edit_type_true' => 'Can this admin promote other admins with the same permissions?',
    'object_channelParticipantAdmin_param_user_id_type_int' => 'Admin user ID',
    'object_channelParticipantAdmin_param_inviter_id_type_int' => 'User that invited the admin to the channel/group',
    'object_channelParticipantAdmin_param_promoted_by_type_int' => 'User that promoted the user to admin',
    'object_channelParticipantAdmin_param_date_type_int' => 'When did the user join',
    'object_channelParticipantAdmin_param_admin_rights_type_ChannelAdminRights' => 'Admin rights',
    'object_channelParticipantBanned' => 'Banned/kicked user',
    'object_channelParticipantBanned_param_left_type_true' => 'Whether the user has left the group',
    'object_channelParticipantBanned_param_user_id_type_int' => 'User ID',
    'object_channelParticipantBanned_param_kicked_by_type_int' => 'User was kicked by the specified admin',
    'object_channelParticipantBanned_param_date_type_int' => 'When did the user join the group',
    'object_channelParticipantBanned_param_banned_rights_type_ChannelBannedRights' => 'Banned rights',
    'object_channelParticipantsRecent' => 'Fetch only recent participants',
    'object_channelParticipantsAdmins' => 'Fetch only admin participants',
    'object_channelParticipantsKicked' => 'Fetch only kicked participants',
    'object_channelParticipantsKicked_param_q_type_string' => 'Optional filter for searching kicked participants by name (otherwise empty)',
    'object_channelParticipantsBots' => 'Fetch only bot participants',
    'object_channelParticipantsBanned' => 'Fetch only banned participants',
    'object_channelParticipantsBanned_param_q_type_string' => 'Optional filter for searching banned participants by name (otherwise empty)',
    'object_channelParticipantsSearch' => 'Query participants by name',
    'object_channelParticipantsSearch_param_q_type_string' => 'Search query',
    'object_channels.channelParticipants' => 'Represents multiple channel participants',
    'object_channels.channelParticipants_param_count_type_int' => 'Total number of participants that correspond to the given query',
    'object_channels.channelParticipants_param_participants_type_Vector t' => 'Participants',
    'object_channels.channelParticipants_param_users_type_Vector t' => 'Users',
    'object_channels.channelParticipantsNotModified' => 'No new participant info could be found',
    'object_channels.channelParticipant' => 'Represents a channel participant',
    'object_channels.channelParticipant_param_participant_type_ChannelParticipant' => 'The channel participant',
    'object_channels.channelParticipant_param_users_type_Vector t' => 'Users',
    'object_help.termsOfService' => 'Info about the latest telegram Terms Of Service',
    'object_help.termsOfService_param_text_type_string' => 'Text of the new terms',
    'object_foundGif' => 'Found GIF',
    'object_foundGif_param_url_type_string' => 'GIF URL',
    'object_foundGif_param_thumb_url_type_string' => 'Thumbnail URL',
    'object_foundGif_param_content_url_type_string' => 'Actual URL of the content to send',
    'object_foundGif_param_content_type_type_string' => 'Content-type of media',
    'object_foundGif_param_w_type_int' => 'Width of GIF',
    'object_foundGif_param_h_type_int' => 'Height of GIF',
    'object_foundGifCached' => 'Found cached results',
    'object_foundGifCached_param_url_type_string' => 'GIF URL',
    'object_foundGifCached_param_photo_type_Photo' => 'Thumbnail',
    'object_foundGifCached_param_document_type_Document' => 'Actual GIF document to send',
    'object_messages.foundGifs' => 'Found GIFs',
    'object_messages.foundGifs_param_next_offset_type_int' => 'Next offset to use when trying to [load more results](../methods/messages.searchGifs.md)',
    'object_messages.foundGifs_param_results_type_Vector t' => 'Results',
    'object_messages.savedGifsNotModified' => 'No new saved gifs were found',
    'object_messages.savedGifs' => 'Saved gifs',
    'object_messages.savedGifs_param_hash_type_int' => '[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)',
    'object_messages.savedGifs_param_gifs_type_Vector t' => 'Gifs',
    'object_inputBotInlineMessageMediaAuto' => 'A media',
    'object_inputBotInlineMessageMediaAuto_param_message_type_string' => 'Caption',
    'object_inputBotInlineMessageMediaAuto_param_entities_type_Vector t' => 'Entities',
    'object_inputBotInlineMessageMediaAuto_param_reply_markup_type_ReplyMarkup' => 'Inline keyboard',
    'object_inputBotInlineMessageText' => 'Simple text message',
    'object_inputBotInlineMessageText_param_no_webpage_type_true' => 'Disable webpage preview',
    'object_inputBotInlineMessageText_param_message_type_string' => 'Message',
    'object_inputBotInlineMessageText_param_entities_type_Vector t' => 'Entities',
    'object_inputBotInlineMessageText_param_reply_markup_type_ReplyMarkup' => 'Inline keyboard',
    'object_inputBotInlineMessageMediaGeo' => 'Geolocation',
    'object_inputBotInlineMessageMediaGeo_param_geo_point_type_InputGeoPoint' => 'Geolocation',
    'object_inputBotInlineMessageMediaGeo_param_period_type_int' => 'Validity period',
    'object_inputBotInlineMessageMediaGeo_param_reply_markup_type_ReplyMarkup' => 'Reply markup for bot/inline keyboards',
    'object_inputBotInlineMessageMediaVenue' => 'Venue',
    'object_inputBotInlineMessageMediaVenue_param_geo_point_type_InputGeoPoint' => 'Geolocation',
    'object_inputBotInlineMessageMediaVenue_param_title_type_string' => 'Venue name',
    'object_inputBotInlineMessageMediaVenue_param_address_type_string' => 'Address',
    'object_inputBotInlineMessageMediaVenue_param_provider_type_string' => 'Venue provider: currently only "foursquare" needs to be supported',
    'object_inputBotInlineMessageMediaVenue_param_venue_id_type_string' => 'Venue ID in the provider\'s database',
    'object_inputBotInlineMessageMediaVenue_param_reply_markup_type_ReplyMarkup' => 'Inline keyboard',
    'object_inputBotInlineMessageMediaContact' => 'A contact',
    'object_inputBotInlineMessageMediaContact_param_phone_number_type_string' => 'Phone number',
    'object_inputBotInlineMessageMediaContact_param_first_name_type_string' => 'First name',
    'object_inputBotInlineMessageMediaContact_param_last_name_type_string' => 'Last name',
    'object_inputBotInlineMessageMediaContact_param_reply_markup_type_ReplyMarkup' => 'Inline keyboard',
    'object_inputBotInlineMessageGame' => 'A game',
    'object_inputBotInlineMessageGame_param_reply_markup_type_ReplyMarkup' => 'Inline keyboard',
    'object_inputBotInlineResult' => 'An inline bot result',
    'object_inputBotInlineResult_param_id_type_string' => 'ID of result',
    'object_inputBotInlineResult_param_type_type_string' => 'Result type (see [bot API docs](https://core.telegram.org/bots/api#inlinequeryresult))',
    'object_inputBotInlineResult_param_title_type_string' => 'Result title',
    'object_inputBotInlineResult_param_description_type_string' => 'Result description',
    'object_inputBotInlineResult_param_url_type_string' => 'URL of result',
    'object_inputBotInlineResult_param_thumb_url_type_string' => 'Thumbnail URL',
    'object_inputBotInlineResult_param_content_url_type_string' => 'Content URL',
    'object_inputBotInlineResult_param_content_type_type_string' => 'Content type',
    'object_inputBotInlineResult_param_w_type_int' => 'Width',
    'object_inputBotInlineResult_param_h_type_int' => 'Height',
    'object_inputBotInlineResult_param_duration_type_int' => 'Duration',
    'object_inputBotInlineResult_param_sendMessage_type_InputBotInlineMessage' => 'Message to send',
    'object_inputBotInlineResultPhoto' => 'Photo',
    'object_inputBotInlineResultPhoto_param_id_type_string' => 'Result ID',
    'object_inputBotInlineResultPhoto_param_type_type_string' => 'Result type (see [bot API docs](https://core.telegram.org/bots/api#inlinequeryresult))',
    'object_inputBotInlineResultPhoto_param_photo_type_InputPhoto' => 'Photo to send',
    'object_inputBotInlineResultPhoto_param_sendMessage_type_InputBotInlineMessage' => 'Message to send',
    'object_inputBotInlineResultDocument' => 'Document (media of any type except for photos)',
    'object_inputBotInlineResultDocument_param_id_type_string' => 'Result ID',
    'object_inputBotInlineResultDocument_param_type_type_string' => 'Result type (see [bot API docs](https://core.telegram.org/bots/api#inlinequeryresult))',
    'object_inputBotInlineResultDocument_param_title_type_string' => 'Result title',
    'object_inputBotInlineResultDocument_param_description_type_string' => 'Result description',
    'object_inputBotInlineResultDocument_param_document_type_InputDocument' => 'Document to send',
    'object_inputBotInlineResultDocument_param_sendMessage_type_InputBotInlineMessage' => 'Message to send',
    'object_inputBotInlineResultGame' => 'Game',
    'object_inputBotInlineResultGame_param_id_type_string' => 'Result ID',
    'object_inputBotInlineResultGame_param_short_name_type_string' => 'Game short name',
    'object_inputBotInlineResultGame_param_sendMessage_type_InputBotInlineMessage' => 'Message to send',
    'object_botInlineMessageMediaAuto' => 'Send whatever media is attached to the [botInlineMediaResult](../constructors/botInlineMediaResult.md)',
    'object_botInlineMessageMediaAuto_param_message_type_string' => 'Caption',
    'object_botInlineMessageMediaAuto_param_entities_type_Vector t' => 'Entities',
    'object_botInlineMessageMediaAuto_param_reply_markup_type_ReplyMarkup' => 'Inline keyboard',
    'object_botInlineMessageText' => 'Send a simple text message',
    'object_botInlineMessageText_param_no_webpage_type_true' => 'Disable webpage preview',
    'object_botInlineMessageText_param_message_type_string' => 'The message',
    'object_botInlineMessageText_param_entities_type_Vector t' => 'Entities',
    'object_botInlineMessageText_param_reply_markup_type_ReplyMarkup' => 'Inline keyboard',
    'object_botInlineMessageMediaGeo' => 'Send a geolocation',
    'object_botInlineMessageMediaGeo_param_geo_type_GeoPoint' => 'Geolocation',
    'object_botInlineMessageMediaGeo_param_period_type_int' => 'Validity period',
    'object_botInlineMessageMediaGeo_param_reply_markup_type_ReplyMarkup' => 'Inline keyboard',
    'object_botInlineMessageMediaVenue' => 'Send a venue',
    'object_botInlineMessageMediaVenue_param_geo_type_GeoPoint' => 'Geolocation of venue',
    'object_botInlineMessageMediaVenue_param_title_type_string' => 'Venue name',
    'object_botInlineMessageMediaVenue_param_address_type_string' => 'Address',
    'object_botInlineMessageMediaVenue_param_provider_type_string' => 'Venue provider: currently only "foursquare" needs to be supported',
    'object_botInlineMessageMediaVenue_param_venue_id_type_string' => 'Venue ID in the provider\'s database',
    'object_botInlineMessageMediaVenue_param_reply_markup_type_ReplyMarkup' => 'Inline keyboard',
    'object_botInlineMessageMediaContact' => 'Send a contact',
    'object_botInlineMessageMediaContact_param_phone_number_type_string' => 'Phone number',
    'object_botInlineMessageMediaContact_param_first_name_type_string' => 'First name',
    'object_botInlineMessageMediaContact_param_last_name_type_string' => 'Last name',
    'object_botInlineMessageMediaContact_param_reply_markup_type_ReplyMarkup' => 'Inline keyboard',
    'object_botInlineResult' => 'Generic result',
    'object_botInlineResult_param_id_type_string' => 'Result ID',
    'object_botInlineResult_param_type_type_string' => 'Result type (see [bot API docs](https://core.telegram.org/bots/api#inlinequeryresult))',
    'object_botInlineResult_param_title_type_string' => 'Result title',
    'object_botInlineResult_param_description_type_string' => 'Result description',
    'object_botInlineResult_param_url_type_string' => 'URL of article or webpage',
    'object_botInlineResult_param_thumb_url_type_string' => 'Thumbnail URL',
    'object_botInlineResult_param_content_url_type_string' => 'Content URL',
    'object_botInlineResult_param_content_type_type_string' => 'Content type',
    'object_botInlineResult_param_w_type_int' => 'Width',
    'object_botInlineResult_param_h_type_int' => 'Height',
    'object_botInlineResult_param_duration_type_int' => 'Duration',
    'object_botInlineResult_param_sendMessage_type_BotInlineMessage' => 'Message to send',
    'object_botInlineMediaResult' => 'Media result',
    'object_botInlineMediaResult_param_id_type_string' => 'Result ID',
    'object_botInlineMediaResult_param_type_type_string' => 'Result type (see [bot API docs](https://core.telegram.org/bots/api#inlinequeryresult))',
    'object_botInlineMediaResult_param_photo_type_Photo' => 'If type is `photo`, the photo to send',
    'object_botInlineMediaResult_param_document_type_Document' => 'If type is `document`, the document to send',
    'object_botInlineMediaResult_param_title_type_string' => 'Result title',
    'object_botInlineMediaResult_param_description_type_string' => 'Description',
    'object_botInlineMediaResult_param_sendMessage_type_BotInlineMessage' => 'Send message',
    'object_messages.botResults' => 'Result of a query to an inline bot',
    'object_messages.botResults_param_gallery_type_true' => 'Whether the result is a picture gallery',
    'object_messages.botResults_param_query_id_type_long' => 'Query ID',
    'object_messages.botResults_param_next_offset_type_string' => 'The next offset to use when navigating through results',
    'object_messages.botResults_param_switch_pm_type_InlineBotSwitchPM' => 'Whether the bot requested the user to message him in private',
    'object_messages.botResults_param_results_type_Vector t' => 'Results',
    'object_messages.botResults_param_cache_time_type_int' => 'Caching validity of the results',
    'object_messages.botResults_param_users_type_Vector t' => 'Users',
    'object_exportedMessageLink' => 'Link to a message in a supergroup/channel',
    'object_exportedMessageLink_param_link_type_string' => 'URL',
    'object_exportedMessageLink_param_html_type_string' => 'Embed code',
    'object_messageFwdHeader' => 'Info about a forwarded message',
    'object_messageFwdHeader_param_from_id_type_int' => 'The ID of the user that originally sent the message',
    'object_messageFwdHeader_param_date_type_int' => 'When was the message originally sent',
    'object_messageFwdHeader_param_channel_id_type_int' => 'ID of the channel from which the message was forwarded',
    'object_messageFwdHeader_param_channel_post_type_int' => 'ID of the channel message that was forwarded',
    'object_messageFwdHeader_param_post_author_type_string' => 'For channels and if signatures are enabled, author of the channel message',
    'object_messageFwdHeader_param_saved_from_peer_type_Peer' => 'Only for messages forwarded to the current user (inputPeerSelf), full info about the user/channel that originally sent the message',
    'object_messageFwdHeader_param_saved_from_msg_id_type_int' => 'Only for messages forwarded to the current user (inputPeerSelf), ID of the message that was forwarded from the original user/channel',
    'object_auth.codeTypeSms' => 'Type of verification code that will be sent next if you call the resendCode method: SMS code',
    'object_auth.codeTypeCall' => 'Type of verification code that will be sent next if you call the resendCode method: SMS code',
    'object_auth.codeTypeFlashCall' => 'Type of verification code that will be sent next if you call the resendCode method: SMS code',
    'object_auth.sentCodeTypeApp' => 'The code was sent through the telegram app',
    'object_auth.sentCodeTypeApp_param_length_type_int' => 'Length of the code in bytes',
    'object_auth.sentCodeTypeSms' => 'The code was sent via SMS',
    'object_auth.sentCodeTypeSms_param_length_type_int' => 'Length of the code in bytes',
    'object_auth.sentCodeTypeCall' => 'The code will be sent via a phone call: a synthesized voice will tell the user which verification code to input.',
    'object_auth.sentCodeTypeCall_param_length_type_int' => 'Length of the verification code',
    'object_auth.sentCodeTypeFlashCall' => 'The code will be sent via a flash phone call, that will be closed immediately. The phone code will then be the phone number itself, just make sure that the phone number matches the specified pattern.',
    'object_auth.sentCodeTypeFlashCall_param_pattern_type_string' => '[pattern](https://core.telegram.org/api/pattern) to match',
    'object_messages.botCallbackAnswer' => 'Callback answer sent by the bot in response to a button press',
    'object_messages.botCallbackAnswer_param_alert_type_true' => 'Whether an alert should be shown to the user instead of a toast notification',
    'object_messages.botCallbackAnswer_param_has_url_type_true' => 'Whether an URL is present',
    'object_messages.botCallbackAnswer_param_native_ui_type_true' => 'Whether to show games in WebView or in native UI.',
    'object_messages.botCallbackAnswer_param_message_type_string' => 'Alert to show',
    'object_messages.botCallbackAnswer_param_url_type_string' => 'URL to open',
    'object_messages.botCallbackAnswer_param_cache_time_type_int' => 'For how long should this answer be cached',
    'object_messages.messageEditData' => 'Message edit data for media',
    'object_messages.messageEditData_param_caption_type_true' => 'Media caption, if the specified media\'s caption can be edited',
    'object_inputBotInlineMessageID' => 'Represents a sent inline message from the perspective of a bot',
    'object_inputBotInlineMessageID_param_dc_id_type_int' => 'DC ID to use when working with this inline message',
    'object_inputBotInlineMessageID_param_id_type_long' => 'ID of message',
    'object_inputBotInlineMessageID_param_access_hash_type_long' => 'Access hash of message',
    'object_inlineBotSwitchPM' => 'The bot requested the user to message him in private',
    'object_inlineBotSwitchPM_param_text_type_string' => 'Text for the button that switches the user to a private chat with the bot and sends the bot a start message with the parameter `start_parameter` (can be empty)',
    'object_inlineBotSwitchPM_param_start_param_type_string' => 'The parameter for the `/start parameter`',
    'object_messages.peerDialogs' => 'Dialog info of multiple peers',
    'object_messages.peerDialogs_param_dialogs_type_Vector t' => 'Dialogs',
    'object_messages.peerDialogs_param_messages_type_Vector t' => 'Messages',
    'object_messages.peerDialogs_param_chats_type_Vector t' => 'Chats',
    'object_messages.peerDialogs_param_users_type_Vector t' => 'Users',
    'object_messages.peerDialogs_param_state_type_updates.State' => 'Current [update state of dialog](https://core.telegram.org/api/updates)',
    'object_topPeer' => 'Top peer',
    'object_topPeer_param_peer_type_Peer' => 'Peer',
    'object_topPeer_param_rating_type_double' => 'Rating as computer in [top peer rating »](https://core.telegram.org/api/top-rating)',
    'object_topPeerCategoryBotsPM' => 'Most used bots',
    'object_topPeerCategoryBotsInline' => 'Most used inline bots',
    'object_topPeerCategoryCorrespondents' => 'Users we\'ve chatted most frequently with',
    'object_topPeerCategoryGroups' => 'Often-opened groups and supergroups',
    'object_topPeerCategoryChannels' => 'Most frequently visited channels',
    'object_topPeerCategoryPhoneCalls' => 'Most frequently called users',
    'object_topPeerCategoryPeers' => 'Top peer category',
    'object_topPeerCategoryPeers_param_category_type_TopPeerCategory' => 'Top peer category of peers',
    'object_topPeerCategoryPeers_param_count_type_int' => 'Count of peers',
    'object_topPeerCategoryPeers_param_peers_type_Vector t' => 'Peers',
    'object_contacts.topPeersNotModified' => 'Top peer info hasn\'t changed',
    'object_contacts.topPeers' => 'Top peers',
    'object_contacts.topPeers_param_categories_type_Vector t' => 'Categories',
    'object_contacts.topPeers_param_chats_type_Vector t' => 'Chats',
    'object_contacts.topPeers_param_users_type_Vector t' => 'Users',
    'object_draftMessageEmpty' => 'Empty draft',
    'object_draftMessage' => 'Represents a message [draft](https://core.telegram.org/api/drafts).',
    'object_draftMessage_param_no_webpage_type_true' => 'Whether no webpage preview will be generated',
    'object_draftMessage_param_reply_to_msg_id_type_int' => 'The message this message will reply to',
    'object_draftMessage_param_message_type_string' => 'The draft',
    'object_draftMessage_param_entities_type_Vector t' => 'Entities',
    'object_draftMessage_param_date_type_int' => 'Date of last update of the draft.',
    'object_messages.featuredStickersNotModified' => 'Featured stickers haven\'t changed',
    'object_messages.featuredStickers' => 'Featured stickersets',
    'object_messages.featuredStickers_param_hash_type_int' => '[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)',
    'object_messages.featuredStickers_param_sets_type_Vector t' => 'Sets',
    'object_messages.featuredStickers_param_unread_type_Vector t' => 'Unread',
    'object_messages.recentStickersNotModified' => 'No new recent sticker was found',
    'object_messages.recentStickers' => 'Recently used stickers',
    'object_messages.recentStickers_param_hash_type_int' => '[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)',
    'object_messages.recentStickers_param_stickers_type_Vector t' => 'Stickers',
    'object_messages.archivedStickers' => 'Archived stickersets',
    'object_messages.archivedStickers_param_count_type_int' => 'Number of archived stickers',
    'object_messages.archivedStickers_param_sets_type_Vector t' => 'Sets',
    'object_messages.stickerSetInstallResultSuccess' => 'The stickerset was installed successfully',
    'object_messages.stickerSetInstallResultArchive' => 'The stickerset was installed, but since there are too many stickersets some were archived',
    'object_messages.stickerSetInstallResultArchive_param_sets_type_Vector t' => 'Sets',
    'object_stickerSetCovered' => 'Stickerset, with a specific sticker as preview',
    'object_stickerSetCovered_param_set_type_StickerSet' => 'Stickerset',
    'object_stickerSetCovered_param_cover_type_Document' => 'Preview',
    'object_stickerSetMultiCovered' => 'Stickerset, with a specific stickers as preview',
    'object_stickerSetMultiCovered_param_set_type_StickerSet' => 'Stickerset',
    'object_stickerSetMultiCovered_param_covers_type_Vector t' => 'Covers',
    'object_maskCoords' => 'Position on a photo where a mask should be placed

The `n` position indicates where the mask should be placed:

- 0 => Relative to the forehead
- 1 => Relative to the eyes
- 2 => Relative to the mouth
- 3 => Relative to the chin',
    'object_maskCoords_param_n_type_int' => 'Part of the face, relative to which the mask should be placed',
    'object_maskCoords_param_x_type_double' => 'Shift by X-axis measured in widths of the mask scaled to the face size, from left to right. (For example, -1.0 will place the mask just to the left of the default mask position)',
    'object_maskCoords_param_y_type_double' => 'Shift by Y-axis measured in widths of the mask scaled to the face size, from left to right. (For example, -1.0 will place the mask just to the left of the default mask position)',
    'object_maskCoords_param_zoom_type_double' => 'Mask scaling coefficient. (For example, 2.0 means a doubled size)',
    'object_inputStickeredMediaPhoto' => 'A photo with stickers attached',
    'object_inputStickeredMediaPhoto_param_id_type_InputPhoto' => 'The photo',
    'object_inputStickeredMediaDocument' => 'A document with stickers attached',
    'object_inputStickeredMediaDocument_param_id_type_InputDocument' => 'The document',
    'object_game' => 'Indicates an already sent game',
    'object_game_param_id_type_long' => 'ID of the game',
    'object_game_param_access_hash_type_long' => 'Access hash of the game',
    'object_game_param_short_name_type_string' => 'Short name for the game',
    'object_game_param_title_type_string' => 'Title of the game',
    'object_game_param_description_type_string' => 'Game description',
    'object_game_param_photo_type_Photo' => 'Game preview',
    'object_game_param_document_type_Document' => 'Optional attached document',
    'object_inputGameID' => 'Indicates an already sent game',
    'object_inputGameID_param_id_type_long' => 'Game ID from [Game](../types/Game.md) constructor',
    'object_inputGameID_param_access_hash_type_long' => 'Access hash from [Game](../types/Game.md) constructor',
    'object_inputGameShortName' => 'Game by short name',
    'object_inputGameShortName_param_bot_id_type_InputUser' => 'The bot that provides the game',
    'object_inputGameShortName_param_short_name_type_string' => 'The game\'s short name',
    'object_highScore' => 'Game highscore',
    'object_highScore_param_pos_type_int' => 'Position in highscore list',
    'object_highScore_param_user_id_type_int' => 'User ID',
    'object_highScore_param_score_type_int' => 'Score',
    'object_messages.highScores' => 'Highscores in a game',
    'object_messages.highScores_param_scores_type_Vector t' => 'Scores',
    'object_messages.highScores_param_users_type_Vector t' => 'Users',
    'object_textEmpty' => 'Empty rich text element',
    'object_textPlain' => 'Plain text',
    'object_textPlain_param_text_type_string' => 'Text',
    'object_textBold' => '**Bold** text',
    'object_textBold_param_text_type_RichText' => 'Text',
    'object_textItalic' => '*Italic* text',
    'object_textItalic_param_text_type_RichText' => 'Text',
    'object_textUnderline' => 'Underlined text',
    'object_textUnderline_param_text_type_RichText' => 'Text',
    'object_textStrike' => '<del>Strikethrough</del> text',
    'object_textStrike_param_text_type_RichText' => 'Text',
    'object_textFixed' => '`fixed-width` rich text',
    'object_textFixed_param_text_type_RichText' => 'Text',
    'object_textUrl' => 'Link',
    'object_textUrl_param_text_type_RichText' => 'Text of link',
    'object_textUrl_param_url_type_string' => 'Webpage HTTP URL',
    'object_textUrl_param_webpage_id_type_long' => 'If a preview was already generated for the page, the page ID',
    'object_textEmail' => 'Rich text email link',
    'object_textEmail_param_text_type_RichText' => 'Link text',
    'object_textEmail_param_email_type_string' => 'Email address',
    'object_textConcat' => 'Concatenation of rich texts',
    'object_textConcat_param_texts_type_Vector t' => 'Texts',
    'object_pageBlockUnsupported' => 'Unsupported IV element',
    'object_pageBlockTitle' => 'Title',
    'object_pageBlockTitle_param_text_type_RichText' => 'Title',
    'object_pageBlockSubtitle' => 'Subtitle',
    'object_pageBlockSubtitle_param_text_type_RichText' => 'Text',
    'object_pageBlockAuthorDate' => 'Author and date of creation of article',
    'object_pageBlockAuthorDate_param_author_type_RichText' => 'Author name',
    'object_pageBlockAuthorDate_param_published_date_type_int' => 'Date of pubblication',
    'object_pageBlockHeader' => 'Page header',
    'object_pageBlockHeader_param_text_type_RichText' => 'Contents',
    'object_pageBlockSubheader' => 'Subheader',
    'object_pageBlockSubheader_param_text_type_RichText' => 'Subheader',
    'object_pageBlockFooter' => 'Page footer',
    'object_pageBlockFooter_param_text_type_RichText' => 'Contents',
    'object_pageBlockList' => 'Unordered list of IV blocks',
    'object_pageBlockList_param_ordered_type_Bool' => 'Ordered?',
    'object_pageBlockList_param_items_type_Vector t' => 'Items',
    'object_pageBlockBlockquote' => 'Quote (equivalent to the HTML `<blockquote>`)',
    'object_pageBlockBlockquote_param_text_type_RichText' => 'Quote contents',
    'object_pageBlockBlockquote_param_caption_type_RichText' => 'Caption',
    'object_pageBlockPullquote' => 'Pullquote',
    'object_pageBlockPullquote_param_text_type_RichText' => 'Text',
    'object_pageBlockPullquote_param_caption_type_RichText' => 'Caption',
    'object_pageBlockPhoto' => 'A photo',
    'object_pageBlockPhoto_param_photo_id_type_long' => 'Photo ID',
    'object_pageBlockPhoto_param_caption_type_RichText' => 'Caption',
    'object_pageBlockVideo' => 'Video',
    'object_pageBlockVideo_param_autoplay_type_true' => 'Whether the video is set to autoplay',
    'object_pageBlockVideo_param_loop_type_true' => 'Whether the video is set to loop',
    'object_pageBlockVideo_param_video_id_type_long' => 'Video ID',
    'object_pageBlockVideo_param_caption_type_RichText' => 'Caption',
    'object_pageBlockEmbed' => 'An embedded webpage',
    'object_pageBlockEmbed_param_full_width_type_true' => 'Whether the block should be full width',
    'object_pageBlockEmbed_param_allow_scrolling_type_true' => 'Whether scrolling should be allowed',
    'object_pageBlockEmbed_param_url_type_string' => 'Web page URL, if available',
    'object_pageBlockEmbed_param_html_type_string' => 'HTML-markup of the embedded page',
    'object_pageBlockEmbed_param_poster_photo_id_type_long' => 'Poster photo, if available',
    'object_pageBlockEmbed_param_w_type_int' => 'Block width, if known',
    'object_pageBlockEmbed_param_h_type_int' => 'Block height, if known',
    'object_pageBlockEmbed_param_caption_type_RichText' => 'Caption',
    'object_pageBlockEmbedPost' => 'An embedded post',
    'object_pageBlockEmbedPost_param_url_type_string' => 'Web page URL',
    'object_pageBlockEmbedPost_param_webpage_id_type_long' => 'ID of generated webpage preview',
    'object_pageBlockEmbedPost_param_author_photo_id_type_long' => 'ID of the author\'s photo',
    'object_pageBlockEmbedPost_param_author_type_string' => 'Author name',
    'object_pageBlockEmbedPost_param_date_type_int' => 'Creation date',
    'object_pageBlockEmbedPost_param_blocks_type_Vector t' => 'Blocks',
    'object_pageBlockEmbedPost_param_caption_type_RichText' => 'Caption',
    'object_pageBlockCollage' => 'Collage of media',
    'object_pageBlockCollage_param_items_type_Vector t' => 'Items',
    'object_pageBlockCollage_param_caption_type_RichText' => 'Caption',
    'object_pageBlockSlideshow' => 'Slideshow',
    'object_pageBlockSlideshow_param_items_type_Vector t' => 'Items',
    'object_pageBlockSlideshow_param_caption_type_RichText' => 'Caption',
    'object_pageBlockChannel' => 'Reference to a telegram channel',
    'object_pageBlockChannel_param_channel_type_Chat' => 'The channel/supergroup/chat',
    'object_pageBlockAudio' => 'Audio',
    'object_pageBlockAudio_param_audio_id_type_long' => 'Audio ID (to be fetched from the container [page](../constructors/page.md) constructor',
    'object_pageBlockAudio_param_caption_type_RichText' => 'Caption',
    'object_pagePart' => 'Page part',
    'object_pagePart_param_blocks_type_Vector t' => 'Blocks',
    'object_pagePart_param_photos_type_Vector t' => 'Photos',
    'object_pagePart_param_documents_type_Vector t' => 'Documents',
    'object_pageFull' => 'Page full',
    'object_pageFull_param_blocks_type_Vector t' => 'Blocks',
    'object_pageFull_param_photos_type_Vector t' => 'Photos',
    'object_pageFull_param_documents_type_Vector t' => 'Documents',
    'object_phoneCallDiscardReasonMissed' => 'The phone call was missed',
    'object_phoneCallDiscardReasonDisconnect' => 'The phone call was disconnected',
    'object_phoneCallDiscardReasonHangup' => 'The phone call was ended normally',
    'object_phoneCallDiscardReasonBusy' => 'The phone call was discared because the user is busy in another call',
    'object_dataJSON' => 'Represents a json-encoded object',
    'object_dataJSON_param_data_type_string' => 'JSON-encoded object',
    'object_labeledPrice' => 'This object represents a portion of the price for goods or services.',
    'object_labeledPrice_param_label_type_string' => 'Portion label',
    'object_labeledPrice_param_amount_type_long' => 'Price of the product in the smallest units of the currency (integer, not float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).',
    'object_invoice' => 'Invoice',
    'object_invoice_param_test_type_true' => 'Test invoice',
    'object_invoice_param_name_requested_type_true' => 'Set this flag if you require the user\'s full name to complete the order',
    'object_invoice_param_phone_requested_type_true' => 'Set this flag if you require the user\'s phone number to complete the order',
    'object_invoice_param_email_requested_type_true' => 'Set this flag if you require the user\'s email address to complete the order',
    'object_invoice_param_shipping_address_requested_type_true' => 'Set this flag if you require the user\'s shipping address to complete the order',
    'object_invoice_param_flexible_type_true' => 'Set this flag if the final price depends on the shipping method',
    'object_invoice_param_phone_to_provider_type_true' => 'Set this flag if user\'s phone number should be sent to provider',
    'object_invoice_param_email_to_provider_type_true' => 'Set this flag if user\'s email address should be sent to provider',
    'object_invoice_param_currency_type_string' => 'Three-letter ISO 4217 [currency](https://core.telegram.org/bots/payments#supported-currencies) code',
    'object_invoice_param_prices_type_Vector t' => 'Prices',
    'object_paymentCharge' => 'Payment identifier',
    'object_paymentCharge_param_id_type_string' => 'Telegram payment identifier',
    'object_paymentCharge_param_provider_charge_id_type_string' => 'Provider payment identifier',
    'object_postAddress' => 'Shipping address',
    'object_postAddress_param_street_line1_type_string' => 'First line for the address',
    'object_postAddress_param_street_line2_type_string' => 'Second line for the address',
    'object_postAddress_param_city_type_string' => 'City',
    'object_postAddress_param_state_type_string' => 'State, if applicable (empty otherwise)',
    'object_postAddress_param_country_iso2_type_string' => 'ISO 3166-1 alpha-2 country code',
    'object_postAddress_param_post_code_type_string' => 'Address post code',
    'object_paymentRequestedInfo' => 'Order info provided by the user',
    'object_paymentRequestedInfo_param_name_type_string' => 'User\'s full name',
    'object_paymentRequestedInfo_param_phone_type_string' => 'User\'s phone number',
    'object_paymentRequestedInfo_param_email_type_string' => 'User\'s email address',
    'object_paymentRequestedInfo_param_shipping_address_type_PostAddress' => 'User\'s shipping address',
    'object_paymentSavedCredentialsCard' => 'Saved credit card',
    'object_paymentSavedCredentialsCard_param_id_type_string' => 'Card ID',
    'object_paymentSavedCredentialsCard_param_title_type_string' => 'Title',
    'object_webDocument' => 'Remote document',
    'object_webDocument_param_url_type_string' => 'Document URL',
    'object_webDocument_param_access_hash_type_long' => 'Access hash',
    'object_webDocument_param_size_type_int' => 'File size',
    'object_webDocument_param_mime_type_type_string' => 'MIME type',
    'object_webDocument_param_attributes_type_Vector t' => 'Attributes',
    'object_webDocument_param_dc_id_type_int' => 'DC ID',
    'object_inputWebDocument' => 'The document',
    'object_inputWebDocument_param_url_type_string' => 'Remote document URL to be downloaded using the appropriate [method](https://core.telegram.org/api/files)',
    'object_inputWebDocument_param_size_type_int' => 'Remote file size',
    'object_inputWebDocument_param_mime_type_type_string' => 'Mime type',
    'object_inputWebDocument_param_attributes_type_Vector t' => 'Attributes',
    'object_inputWebFileLocation' => 'Location of a remote HTTP(s) file',
    'object_inputWebFileLocation_param_url_type_string' => 'HTTP URL of file',
    'object_inputWebFileLocation_param_access_hash_type_long' => 'Access hash',
    'object_upload.webFile' => 'Represents a chunk of an [HTTP webfile](https://core.telegram.org/api/files) downloaded through telegram\'s secure MTProto servers',
    'object_upload.webFile_param_size_type_int' => 'File size',
    'object_upload.webFile_param_mime_type_type_string' => 'Mime type',
    'object_upload.webFile_param_file_type_type_storage.FileType' => 'File type',
    'object_upload.webFile_param_mtime_type_int' => 'Modified time',
    'object_upload.webFile_param_bytes_type_bytes' => 'Data',
    'object_payments.paymentForm' => 'Payment form',
    'object_payments.paymentForm_param_can_save_credentials_type_true' => 'Whether the user can choose to save credentials.',
    'object_payments.paymentForm_param_password_missing_type_true' => 'Indicates that the user can save payment credentials, but only after setting up a [2FA password](https://core.telegram.org/api/srp) (currently the account doesn\'t have a [2FA password](https://core.telegram.org/api/srp))',
    'object_payments.paymentForm_param_bot_id_type_int' => 'Bot ID',
    'object_payments.paymentForm_param_invoice_type_Invoice' => 'Invoice',
    'object_payments.paymentForm_param_provider_id_type_int' => 'Payment provider ID.',
    'object_payments.paymentForm_param_url_type_string' => 'Payment form URL',
    'object_payments.paymentForm_param_native_provider_type_string' => 'Payment provider name.<br>One of the following:<br>\\- `stripe`',
    'object_payments.paymentForm_param_native_params_type_DataJSON' => 'Contains information about the payment provider, if available, to support it natively without the need for opening the URL.<br>A JSON object that can contain the following fields:<br><br>\\- `publishable_key`: Stripe API publishable key<br>\\- `apple_pay_merchant_id`: Apple Pay merchant ID<br>\\- `android_pay_public_key`: Android Pay public key<br>\\- `android_pay_bgcolor`: Android Pay form background color<br>\\- `android_pay_inverse`: Whether to use the dark theme in the Android Pay form<br>\\- `need_country`: True, if the user country must be provided,<br>\\- `need_zip`: True, if the user ZIP/postal code must be provided,<br>\\- `need_cardholder_name`: True, if the cardholder name must be provided<br>',
    'object_payments.paymentForm_param_saved_info_type_PaymentRequestedInfo' => 'Saved server-side order information',
    'object_payments.paymentForm_param_saved_credentials_type_PaymentSavedCredentials' => 'Contains information about saved card credentials',
    'object_payments.paymentForm_param_users_type_Vector t' => 'Users',
    'object_payments.validatedRequestedInfo' => 'Validated user-provided info',
    'object_payments.validatedRequestedInfo_param_id_type_string' => 'ID',
    'object_payments.validatedRequestedInfo_param_shipping_options_type_Vector t' => 'Shipping options',
    'object_payments.paymentResult' => 'Payment result',
    'object_payments.paymentResult_param_updates_type_Updates' => 'Info about the payment',
    'object_payments.paymentVerficationNeeded' => 'Payment verfication needed',
    'object_payments.paymentVerficationNeeded_param_url_type_string' => 'URL',
    'object_payments.paymentReceipt' => 'Receipt',
    'object_payments.paymentReceipt_param_date_type_int' => 'Date of generation',
    'object_payments.paymentReceipt_param_bot_id_type_int' => 'Bot ID',
    'object_payments.paymentReceipt_param_invoice_type_Invoice' => 'Invoice',
    'object_payments.paymentReceipt_param_provider_id_type_int' => 'Provider ID',
    'object_payments.paymentReceipt_param_info_type_PaymentRequestedInfo' => 'Info',
    'object_payments.paymentReceipt_param_shipping_type_ShippingOption' => 'Selected shipping option',
    'object_payments.paymentReceipt_param_currency_type_string' => 'Three-letter ISO 4217 [currency](https://core.telegram.org/bots/payments#supported-currencies) code',
    'object_payments.paymentReceipt_param_total_amount_type_long' => 'Total amount in the smallest units of the currency (integer, not float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).',
    'object_payments.paymentReceipt_param_credentials_title_type_string' => 'Payment credential name',
    'object_payments.paymentReceipt_param_users_type_Vector t' => 'Users',
    'object_payments.savedInfo' => 'Saved server-side order information',
    'object_payments.savedInfo_param_has_saved_credentials_type_true' => 'Whether the user has some saved payment credentials',
    'object_payments.savedInfo_param_saved_info_type_PaymentRequestedInfo' => 'Saved server-side order information',
    'object_inputPaymentCredentialsSaved' => 'Saved payment credentials',
    'object_inputPaymentCredentialsSaved_param_id_type_string' => 'Credential ID',
    'object_inputPaymentCredentialsSaved_param_tmp_password_type_bytes' => 'Temporary password',
    'object_inputPaymentCredentials' => 'Payment credentials',
    'object_inputPaymentCredentials_param_save_type_true' => 'Save payment credential for future use',
    'object_inputPaymentCredentials_param_data_type_DataJSON' => 'Payment credentials',
    'object_inputPaymentCredentialsApplePay' => 'Apple pay payment credentials',
    'object_inputPaymentCredentialsApplePay_param_payment_data_type_DataJSON' => 'Payment data',
    'object_inputPaymentCredentialsAndroidPay' => 'Android pay payment credentials',
    'object_inputPaymentCredentialsAndroidPay_param_payment_token_type_DataJSON' => 'Android pay payment token',
    'object_inputPaymentCredentialsAndroidPay_param_google_transaction_id_type_string' => 'Google transaction ID',
    'object_account.tmpPassword' => 'Temporary payment password',
    'object_account.tmpPassword_param_tmp_password_type_bytes' => 'Temporary password',
    'object_account.tmpPassword_param_valid_until_type_int' => 'Validity period',
    'object_shippingOption' => 'Shipping option',
    'object_shippingOption_param_id_type_string' => 'Option ID',
    'object_shippingOption_param_title_type_string' => 'Title',
    'object_shippingOption_param_prices_type_Vector t' => 'Prices',
    'object_inputStickerSetItem' => 'Sticker in a stickerset',
    'object_inputStickerSetItem_param_document_type_InputDocument' => 'The sticker',
    'object_inputStickerSetItem_param_emoji_type_string' => 'Associated emoji',
    'object_inputStickerSetItem_param_mask_coords_type_MaskCoords' => 'Coordinates for mask sticker',
    'object_inputPhoneCall' => 'Phone call',
    'object_inputPhoneCall_param_id_type_long' => 'Call ID',
    'object_inputPhoneCall_param_access_hash_type_long' => 'Access hash',
    'object_phoneCallEmpty' => 'Empty constructor',
    'object_phoneCallEmpty_param_id_type_long' => 'Call ID',
    'object_phoneCallWaiting' => 'Incoming phone call',
    'object_phoneCallWaiting_param_id_type_long' => 'Call ID',
    'object_phoneCallWaiting_param_access_hash_type_long' => 'Access hash',
    'object_phoneCallWaiting_param_date_type_int' => 'Date',
    'object_phoneCallWaiting_param_admin_id_type_int' => 'Admin ID',
    'object_phoneCallWaiting_param_participant_id_type_int' => 'Participant ID',
    'object_phoneCallWaiting_param_protocol_type_PhoneCallProtocol' => 'Phone call protocol info',
    'object_phoneCallWaiting_param_receive_date_type_int' => 'When was the phone call received',
    'object_phoneCallRequested' => 'Requested phone call',
    'object_phoneCallRequested_param_id_type_long' => 'Phone call ID',
    'object_phoneCallRequested_param_access_hash_type_long' => 'Access hash',
    'object_phoneCallRequested_param_date_type_int' => 'When was the phone call created',
    'object_phoneCallRequested_param_admin_id_type_int' => 'ID of the creator of the phone call',
    'object_phoneCallRequested_param_participant_id_type_int' => 'ID of the other participant of the phone call',
    'object_phoneCallRequested_param_g_a_hash_type_bytes' => '[Parameter for key exchange](https://core.telegram.org/api/end-to-end/voice-calls)',
    'object_phoneCallRequested_param_protocol_type_PhoneCallProtocol' => 'Call protocol info to be passed to libtgvoip',
    'object_phoneCallAccepted' => 'An accepted phone call',
    'object_phoneCallAccepted_param_id_type_long' => 'ID of accepted phone call',
    'object_phoneCallAccepted_param_access_hash_type_long' => 'Access hash of phone call',
    'object_phoneCallAccepted_param_date_type_int' => 'When was the call accepted',
    'object_phoneCallAccepted_param_admin_id_type_int' => 'ID of the call creator',
    'object_phoneCallAccepted_param_participant_id_type_int' => 'ID of the other user in the call',
    'object_phoneCallAccepted_param_g_b_type_bytes' => 'B parameter for [secure E2E phone call key exchange](https://core.telegram.org/api/end-to-end/voice-calls)',
    'object_phoneCallAccepted_param_protocol_type_PhoneCallProtocol' => 'Protocol to use for phone call',
    'object_phoneCall' => 'Phone call',
    'object_phoneCall_param_id_type_long' => 'Call ID',
    'object_phoneCall_param_access_hash_type_long' => 'Access hash',
    'object_phoneCall_param_date_type_int' => 'Date of creation of the call',
    'object_phoneCall_param_admin_id_type_int' => 'User ID of the creator of the call',
    'object_phoneCall_param_participant_id_type_int' => 'User ID of the other participant in the call',
    'object_phoneCall_param_g_a_or_b_type_bytes' => '[Parameter for key exchange](https://core.telegram.org/api/end-to-end/voice-calls)',
    'object_phoneCall_param_key_fingerprint_type_long' => '[Key fingerprint](https://core.telegram.org/api/end-to-end/voice-calls)',
    'object_phoneCall_param_protocol_type_PhoneCallProtocol' => 'Call protocol info to be passed to libtgvoip',
    'object_phoneCall_param_connection_type_PhoneConnection' => 'Connection',
    'object_phoneCall_param_alternative_connections_type_Vector t' => 'Alternative connections',
    'object_phoneCall_param_start_date_type_int' => 'When was the call actually started',
    'object_phoneCallDiscarded' => 'Indicates a discarded phone call',
    'object_phoneCallDiscarded_param_need_rating_type_true' => 'Whether the server required the user to [rate](../methods/phone.setCallRating.md) the call',
    'object_phoneCallDiscarded_param_need_debug_type_true' => 'Whether the server required the client to [send](../methods/phone.saveCallDebug.md) the libtgvoip call debug data',
    'object_phoneCallDiscarded_param_id_type_long' => 'Call ID',
    'object_phoneCallDiscarded_param_reason_type_PhoneCallDiscardReason' => 'Why was the phone call discarded',
    'object_phoneCallDiscarded_param_duration_type_int' => 'Duration of the phone call in seconds',
    'object_phoneConnection' => 'Identifies an endpoint that can be used to connect to the other user in a phone call',
    'object_phoneConnection_param_id_type_long' => 'Endpoint ID',
    'object_phoneConnection_param_ip_type_string' => 'IP address of endpoint',
    'object_phoneConnection_param_ipv6_type_string' => 'IPv6 address of endpoint',
    'object_phoneConnection_param_port_type_int' => 'Port ID',
    'object_phoneConnection_param_peer_tag_type_bytes' => 'Our peer tag',
    'object_phoneCallProtocol' => 'Protocol info for libtgvoip',
    'object_phoneCallProtocol_param_udp_p2p_type_true' => 'Whether to allow P2P connection to the other participant',
    'object_phoneCallProtocol_param_udp_reflector_type_true' => 'Whether to allow connection to the other participants through the reflector servers',
    'object_phoneCallProtocol_param_min_layer_type_int' => 'Minimum layer for remote libtgvoip',
    'object_phoneCallProtocol_param_max_layer_type_int' => 'Maximum layer for remote libtgvoip',
    'object_phone.phoneCall' => 'A VoIP phone call',
    'object_phone.phoneCall_param_phone_call_type_PhoneCall' => 'The VoIP phone call',
    'object_phone.phoneCall_param_users_type_Vector t' => 'Users',
    'object_upload.cdnFileReuploadNeeded' => 'The file was cleared from the temporary RAM cache of the [CDN](https://core.telegram.org/cdn) and has to be reuploaded.',
    'object_upload.cdnFileReuploadNeeded_param_request_token_type_bytes' => 'Request token (see [CDN](https://core.telegram.org/cdn))',
    'object_upload.cdnFile' => 'Represent a chunk of a [CDN](https://core.telegram.org/cdn) file.',
    'object_upload.cdnFile_param_bytes_type_bytes' => 'The data',
    'object_cdnPublicKey' => 'Public key to use **only** during handshakes to [CDN](https://core.telegram.org/cdn) DCs.',
    'object_cdnPublicKey_param_dc_id_type_int' => '[CDN DC](https://core.telegram.org/cdn) ID',
    'object_cdnPublicKey_param_public_key_type_string' => 'RSA public key',
    'object_cdnConfig' => 'Configuration for [CDN](https://core.telegram.org/cdn) file downloads.',
    'object_cdnConfig_param_public_keys_type_Vector t' => 'Public keys',
    'object_langPackString' => 'Translated localization string',
    'object_langPackString_param_key_type_string' => 'Language key',
    'object_langPackString_param_value_type_string' => 'Value',
    'object_langPackStringPluralized' => 'A language pack string which has different forms based on the number of some object it mentions. See [https://www.unicode.org/cldr/charts/latest/supplemental/language\\_plural\\_rules.html](https://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html) for more info',
    'object_langPackStringPluralized_param_key_type_string' => 'Localization key',
    'object_langPackStringPluralized_param_zero_value_type_string' => 'Value for zero objects',
    'object_langPackStringPluralized_param_one_value_type_string' => 'Value for one object',
    'object_langPackStringPluralized_param_two_value_type_string' => 'Value for two objects',
    'object_langPackStringPluralized_param_few_value_type_string' => 'Value for a few objects',
    'object_langPackStringPluralized_param_many_value_type_string' => 'Value for many objects',
    'object_langPackStringPluralized_param_other_value_type_string' => 'Default value',
    'object_langPackStringDeleted' => 'Deleted localization string',
    'object_langPackStringDeleted_param_key_type_string' => 'Localization key',
    'object_langPackDifference' => 'Changes to the app\'s localization pack',
    'object_langPackDifference_param_lang_code_type_string' => 'Language code',
    'object_langPackDifference_param_from_version_type_int' => 'Previous version number',
    'object_langPackDifference_param_version_type_int' => 'New version number',
    'object_langPackDifference_param_strings_type_Vector t' => 'Strings',
    'object_langPackLanguage' => 'Identifies a localization pack',
    'object_langPackLanguage_param_name_type_string' => 'Language name',
    'object_langPackLanguage_param_native_name_type_string' => 'Language name in the language itself',
    'object_langPackLanguage_param_lang_code_type_string' => 'Language code (pack identifier)',
    'object_channelAdminRights' => 'Admin rights',
    'object_channelAdminRights_param_change_info_type_true' => 'Change info',
    'object_channelAdminRights_param_post_messages_type_true' => 'Post messages',
    'object_channelAdminRights_param_edit_messages_type_true' => 'Edit messages',
    'object_channelAdminRights_param_delete_messages_type_true' => 'Delete messages',
    'object_channelAdminRights_param_ban_users_type_true' => 'Ban users',
    'object_channelAdminRights_param_invite_users_type_true' => 'Invite users',
    'object_channelAdminRights_param_invite_link_type_true' => 'Generate an invite link',
    'object_channelAdminRights_param_pin_messages_type_true' => 'Pin messages',
    'object_channelAdminRights_param_add_admins_type_true' => 'Add other admins',
    'object_channelBannedRights' => 'Banned user rights (when true, the user will NOT be able to do that thing)',
    'object_channelBannedRights_param_view_messages_type_true' => 'Disallow viewing messages',
    'object_channelBannedRights_param_sendMessages_type_true' => 'Disallow sending messages',
    'object_channelBannedRights_param_send_media_type_true' => 'Disallow sending media',
    'object_channelBannedRights_param_send_stickers_type_true' => 'Disallow sending stickers',
    'object_channelBannedRights_param_send_gifs_type_true' => 'Disallow sending gifs',
    'object_channelBannedRights_param_send_games_type_true' => 'Disallow sending games',
    'object_channelBannedRights_param_send_inline_type_true' => 'Disallow sending inline keyboards',
    'object_channelBannedRights_param_embed_links_type_true' => 'Disallow embedding links',
    'object_channelBannedRights_param_until_date_type_int' => 'Until date',
    'object_channelAdminLogEventActionChangeTitle' => 'Channel/supergroup title was changed',
    'object_channelAdminLogEventActionChangeTitle_param_prev_value_type_string' => 'Previous title',
    'object_channelAdminLogEventActionChangeTitle_param_new_value_type_string' => 'New title',
    'object_channelAdminLogEventActionChangeAbout' => 'The description was changed',
    'object_channelAdminLogEventActionChangeAbout_param_prev_value_type_string' => 'Previous description',
    'object_channelAdminLogEventActionChangeAbout_param_new_value_type_string' => 'New description',
    'object_channelAdminLogEventActionChangeUsername' => 'Channel/supergroup username was changed',
    'object_channelAdminLogEventActionChangeUsername_param_prev_value_type_string' => 'Old username',
    'object_channelAdminLogEventActionChangeUsername_param_new_value_type_string' => 'New username',
    'object_channelAdminLogEventActionChangePhoto' => 'The channel/supergroup\'s picture was changed',
    'object_channelAdminLogEventActionChangePhoto_param_prev_photo_type_ChatPhoto' => 'Previous photo',
    'object_channelAdminLogEventActionChangePhoto_param_new_photo_type_ChatPhoto' => 'New photo',
    'object_channelAdminLogEventActionToggleInvites' => 'Invites were enabled/disabled',
    'object_channelAdminLogEventActionToggleInvites_param_new_value_type_Bool' => 'New value',
    'object_channelAdminLogEventActionToggleSignatures' => 'Channel signatures were enabled/disabled',
    'object_channelAdminLogEventActionToggleSignatures_param_new_value_type_Bool' => 'New value',
    'object_channelAdminLogEventActionUpdatePinned' => 'A message was pinned',
    'object_channelAdminLogEventActionUpdatePinned_param_message_type_Message' => 'The message that was pinned',
    'object_channelAdminLogEventActionEditMessage' => 'A message was edited',
    'object_channelAdminLogEventActionEditMessage_param_prev_message_type_Message' => 'Old message',
    'object_channelAdminLogEventActionEditMessage_param_new_message_type_Message' => 'New message',
    'object_channelAdminLogEventActionDeleteMessage' => 'A message was deleted',
    'object_channelAdminLogEventActionDeleteMessage_param_message_type_Message' => 'The message that was deleted',
    'object_channelAdminLogEventActionParticipantJoin' => 'A user has joined the group (in the case of big groups, info of the user that has joined isn\'t shown)',
    'object_channelAdminLogEventActionParticipantLeave' => 'A user left the channel/supergroup (in the case of big groups, info of the user that has joined isn\'t shown)',
    'object_channelAdminLogEventActionParticipantInvite' => 'A user was invited to the group',
    'object_channelAdminLogEventActionParticipantInvite_param_participant_type_ChannelParticipant' => 'The user that was invited',
    'object_channelAdminLogEventActionParticipantToggleBan' => 'The banned [rights](https://core.telegram.org/api/rights) of a user were changed',
    'object_channelAdminLogEventActionParticipantToggleBan_param_prev_participant_type_ChannelParticipant' => 'Old banned rights of user',
    'object_channelAdminLogEventActionParticipantToggleBan_param_new_participant_type_ChannelParticipant' => 'New banned rights of user',
    'object_channelAdminLogEventActionParticipantToggleAdmin' => 'The admin [rights](https://core.telegram.org/api/rights) of a user were changed',
    'object_channelAdminLogEventActionParticipantToggleAdmin_param_prev_participant_type_ChannelParticipant' => 'Previous admin rights',
    'object_channelAdminLogEventActionParticipantToggleAdmin_param_new_participant_type_ChannelParticipant' => 'New admin rights',
    'object_channelAdminLogEventActionChangeStickerSet' => 'The supergroup\'s stickerset was changed',
    'object_channelAdminLogEventActionChangeStickerSet_param_prev_stickerset_type_InputStickerSet' => 'Previous stickerset',
    'object_channelAdminLogEventActionChangeStickerSet_param_new_stickerset_type_InputStickerSet' => 'New stickerset',
    'object_channelAdminLogEventActionTogglePreHistoryHidden' => 'The hidden prehistory setting was [changed](../methods/channels.togglePreHistoryHidden.md)',
    'object_channelAdminLogEventActionTogglePreHistoryHidden_param_new_value_type_Bool' => 'New value',
    'object_channelAdminLogEvent' => 'Admin log event',
    'object_channelAdminLogEvent_param_id_type_long' => 'Event ID',
    'object_channelAdminLogEvent_param_date_type_int' => 'Date',
    'object_channelAdminLogEvent_param_user_id_type_int' => 'User ID',
    'object_channelAdminLogEvent_param_action_type_ChannelAdminLogEventAction' => 'Action',
    'object_channels.adminLogResults' => 'Admin log events',
    'object_channels.adminLogResults_param_events_type_Vector t' => 'Events',
    'object_channels.adminLogResults_param_chats_type_Vector t' => 'Chats',
    'object_channels.adminLogResults_param_users_type_Vector t' => 'Users',
    'object_channelAdminLogEventsFilter' => 'Filter only certain admin log events',
    'object_channelAdminLogEventsFilter_param_join_type_true' => '[Join events](../constructors/channelAdminLogEventActionParticipantJoin.md)',
    'object_channelAdminLogEventsFilter_param_leave_type_true' => '[Leave events](../constructors/channelAdminLogEventActionParticipantLeave.md)',
    'object_channelAdminLogEventsFilter_param_invite_type_true' => '[Invite events](../constructors/channelAdminLogEventActionParticipantInvite.md)',
    'object_channelAdminLogEventsFilter_param_ban_type_true' => '[Ban events](../constructors/channelAdminLogEventActionParticipantToggleBan.md)',
    'object_channelAdminLogEventsFilter_param_unban_type_true' => '[Unban events](../constructors/channelAdminLogEventActionParticipantToggleBan.md)',
    'object_channelAdminLogEventsFilter_param_kick_type_true' => '[Kick events](../constructors/channelAdminLogEventActionParticipantToggleBan.md)',
    'object_channelAdminLogEventsFilter_param_unkick_type_true' => '[Unkick events](../constructors/channelAdminLogEventActionParticipantToggleBan.md)',
    'object_channelAdminLogEventsFilter_param_promote_type_true' => '[Admin promotion events](../constructors/channelAdminLogEventActionParticipantToggleAdmin.md)',
    'object_channelAdminLogEventsFilter_param_demote_type_true' => '[Admin demotion events](../constructors/channelAdminLogEventActionParticipantToggleAdmin.md)',
    'object_channelAdminLogEventsFilter_param_info_type_true' => 'Info change events (when [about](../constructors/channelAdminLogEventActionChangeAbout.md), [linked chat](../constructors/channelAdminLogEventActionChangeLinkedChat.md), [location](../constructors/channelAdminLogEventActionChangeLocation.md), [photo](../constructors/channelAdminLogEventActionChangePhoto.md), [stickerset](../constructors/channelAdminLogEventActionChangeStickerSet.md), [title](../constructors/channelAdminLogEventActionChangeTitle.md) or [username](../constructors/channelAdminLogEventActionChangeUsername.md) data of a channel gets modified)',
    'object_channelAdminLogEventsFilter_param_settings_type_true' => 'Settings change events ([invites](../constructors/channelAdminLogEventActionToggleInvites.md), [hidden prehistory](../constructors/channelAdminLogEventActionTogglePreHistoryHidden.md), [signatures](../constructors/channelAdminLogEventActionToggleSignatures.md), [default banned rights](../constructors/channelAdminLogEventActionDefaultBannedRights.md))',
    'object_channelAdminLogEventsFilter_param_pinned_type_true' => '[Message pin events](../constructors/channelAdminLogEventActionUpdatePinned.md)',
    'object_channelAdminLogEventsFilter_param_edit_type_true' => '[Message edit events](../constructors/channelAdminLogEventActionEditMessage.md)',
    'object_channelAdminLogEventsFilter_param_delete_type_true' => '[Message deletion events](../constructors/channelAdminLogEventActionDeleteMessage.md)',
    'object_popularContact' => 'Popular contact',
    'object_popularContact_param_client_id_type_long' => 'Contact identifier',
    'object_popularContact_param_importers_type_int' => 'How many people imported this contact',
    'object_cdnFileHash' => 'CDN file hash',
    'object_cdnFileHash_param_offset_type_int' => 'Offset',
    'object_cdnFileHash_param_limit_type_int' => 'Limit',
    'object_cdnFileHash_param_hash_type_bytes' => 'Hash',
    'object_messages.favedStickersNotModified' => 'No new favorited stickers were found',
    'object_messages.favedStickers' => 'Favorited stickers',
    'object_messages.favedStickers_param_hash_type_int' => '[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)',
    'object_messages.favedStickers_param_packs_type_Vector t' => 'Packs',
    'object_messages.favedStickers_param_stickers_type_Vector t' => 'Stickers',
    'object_recentMeUrlUnknown' => 'Unknown t.me url',
    'object_recentMeUrlUnknown_param_url_type_string' => 'URL',
    'object_recentMeUrlUser' => 'Recent t.me link to a user',
    'object_recentMeUrlUser_param_url_type_string' => 'URL',
    'object_recentMeUrlUser_param_user_id_type_int' => 'User ID',
    'object_recentMeUrlChat' => 'Recent t.me link to a chat',
    'object_recentMeUrlChat_param_url_type_string' => 'T.me URL',
    'object_recentMeUrlChat_param_chat_id_type_int' => 'Chat ID',
    'object_recentMeUrlChatInvite' => 'Recent t.me invite link to a chat',
    'object_recentMeUrlChatInvite_param_url_type_string' => 'T.me URL',
    'object_recentMeUrlChatInvite_param_chat_invite_type_ChatInvite' => 'Chat invitation',
    'object_recentMeUrlStickerSet' => 'Recent t.me stickerset installation URL',
    'object_recentMeUrlStickerSet_param_url_type_string' => 'T.me URL',
    'object_recentMeUrlStickerSet_param_set_type_StickerSetCovered' => 'Stickerset',
    'object_help.recentMeUrls' => 'Recent t.me URLs',
    'object_help.recentMeUrls_param_urls_type_Vector t' => 'URLs',
    'object_help.recentMeUrls_param_chats_type_Vector t' => 'Chats',
    'object_help.recentMeUrls_param_users_type_Vector t' => 'Users',
    'object_inputSingleMedia' => 'A single media in an album sent with [messages.sendMultiMedia](../methods/messages.sendMultiMedia.md).',
    'object_inputSingleMedia_param_media_type_InputMedia' => 'The media',
    'object_inputSingleMedia_param_message_type_string' => 'A caption for the media',
    'object_inputSingleMedia_param_entities_type_Vector t' => 'Entities',
    'object_webAuthorization' => 'Represents a bot logged in using the [Telegram login widget](https://core.telegram.org/widgets/login)',
    'object_webAuthorization_param_hash_type_long' => 'Authorization hash',
    'object_webAuthorization_param_bot_id_type_int' => 'Bot ID',
    'object_webAuthorization_param_domain_type_string' => 'The domain name of the website on which the user has logged in.',
    'object_webAuthorization_param_browser_type_string' => 'Browser user-agent',
    'object_webAuthorization_param_platform_type_string' => 'Platform',
    'object_webAuthorization_param_date_created_type_int' => 'When was the web session created',
    'object_webAuthorization_param_date_active_type_int' => 'When was the web session last active',
    'object_webAuthorization_param_ip_type_string' => 'IP address',
    'object_webAuthorization_param_region_type_string' => 'Region, determined from IP address',
    'object_account.webAuthorizations' => 'Web authorizations',
    'object_account.webAuthorizations_param_authorizations_type_Vector t' => 'Authorizations',
    'object_account.webAuthorizations_param_users_type_Vector t' => 'Users',
    'object_inputMessageID' => 'Message by ID',
    'object_inputMessageID_param_id_type_int' => 'Message ID',
    'object_inputMessageReplyTo' => 'Message to which the specified message replies to',
    'object_inputMessageReplyTo_param_id_type_int' => 'ID of the message that replies to the message we need',
    'object_inputMessagePinned' => 'Pinned message',
    'object_decryptedDataBlock' => 'Decrypted data block',
    'object_decryptedDataBlock_param_voice_call_id_type_int128' => 'Voice call ID',
    'object_decryptedDataBlock_param_in_seq_no_type_int' => 'In seq no',
    'object_decryptedDataBlock_param_out_seq_no_type_int' => 'Out seq no',
    'object_decryptedDataBlock_param_recent_received_mask_type_int' => 'Recent received mask',
    'object_decryptedDataBlock_param_proto_type_int' => 'Proto',
    'object_decryptedDataBlock_param_extra_type_string' => 'Extra',
    'object_decryptedDataBlock_param_raw_data_type_string' => 'Raw data',
    'object_simpleDataBlock' => 'Simple data block',
    'object_simpleDataBlock_param_raw_data_type_string' => 'Raw data',
    'object_decryptedMessage' => 'Contents of an encrypted message.',
    'object_decryptedMessage_param_message_type_string' => 'Message text',
    'object_decryptedMessage_param_media_type_DecryptedMessageMedia' => 'Media content',
    'object_decryptedMessageService' => 'Contents of an encrypted service message.',
    'object_decryptedMessageService_param_action_type_DecryptedMessageAction' => 'Action relevant to the service message',
    'object_decryptedMessageMediaEmpty' => 'Empty constructor, no media content.',
    'object_decryptedMessageMediaPhoto' => 'Photo attached to an encrypted message.',
    'object_decryptedMessageMediaPhoto_param_thumb_type_bytes' => 'Content of thumbnail file (JPEGfile, quality 55, set in a square 90x90)',
    'object_decryptedMessageMediaPhoto_param_thumb_w_type_int' => 'Thumbnail width',
    'object_decryptedMessageMediaPhoto_param_thumb_h_type_int' => 'Thumbnail height',
    'object_decryptedMessageMediaPhoto_param_w_type_int' => 'Photo width',
    'object_decryptedMessageMediaPhoto_param_h_type_int' => 'Photo height',
    'object_decryptedMessageMediaPhoto_param_size_type_int' => 'Size of the photo in bytes',
    'object_decryptedMessageMediaVideo' => 'Video attached to an encrypted message.',
    'object_decryptedMessageMediaVideo_param_thumb_type_bytes' => 'Content of thumbnail file (JPEG file, quality 55, set in a square 90x90)',
    'object_decryptedMessageMediaVideo_param_thumb_w_type_int' => 'Thumbnail width',
    'object_decryptedMessageMediaVideo_param_thumb_h_type_int' => 'Thumbnail height',
    'object_decryptedMessageMediaVideo_param_duration_type_int' => 'Duration of video in seconds',
    'object_decryptedMessageMediaVideo_param_w_type_int' => 'Image width',
    'object_decryptedMessageMediaVideo_param_h_type_int' => 'Image height',
    'object_decryptedMessageMediaVideo_param_size_type_int' => 'File size',
    'object_decryptedMessageMediaGeoPoint' => 'GeoPont attached to an encrypted message.',
    'object_decryptedMessageMediaGeoPoint_param_lat_type_double' => 'Latitude of point',
    'object_decryptedMessageMediaGeoPoint_param_long_type_double' => 'Longtitude of point',
    'object_decryptedMessageMediaContact' => 'Contact attached to an encrypted message.',
    'object_decryptedMessageMediaContact_param_phone_number_type_string' => 'Phone number',
    'object_decryptedMessageMediaContact_param_first_name_type_string' => 'Contact\'s first name',
    'object_decryptedMessageMediaContact_param_last_name_type_string' => 'Contact\'s last name',
    'object_decryptedMessageMediaContact_param_user_id_type_int' => 'Telegram User ID of signed-up contact',
    'object_decryptedMessageActionSetMessageTTL' => 'Setting of a message lifetime after reading.

Upon receiving such message the client shall start deleting of all messages of an encrypted chat **ttl\\_seconds** seconds after the messages were read by user.',
    'object_decryptedMessageActionSetMessageTTL_param_ttl_seconds_type_int' => 'Lifetime in seconds',
    'object_decryptedMessageMediaDocument' => 'Document attached to a message in a secret chat.',
    'object_decryptedMessageMediaDocument_param_thumb_type_bytes' => 'Thumbnail-file contents (JPEG-file, quality 55, set in a 90x90 square)',
    'object_decryptedMessageMediaDocument_param_thumb_w_type_int' => 'Thumbnail width',
    'object_decryptedMessageMediaDocument_param_thumb_h_type_int' => 'Thumbnail height',
    'object_decryptedMessageMediaDocument_param_file_name_type_string' => 'File name',
    'object_decryptedMessageMediaDocument_param_mime_type_type_string' => 'File MIME-type',
    'object_decryptedMessageMediaDocument_param_size_type_int' => 'Document size',
    'object_decryptedMessageMediaAudio' => 'Audio file attached to a secret chat message.',
    'object_decryptedMessageMediaAudio_param_duration_type_int' => 'Audio duration in seconds',
    'object_decryptedMessageMediaAudio_param_size_type_int' => 'File size',
    'object_decryptedMessageActionReadMessages' => 'Messages marked as read.',
    'object_decryptedMessageActionReadMessages_param_random_ids_type_Vector t' => 'Random IDs',
    'object_decryptedMessageActionDeleteMessages' => 'Deleted messages.',
    'object_decryptedMessageActionDeleteMessages_param_random_ids_type_Vector t' => 'Random IDs',
    'object_decryptedMessageActionScreenshotMessages' => 'A screenshot was taken.',
    'object_decryptedMessageActionScreenshotMessages_param_random_ids_type_Vector t' => 'Random IDs',
    'object_decryptedMessageActionFlushHistory' => 'The entire message history has been deleted.',
    'object_decryptedMessage_param_ttl_type_int' => 'Message lifetime. Has higher priority than [decryptedMessageActionSetMessageTTL](../constructors/decryptedMessageActionSetMessageTTL.md).<br>Parameter added in [Layer 17](https://core.telegram.org/api/layers#layer-17).',
    'object_decryptedMessageMediaVideo_param_mime_type_type_string' => 'MIME-type of the video file<br>Parameter added in [Layer 17](https://core.telegram.org/api/layers#layer-17).',
    'object_decryptedMessageMediaAudio_param_mime_type_type_string' => 'MIME-type of the audio file<br>Parameter added in [Layer 13](https://core.telegram.org/api/layers#layer-13).',
    'object_decryptedMessageLayer' => 'Sets the layer number for the contents of an encrypted message.',
    'object_decryptedMessageLayer_param_layer_type_int' => 'Layer number. Mimimal value - **17** (the layer in which the constructor was added).',
    'object_decryptedMessageLayer_param_in_seq_no_type_int' => '2x the number of messages in the sender\'s inbox (including deleted and service messages), incremented by 1 if current user was not the chat creator<br>Parameter added in [Layer 17](https://core.telegram.org/api/layers#layer-17).',
    'object_decryptedMessageLayer_param_out_seq_no_type_int' => '2x the number of messages in the recipient\'s inbox (including deleted and service messages), incremented by 1 if current user was the chat creator<br>Parameter added in [Layer 17](https://core.telegram.org/api/layers#layer-17).',
    'object_decryptedMessageLayer_param_message_type_DecryptedMessage' => 'The content of message itself',
    'object_decryptedMessageActionResend' => 'Request for the other party in a Secret Chat to automatically resend a contiguous range of previously sent messages, as explained in [Sequence number is Secret Chats](https://core.telegram.org/api/end-to-end/seq_no).',
    'object_decryptedMessageActionResend_param_start_seq_no_type_int' => '`out_seq_no` of the first message to be resent, with correct parity',
    'object_decryptedMessageActionResend_param_end_seq_no_type_int' => '`out_seq_no` of the last message to be resent, with same parity.',
    'object_decryptedMessageActionNotifyLayer' => 'A notification stating the API layer that is used by the client. You should use your current layer and take notice of the layer used on the other side of a conversation when sending messages.',
    'object_decryptedMessageActionNotifyLayer_param_layer_type_int' => 'Layer number, must be **17** or higher (this contructor was introduced in [Layer 17](https://core.telegram.org/api/layers#layer-17)).',
    'object_decryptedMessageActionTyping' => 'User is preparing a message: typing, recording, uploading, etc.',
    'object_decryptedMessageActionTyping_param_action_type_SendMessageAction' => 'Type of action',
    'object_decryptedMessageActionRequestKey' => 'Request rekeying, see [rekeying process](https://core.telegram.org/api/end-to-end/pfs)',
    'object_decryptedMessageActionRequestKey_param_exchange_id_type_long' => 'Exchange ID',
    'object_decryptedMessageActionRequestKey_param_g_a_type_bytes' => 'G\\_a, see [rekeying process](https://core.telegram.org/api/end-to-end/pfs)',
    'object_decryptedMessageActionAcceptKey' => 'Accept new key',
    'object_decryptedMessageActionAcceptKey_param_exchange_id_type_long' => 'Exchange ID',
    'object_decryptedMessageActionAcceptKey_param_g_b_type_bytes' => 'B parameter, see [rekeying process](https://core.telegram.org/api/end-to-end/pfs)',
    'object_decryptedMessageActionAcceptKey_param_key_fingerprint_type_long' => 'Key fingerprint, see [rekeying process](https://core.telegram.org/api/end-to-end/pfs)',
    'object_decryptedMessageActionAbortKey' => 'Abort rekeying',
    'object_decryptedMessageActionAbortKey_param_exchange_id_type_long' => 'Exchange ID',
    'object_decryptedMessageActionCommitKey' => 'Commit new key, see [rekeying process](https://core.telegram.org/api/end-to-end/pfs)',
    'object_decryptedMessageActionCommitKey_param_exchange_id_type_long' => 'Exchange ID, see [rekeying process](https://core.telegram.org/api/end-to-end/pfs)',
    'object_decryptedMessageActionCommitKey_param_key_fingerprint_type_long' => 'Key fingerprint, see [rekeying process](https://core.telegram.org/api/end-to-end/pfs)',
    'object_decryptedMessageActionNoop' => 'NOOP action',
    'object_decryptedMessageMediaExternalDocument' => 'Non-e2e documented forwarded from non-secret chat',
    'object_decryptedMessageMediaExternalDocument_param_id_type_long' => 'Document ID',
    'object_decryptedMessageMediaExternalDocument_param_access_hash_type_long' => 'Access hash',
    'object_decryptedMessageMediaExternalDocument_param_date_type_int' => 'Date',
    'object_decryptedMessageMediaExternalDocument_param_mime_type_type_string' => 'Mime type',
    'object_decryptedMessageMediaExternalDocument_param_size_type_int' => 'Size',
    'object_decryptedMessageMediaExternalDocument_param_thumb_type_PhotoSize' => 'Thumbnail',
    'object_decryptedMessageMediaExternalDocument_param_dc_id_type_int' => 'DC ID',
    'object_decryptedMessageMediaExternalDocument_param_attributes_type_Vector t' => 'Attributes',
    'object_decryptedMessage_param_entities_type_Vector t' => 'Entities',
    'object_decryptedMessage_param_via_bot_name_type_string' => 'Specifies the ID of the inline bot that generated the message (parameter added in layer 45)',
    'object_decryptedMessage_param_reply_to_random_id_type_long' => 'Random message ID of the message this message replies to (parameter added in layer 45)',
    'object_decryptedMessageMediaPhoto_param_caption_type_string' => 'Caption',
    'object_decryptedMessageMediaVideo_param_caption_type_string' => 'Caption',
    'object_decryptedMessageMediaDocument_param_attributes_type_Vector t' => 'Attributes',
    'object_decryptedMessageMediaDocument_param_caption_type_string' => 'Caption',
    'object_decryptedMessageMediaVenue' => 'Venue',
    'object_decryptedMessageMediaVenue_param_lat_type_double' => 'Latitude of venue',
    'object_decryptedMessageMediaVenue_param_long_type_double' => 'Longitude of venue',
    'object_decryptedMessageMediaVenue_param_title_type_string' => 'Venue name',
    'object_decryptedMessageMediaVenue_param_address_type_string' => 'Address',
    'object_decryptedMessageMediaVenue_param_provider_type_string' => 'Venue provider: currently only "foursquare" needs to be supported',
    'object_decryptedMessageMediaVenue_param_venue_id_type_string' => 'Venue ID in the provider\'s database',
    'object_decryptedMessageMediaWebPage' => 'Webpage preview',
    'object_decryptedMessageMediaWebPage_param_url_type_string' => 'URL of webpage',
    'object_decryptedMessage_param_grouped_id_type_long' => 'Random group ID, assigned by the author of message.<br>Multiple encrypted messages with a photo attached and with the same group ID indicate an album (parameter added in layer 45)',
    'object_inputPeerContact' => 'Peer contact',
    'object_inputPeerContact_param_user_id_type_int' => 'User ID',
    'object_inputPeerForeign' => 'Peer foreign',
    'object_inputPeerForeign_param_user_id_type_int' => 'User ID',
    'object_inputPeerForeign_param_access_hash_type_long' => 'Access hash',
    'object_inputUserContact' => 'User contact',
    'object_inputUserContact_param_user_id_type_int' => 'User ID',
    'object_inputUserForeign' => 'User foreign',
    'object_inputUserForeign_param_user_id_type_int' => 'User ID',
    'object_inputUserForeign_param_access_hash_type_long' => 'Access hash',
    'object_inputMediaUploadedVideo' => 'Media uploaded video',
    'object_inputMediaUploadedVideo_param_file_type_InputFile' => 'File',
    'object_inputMediaUploadedVideo_param_duration_type_int' => 'Duration',
    'object_inputMediaUploadedVideo_param_w_type_int' => 'Width',
    'object_inputMediaUploadedVideo_param_h_type_int' => 'Height',
    'object_inputMediaUploadedVideo_param_mime_type_type_string' => 'Mime type',
    'object_inputMediaUploadedThumbVideo' => 'Media uploaded thumb video',
    'object_inputMediaUploadedThumbVideo_param_file_type_InputFile' => 'File',
    'object_inputMediaUploadedThumbVideo_param_thumb_type_InputFile' => 'Thumbnail',
    'object_inputMediaUploadedThumbVideo_param_duration_type_int' => 'Duration',
    'object_inputMediaUploadedThumbVideo_param_w_type_int' => 'Width',
    'object_inputMediaUploadedThumbVideo_param_h_type_int' => 'Height',
    'object_inputMediaUploadedThumbVideo_param_mime_type_type_string' => 'Mime type',
    'object_inputMediaVideo' => 'Media video',
    'object_inputMediaVideo_param_id_type_InputVideo' => 'ID',
    'object_inputChatUploadedPhoto_param_crop_type_InputPhotoCrop' => 'Crop',
    'object_inputChatPhoto_param_crop_type_InputPhotoCrop' => 'Crop',
    'object_inputVideoEmpty' => 'Empty input video',
    'object_inputVideo' => 'Video',
    'object_inputVideo_param_id_type_long' => 'ID',
    'object_inputVideo_param_access_hash_type_long' => 'Access hash',
    'object_inputVideoFileLocation' => 'Video file location',
    'object_inputVideoFileLocation_param_id_type_long' => 'ID',
    'object_inputVideoFileLocation_param_access_hash_type_long' => 'Access hash',
    'object_inputPhotoCropAuto' => 'Photo crop auto',
    'object_inputPhotoCrop' => 'Photo crop',
    'object_inputPhotoCrop_param_crop_left_type_double' => 'Crop left',
    'object_inputPhotoCrop_param_crop_top_type_double' => 'Crop top',
    'object_inputPhotoCrop_param_crop_width_type_double' => 'Crop width',
    'object_userSelf' => 'User self',
    'object_userSelf_param_id_type_int' => 'ID',
    'object_userSelf_param_first_name_type_string' => 'First name',
    'object_userSelf_param_last_name_type_string' => 'Last name',
    'object_userSelf_param_username_type_string' => 'Username',
    'object_userSelf_param_phone_type_string' => 'Phone',
    'object_userSelf_param_photo_type_UserProfilePhoto' => 'Photo',
    'object_userSelf_param_status_type_UserStatus' => 'Status',
    'object_userSelf_param_inactive_type_Bool' => 'Inactive?',
    'object_userContact' => 'User contact',
    'object_userContact_param_id_type_int' => 'ID',
    'object_userContact_param_first_name_type_string' => 'First name',
    'object_userContact_param_last_name_type_string' => 'Last name',
    'object_userContact_param_username_type_string' => 'Username',
    'object_userContact_param_access_hash_type_long' => 'Access hash',
    'object_userContact_param_phone_type_string' => 'Phone',
    'object_userContact_param_photo_type_UserProfilePhoto' => 'Photo',
    'object_userContact_param_status_type_UserStatus' => 'Status',
    'object_userRequest' => 'User request',
    'object_userRequest_param_id_type_int' => 'ID',
    'object_userRequest_param_first_name_type_string' => 'First name',
    'object_userRequest_param_last_name_type_string' => 'Last name',
    'object_userRequest_param_username_type_string' => 'Username',
    'object_userRequest_param_access_hash_type_long' => 'Access hash',
    'object_userRequest_param_phone_type_string' => 'Phone',
    'object_userRequest_param_photo_type_UserProfilePhoto' => 'Photo',
    'object_userRequest_param_status_type_UserStatus' => 'Status',
    'object_userForeign' => 'User foreign',
    'object_userForeign_param_id_type_int' => 'ID',
    'object_userForeign_param_first_name_type_string' => 'First name',
    'object_userForeign_param_last_name_type_string' => 'Last name',
    'object_userForeign_param_username_type_string' => 'Username',
    'object_userForeign_param_access_hash_type_long' => 'Access hash',
    'object_userForeign_param_photo_type_UserProfilePhoto' => 'Photo',
    'object_userForeign_param_status_type_UserStatus' => 'Status',
    'object_userDeleted' => 'User deleted',
    'object_userDeleted_param_id_type_int' => 'ID',
    'object_userDeleted_param_first_name_type_string' => 'First name',
    'object_userDeleted_param_last_name_type_string' => 'Last name',
    'object_userDeleted_param_username_type_string' => 'Username',
    'object_userStatusEmpty' => 'User status has not been set yet.',
    'object_userStatusOnline' => 'Online status of the user.',
    'object_userStatusOnline_param_expires_type_int' => 'Time to expiration of the current online status',
    'object_userStatusOffline' => 'The user\'s offline status.',
    'object_userStatusOffline_param_was_online_type_int' => 'Time the user was last seen online',
    'object_chat_param_left_type_Bool' => 'Left?',
    'object_chatForbidden_param_date_type_int' => 'Date',
    'object_chatParticipants_param_admin_id_type_int' => 'Admin ID',
    'object_messageForwarded' => 'Message forwarded',
    'object_messageForwarded_param_id_type_int' => 'ID',
    'object_messageForwarded_param_fwd_from_id_type_int' => 'Forwarded from ID',
    'object_messageForwarded_param_fwd_date_type_int' => 'Forwarded date',
    'object_messageForwarded_param_from_id_type_int' => 'From ID',
    'object_messageForwarded_param_to_id_type_Peer' => 'To ID',
    'object_messageForwarded_param_date_type_int' => 'Date',
    'object_messageForwarded_param_message_type_string' => 'Message',
    'object_messageForwarded_param_media_type_MessageMedia' => 'Media',
    'object_messageMediaVideo' => 'Message media video',
    'object_messageMediaVideo_param_video_type_Video' => 'Video',
    'object_messageMediaUnsupported_param_bytes_type_bytes' => 'Bytes',
    'object_messageActionChatAddUser_param_user_id_type_int' => 'User ID',
    'object_photo_param_user_id_type_int' => 'User ID',
    'object_photo_param_caption_type_string' => 'Caption',
    'object_photo_param_geo_type_GeoPoint' => 'Geo',
    'object_videoEmpty' => 'Empty video',
    'object_videoEmpty_param_id_type_long' => 'ID',
    'object_video' => 'Video',
    'object_video_param_id_type_long' => 'ID',
    'object_video_param_access_hash_type_long' => 'Access hash',
    'object_video_param_user_id_type_int' => 'User ID',
    'object_video_param_date_type_int' => 'Date',
    'object_video_param_caption_type_string' => 'Caption',
    'object_video_param_duration_type_int' => 'Duration',
    'object_video_param_mime_type_type_string' => 'Mime type',
    'object_video_param_size_type_int' => 'Size',
    'object_video_param_thumb_type_PhotoSize' => 'Thumbnail',
    'object_video_param_dc_id_type_int' => 'DC ID',
    'object_video_param_w_type_int' => 'Width',
    'object_video_param_h_type_int' => 'Height',
    'object_auth.checkedPhone_param_phone_invited_type_Bool' => 'Phone invited?',
    'object_auth.sentCode_param_phone_registered_type_Bool' => 'Phone registered?',
    'object_auth.sentCode_param_send_call_timeout_type_int' => 'Send call timeout',
    'object_auth.sentCode_param_is_password_type_Bool' => 'Is password?',
    'object_auth.authorization_param_expires_type_int' => 'Expiration date',
    'object_inputPeerNotifySettings_param_show_previews_type_Bool' => 'If the text of the message shall be displayed in notification',
    'object_inputPeerNotifySettings_param_events_mask_type_int' => 'Events mask',
    'object_peerNotifySettings_param_show_previews_type_Bool' => 'Display text in notifications',
    'object_peerNotifySettings_param_events_mask_type_int' => 'Events mask',
    'object_userFull_param_blocked_type_Bool' => 'Blocked?',
    'object_userFull_param_real_first_name_type_string' => 'Real first name',
    'object_userFull_param_real_last_name_type_string' => 'Real last name',
    'object_contactSuggested' => 'Contact suggested',
    'object_contactSuggested_param_user_id_type_int' => 'User ID',
    'object_contactSuggested_param_mutual_contacts_type_int' => 'Mutual contacts',
    'object_contactStatus_param_expires_type_int' => 'Expires',
    'object_contacts.foreignLinkUnknown' => 'Foreign link unknown',
    'object_contacts.foreignLinkRequested' => 'Foreign link requested',
    'object_contacts.foreignLinkRequested_param_has_phone_type_Bool' => 'Has phone?',
    'object_contacts.foreignLinkMutual' => 'Foreign link mutual',
    'object_contacts.myLinkEmpty' => 'Empty my link',
    'object_contacts.myLinkRequested' => 'My link requested',
    'object_contacts.myLinkRequested_param_contact_type_Bool' => 'Contact?',
    'object_contacts.myLinkContact' => 'My link contact',
    'object_contacts.link_param_my_link_type_contacts.MyLink' => 'My link',
    'object_contacts.link_param_foreign_link_type_contacts.ForeignLink' => 'Foreign link',
    'object_contacts.suggested' => 'Suggested',
    'object_contacts.suggested_param_results_type_Vector t' => 'Results',
    'object_contacts.suggested_param_users_type_Vector t' => 'Users',
    'object_messages.statedMessages' => 'Stated messages',
    'object_messages.statedMessages_param_messages_type_Vector t' => 'Messages',
    'object_messages.statedMessages_param_chats_type_Vector t' => 'Chats',
    'object_messages.statedMessages_param_users_type_Vector t' => 'Users',
    'object_messages.statedMessages_param_pts_type_int' => 'Pts',
    'object_messages.statedMessages_param_seq_type_int' => 'Seq',
    'object_messages.statedMessage' => 'Stated message',
    'object_messages.statedMessage_param_message_type_Message' => 'Message',
    'object_messages.statedMessage_param_chats_type_Vector t' => 'Chats',
    'object_messages.statedMessage_param_users_type_Vector t' => 'Users',
    'object_messages.statedMessage_param_pts_type_int' => 'Pts',
    'object_messages.statedMessage_param_seq_type_int' => 'Seq',
    'object_messages.sentMessage' => 'Sent message',
    'object_messages.sentMessage_param_id_type_int' => 'ID',
    'object_messages.sentMessage_param_date_type_int' => 'Date',
    'object_messages.sentMessage_param_pts_type_int' => 'Pts',
    'object_messages.sentMessage_param_seq_type_int' => 'Seq',
    'object_messages.chats_param_users_type_Vector t' => 'Users',
    'object_messages.affectedHistory_param_seq_type_int' => 'Seq',
    'object_inputMessagesFilterPhotoVideoDocuments' => 'Messages filter photo video documents',
    'object_inputMessagesFilterAudio' => 'Messages filter audio',
    'object_inputMessagesFilterAudioDocuments' => 'Messages filter audio documents',
    'object_updateReadMessages' => 'Update read messages',
    'object_updateReadMessages_param_messages_type_Vector t' => 'Messages',
    'object_updateReadMessages_param_pts_type_int' => 'Pts',
    'object_updateUserStatus' => 'Contact status update.',
    'object_updateUserStatus_param_user_id_type_int' => 'User identifier',
    'object_updateUserStatus_param_status_type_UserStatus' => 'New status',
    'object_updateContactLink_param_my_link_type_contacts.MyLink' => 'My link',
    'object_updateContactLink_param_foreign_link_type_contacts.ForeignLink' => 'Foreign link',
    'object_updateNewAuthorization' => 'Update new authorization',
    'object_updateNewAuthorization_param_auth_key_id_type_long' => 'Auth key ID',
    'object_updateNewAuthorization_param_date_type_int' => 'Date',
    'object_updateNewAuthorization_param_device_type_string' => 'Device',
    'object_updateNewAuthorization_param_location_type_string' => 'Location',
    'object_updateShortMessage_param_from_id_type_int' => 'From ID',
    'object_updateShortMessage_param_seq_type_int' => 'Seq',
    'object_updateShortChatMessage_param_seq_type_int' => 'Seq',
    'object_dcOption_param_hostname_type_string' => 'Hostname',
    'object_config_param_broadcast_size_max_type_int' => 'Broadcast size max',
    'object_messages.statedMessagesLinks' => 'Stated messages links',
    'object_messages.statedMessagesLinks_param_messages_type_Vector t' => 'Messages',
    'object_messages.statedMessagesLinks_param_chats_type_Vector t' => 'Chats',
    'object_messages.statedMessagesLinks_param_users_type_Vector t' => 'Users',
    'object_messages.statedMessagesLinks_param_links_type_Vector t' => 'Links',
    'object_messages.statedMessagesLinks_param_pts_type_int' => 'Pts',
    'object_messages.statedMessagesLinks_param_seq_type_int' => 'Seq',
    'object_messages.statedMessageLink' => 'Stated message link',
    'object_messages.statedMessageLink_param_message_type_Message' => 'Message',
    'object_messages.statedMessageLink_param_chats_type_Vector t' => 'Chats',
    'object_messages.statedMessageLink_param_users_type_Vector t' => 'Users',
    'object_messages.statedMessageLink_param_links_type_Vector t' => 'Links',
    'object_messages.statedMessageLink_param_pts_type_int' => 'Pts',
    'object_messages.statedMessageLink_param_seq_type_int' => 'Seq',
    'object_messages.sentMessageLink' => 'Sent message link',
    'object_messages.sentMessageLink_param_id_type_int' => 'ID',
    'object_messages.sentMessageLink_param_date_type_int' => 'Date',
    'object_messages.sentMessageLink_param_pts_type_int' => 'Pts',
    'object_messages.sentMessageLink_param_seq_type_int' => 'Seq',
    'object_messages.sentMessageLink_param_links_type_Vector t' => 'Links',
    'object_inputMediaUploadedAudio' => 'Media uploaded audio',
    'object_inputMediaUploadedAudio_param_file_type_InputFile' => 'File',
    'object_inputMediaUploadedAudio_param_duration_type_int' => 'Duration',
    'object_inputMediaUploadedAudio_param_mime_type_type_string' => 'Mime type',
    'object_inputMediaAudio' => 'Media audio',
    'object_inputMediaAudio_param_id_type_InputAudio' => 'ID',
    'object_inputMediaUploadedDocument_param_file_name_type_string' => 'File name',
    'object_inputMediaUploadedThumbDocument' => 'Media uploaded thumb document',
    'object_inputMediaUploadedThumbDocument_param_file_type_InputFile' => 'File',
    'object_inputMediaUploadedThumbDocument_param_thumb_type_InputFile' => 'Thumbnail',
    'object_inputMediaUploadedThumbDocument_param_file_name_type_string' => 'File name',
    'object_inputMediaUploadedThumbDocument_param_mime_type_type_string' => 'Mime type',
    'object_messageMediaAudio' => 'Message media audio',
    'object_messageMediaAudio_param_audio_type_Audio' => 'Audio',
    'object_inputAudioEmpty' => 'Empty input audio',
    'object_inputAudio' => 'Audio',
    'object_inputAudio_param_id_type_long' => 'ID',
    'object_inputAudio_param_access_hash_type_long' => 'Access hash',
    'object_inputAudioFileLocation' => 'Audio file location',
    'object_inputAudioFileLocation_param_id_type_long' => 'ID',
    'object_inputAudioFileLocation_param_access_hash_type_long' => 'Access hash',
    'object_audioEmpty' => 'Empty audio',
    'object_audioEmpty_param_id_type_long' => 'ID',
    'object_audio' => 'Audio',
    'object_audio_param_id_type_long' => 'ID',
    'object_audio_param_access_hash_type_long' => 'Access hash',
    'object_audio_param_user_id_type_int' => 'User ID',
    'object_audio_param_date_type_int' => 'Date',
    'object_audio_param_duration_type_int' => 'Duration',
    'object_audio_param_mime_type_type_string' => 'Mime type',
    'object_audio_param_size_type_int' => 'Size',
    'object_audio_param_dc_id_type_int' => 'DC ID',
    'object_document_param_user_id_type_int' => 'User ID',
    'object_document_param_file_name_type_string' => 'File name',
    'object_auth.sentAppCode' => 'Sent app code',
    'object_auth.sentAppCode_param_phone_registered_type_Bool' => 'Phone registered?',
    'object_auth.sentAppCode_param_phone_code_hash_type_string' => 'Phone code hash',
    'object_auth.sentAppCode_param_send_call_timeout_type_int' => 'Send call timeout',
    'object_auth.sentAppCode_param_is_password_type_Bool' => 'Is password?',
    'object_contactFound' => 'Contact found',
    'object_contactFound_param_user_id_type_int' => 'User ID',
    'object_updateServiceNotification_param_popup_type_Bool' => 'Popup?',
    'object_inputMediaUploadedThumbDocument_param_attributes_type_Vector t' => 'Attributes',
    'object_userStatusRecently' => 'Online status: last seen recently',
    'object_userStatusLastWeek' => 'Online status: last seen last week',
    'object_userStatusLastMonth' => 'Online status: last seen last month',
    'object_account.sentChangePhoneCode' => 'Sent change phone code',
    'object_account.sentChangePhoneCode_param_phone_code_hash_type_string' => 'Phone code hash',
    'object_account.sentChangePhoneCode_param_send_call_timeout_type_int' => 'Send call timeout',
    'object_messages.allStickers_param_hash_type_string' => 'Hash',
    'object_messages.allStickers_param_packs_type_Vector t' => 'Packs',
    'object_messages.allStickers_param_documents_type_Vector t' => 'Documents',
    'object_message_param_fwd_from_id_type_int' => 'Forwarded from ID',
    'object_message_param_fwd_date_type_int' => 'Forwarded date',
    'object_chatLocated' => 'Chat located',
    'object_chatLocated_param_chat_id_type_int' => 'Chat ID',
    'object_chatLocated_param_distance_type_int' => 'Distance',
    'object_messages.messageEmpty' => 'Empty message',
    'object_messages.statedMessages_param_pts_count_type_int' => 'Pts count',
    'object_messages.statedMessage_param_pts_count_type_int' => 'Pts count',
    'object_messages.sentMessage_param_pts_count_type_int' => 'Pts count',
    'object_updateReadMessages_param_pts_count_type_int' => 'Pts count',
    'object_updateShortMessage_param_fwd_from_id_type_int' => 'Fwd from ID',
    'object_updateShortMessage_param_fwd_date_type_int' => 'Fwd date',
    'object_updateShortChatMessage_param_fwd_from_id_type_int' => 'Fwd from ID',
    'object_updateShortChatMessage_param_fwd_date_type_int' => 'Fwd date',
    'object_messages.statedMessagesLinks_param_pts_count_type_int' => 'Pts count',
    'object_messages.statedMessageLink_param_pts_count_type_int' => 'Pts count',
    'object_messages.sentMessageLink_param_pts_count_type_int' => 'Pts count',
    'object_inputGeoChat' => 'Geo chat',
    'object_inputGeoChat_param_chat_id_type_int' => 'Chat ID',
    'object_inputGeoChat_param_access_hash_type_long' => 'Access hash',
    'object_inputNotifyGeoChatPeer' => 'Notify geo chat peer',
    'object_inputNotifyGeoChatPeer_param_peer_type_InputGeoChat' => 'Peer',
    'object_geoChat' => 'Geo chat',
    'object_geoChat_param_id_type_int' => 'ID',
    'object_geoChat_param_access_hash_type_long' => 'Access hash',
    'object_geoChat_param_title_type_string' => 'Title',
    'object_geoChat_param_address_type_string' => 'Address',
    'object_geoChat_param_venue_type_string' => 'Venue',
    'object_geoChat_param_geo_type_GeoPoint' => 'Geo',
    'object_geoChat_param_photo_type_ChatPhoto' => 'Photo',
    'object_geoChat_param_participants_count_type_int' => 'Participants count',
    'object_geoChat_param_date_type_int' => 'Date',
    'object_geoChat_param_checked_in_type_Bool' => 'Checked in?',
    'object_geoChat_param_version_type_int' => 'Version',
    'object_geoChatMessageEmpty' => 'Empty geo chat message',
    'object_geoChatMessageEmpty_param_chat_id_type_int' => 'Chat ID',
    'object_geoChatMessageEmpty_param_id_type_int' => 'ID',
    'object_geoChatMessage' => 'Geo chat message',
    'object_geoChatMessage_param_chat_id_type_int' => 'Chat ID',
    'object_geoChatMessage_param_id_type_int' => 'ID',
    'object_geoChatMessage_param_from_id_type_int' => 'From ID',
    'object_geoChatMessage_param_date_type_int' => 'Date',
    'object_geoChatMessage_param_message_type_string' => 'Message',
    'object_geoChatMessage_param_media_type_MessageMedia' => 'Media',
    'object_geoChatMessageService' => 'Geo chat message service',
    'object_geoChatMessageService_param_chat_id_type_int' => 'Chat ID',
    'object_geoChatMessageService_param_id_type_int' => 'ID',
    'object_geoChatMessageService_param_from_id_type_int' => 'From ID',
    'object_geoChatMessageService_param_date_type_int' => 'Date',
    'object_geoChatMessageService_param_action_type_MessageAction' => 'Action',
    'object_geochats.statedMessage' => 'Stated message',
    'object_geochats.statedMessage_param_message_type_GeoChatMessage' => 'Message',
    'object_geochats.statedMessage_param_chats_type_Vector t' => 'Chats',
    'object_geochats.statedMessage_param_users_type_Vector t' => 'Users',
    'object_geochats.statedMessage_param_seq_type_int' => 'Seq',
    'object_geochats.located' => 'Located',
    'object_geochats.located_param_results_type_Vector t' => 'Results',
    'object_geochats.located_param_messages_type_Vector t' => 'Messages',
    'object_geochats.located_param_chats_type_Vector t' => 'Chats',
    'object_geochats.located_param_users_type_Vector t' => 'Users',
    'object_geochats.messages' => 'Messages',
    'object_geochats.messages_param_messages_type_Vector t' => 'Messages',
    'object_geochats.messages_param_chats_type_Vector t' => 'Chats',
    'object_geochats.messages_param_users_type_Vector t' => 'Users',
    'object_geochats.messagesSlice' => 'Messages slice',
    'object_geochats.messagesSlice_param_count_type_int' => 'Count',
    'object_geochats.messagesSlice_param_messages_type_Vector t' => 'Messages',
    'object_geochats.messagesSlice_param_chats_type_Vector t' => 'Chats',
    'object_geochats.messagesSlice_param_users_type_Vector t' => 'Users',
    'object_messageActionGeoChatCreate' => 'Message action geo chat create',
    'object_messageActionGeoChatCreate_param_title_type_string' => 'Title',
    'object_messageActionGeoChatCreate_param_address_type_string' => 'Address',
    'object_messageActionGeoChatCheckin' => 'Message action geo chat checkin',
    'object_updateNewGeoChatMessage' => 'Update new geo chat message',
    'object_updateNewGeoChatMessage_param_message_type_GeoChatMessage' => 'Message',
    'object_messages.sentMessage_param_media_type_MessageMedia' => 'Media',
    'object_messages.sentMessageLink_param_media_type_MessageMedia' => 'Media',
    'object_inputMediaUploadedPhoto_param_caption_type_string' => 'Caption',
    'object_inputMediaPhoto_param_caption_type_string' => 'Caption',
    'object_inputMediaUploadedVideo_param_caption_type_string' => 'Caption',
    'object_inputMediaUploadedThumbVideo_param_caption_type_string' => 'Caption',
    'object_inputMediaVideo_param_caption_type_string' => 'Caption',
    'object_messageMediaPhoto_param_caption_type_string' => 'Caption',
    'object_messageMediaVideo_param_caption_type_string' => 'Caption',
    'object_botCommand' => 'Describes a bot command that can be used in a chat',
    'object_botCommand_param_command_type_string' => '`/command` name',
    'object_botCommand_param_description_type_string' => 'Description of the command',
    'object_botInfoEmpty' => 'Empty bot info',
    'object_botInfo_param_version_type_int' => 'Version',
    'object_botInfo_param_share_text_type_string' => 'Share text',
    'object_help.appChangelogEmpty' => 'Empty app changelog',
    'object_help.appChangelog' => 'App changelog',
    'object_help.appChangelog_param_text_type_string' => 'Text',
    'object_message_param_fwd_from_id_type_Peer' => 'Forwarded from ID',
    'object_updateShortMessage_param_fwd_from_id_type_Peer' => 'Fwd from ID',
    'object_updateShortChatMessage_param_fwd_from_id_type_Peer' => 'Fwd from ID',
    'object_channelFull_param_unread_important_count_type_int' => 'Unread important count',
    'object_dialogChannel' => 'Dialog channel',
    'object_dialogChannel_param_peer_type_Peer' => 'Peer',
    'object_dialogChannel_param_top_message_type_int' => 'Top message',
    'object_dialogChannel_param_top_important_message_type_int' => 'Top important message',
    'object_dialogChannel_param_read_inbox_max_id_type_int' => 'Read inbox max ID',
    'object_dialogChannel_param_unread_count_type_int' => 'Unread count',
    'object_dialogChannel_param_unread_important_count_type_int' => 'Unread important count',
    'object_dialogChannel_param_notify_settings_type_PeerNotifySettings' => 'Notify settings',
    'object_dialogChannel_param_pts_type_int' => 'Pts',
    'object_messageGroup' => 'Message group',
    'object_messageGroup_param_min_id_type_int' => 'Min ID',
    'object_messageGroup_param_max_id_type_int' => 'Max ID',
    'object_messageGroup_param_count_type_int' => 'Count',
    'object_messageGroup_param_date_type_int' => 'Date',
    'object_messages.channelMessages_param_collapsed_type_Vector t' => 'Collapsed',
    'object_updateChannelGroup' => 'Update channel group',
    'object_updateChannelGroup_param_channel_id_type_int' => 'Channel ID',
    'object_updateChannelGroup_param_group_type_MessageGroup' => 'Group',
    'object_updates.channelDifferenceTooLong_param_top_important_message_type_int' => 'Top important message',
    'object_updates.channelDifferenceTooLong_param_unread_important_count_type_int' => 'Unread important count',
    'object_channelMessagesFilterCollapsed' => 'Channel messages filter collapsed',
    'object_channelParticipantModerator' => 'Channel participant moderator',
    'object_channelParticipantModerator_param_user_id_type_int' => 'User ID',
    'object_channelParticipantModerator_param_inviter_id_type_int' => 'Inviter ID',
    'object_channelParticipantModerator_param_date_type_int' => 'Date',
    'object_channelParticipantEditor' => 'Channel participant editor',
    'object_channelParticipantEditor_param_user_id_type_int' => 'User ID',
    'object_channelParticipantEditor_param_inviter_id_type_int' => 'Inviter ID',
    'object_channelParticipantEditor_param_date_type_int' => 'Date',
    'object_channelParticipantKicked' => 'Channel participant kicked',
    'object_channelParticipantKicked_param_user_id_type_int' => 'User ID',
    'object_channelParticipantKicked_param_kicked_by_type_int' => 'Kicked by',
    'object_channelParticipantKicked_param_date_type_int' => 'Date',
    'object_channelRoleEmpty' => 'Empty channel role',
    'object_channelRoleModerator' => 'Channel role moderator',
    'object_channelRoleEditor' => 'Channel role editor',
    'object_inputChatEmpty' => 'Empty input chat',
    'object_inputChat' => 'Chat',
    'object_inputChat_param_chat_id_type_int' => 'Chat ID',
    'object_updateReadChannelInbox_param_peer_type_Peer' => 'Peer',
    'object_updateDeleteChannelMessages_param_peer_type_Peer' => 'Peer',
    'object_message_param_unread_type_true' => 'Unread?',
    'object_messageService_param_unread_type_true' => 'Unread?',
    'object_updateShortMessage_param_unread_type_true' => 'Unread?',
    'object_updateShortChatMessage_param_unread_type_true' => 'Unread?',
    'object_stickerSet_param_disabled_type_true' => 'Disabled?',
    'object_updateShortSentMessage_param_unread_type_true' => 'Unread?',
    'object_channel_param_kicked_type_true' => 'Kicked?',
    'object_channel_param_moderator_type_true' => 'Moderator?',
    'object_channelMessagesFilter_param_important_only_type_true' => 'Important only?',
    'object_messageActionChatDeactivate' => 'Message action chat deactivate',
    'object_messageActionChatActivate' => 'Message action chat activate',
    'object_user_param_restiction_reason_type_string' => 'Restiction reason',
    'object_channel_param_restiction_reason_type_string' => 'Restiction reason',
    'object_webPageExternal' => 'Web page external',
    'object_webPageExternal_param_url_type_string' => 'URL',
    'object_webPageExternal_param_display_url_type_string' => 'Display URL',
    'object_webPageExternal_param_type_type_string' => 'Type',
    'object_webPageExternal_param_title_type_string' => 'Title',
    'object_webPageExternal_param_description_type_string' => 'Description',
    'object_webPageExternal_param_thumb_url_type_string' => 'Thumbnail URL',
    'object_webPageExternal_param_content_url_type_string' => 'Content URL',
    'object_webPageExternal_param_w_type_int' => 'Width',
    'object_webPageExternal_param_h_type_int' => 'Height',
    'object_webPageExternal_param_duration_type_int' => 'Duration',
    'object_foundGif_param_webpage_type_WebPage' => 'Webpage',
    'object_inputMediaUploadedDocument_param_caption_type_string' => 'Caption',
    'object_inputMediaUploadedThumbDocument_param_caption_type_string' => 'Caption',
    'object_inputMediaDocument_param_caption_type_string' => 'Caption',
    'object_messageMediaDocument_param_caption_type_string' => 'Caption',
    'object_inputBotInlineMessageMediaAuto_param_caption_type_string' => 'Caption',
    'object_botInlineMessageMediaAuto_param_caption_type_string' => 'Caption',
    'object_botInlineMediaResultDocument' => 'Bot inline media result document',
    'object_botInlineMediaResultDocument_param_id_type_string' => 'ID',
    'object_botInlineMediaResultDocument_param_type_type_string' => 'Type',
    'object_botInlineMediaResultDocument_param_document_type_Document' => 'Document',
    'object_botInlineMediaResultDocument_param_sendMessage_type_BotInlineMessage' => 'Send message',
    'object_botInlineMediaResultPhoto' => 'Bot inline media result photo',
    'object_botInlineMediaResultPhoto_param_id_type_string' => 'ID',
    'object_botInlineMediaResultPhoto_param_type_type_string' => 'Type',
    'object_botInlineMediaResultPhoto_param_photo_type_Photo' => 'Photo',
    'object_botInlineMediaResultPhoto_param_sendMessage_type_BotInlineMessage' => 'Send message',
    'object_inputMediaVideo_param_video_type_InputVideo' => 'Video',
    'object_inputMediaAudio_param_audio_type_InputAudio' => 'Audio',
    'object_inputMediaDocument_param_document_id_type_InputDocument' => 'Document ID',
    'object_inputGeoPoint_param_latitude_type_double' => 'Latitude',
    'object_inputGeoPoint_param_longitude_type_double' => 'Longitude',
    'object_geoPoint_param_longitude_type_double' => 'Longitude',
    'object_geoPoint_param_latitude_type_double' => 'Latitude',
    'object_updateNewEncryptedMessage_param_encr_message_type_EncryptedMessage' => 'Encr message',
    'object_updateEncryption_param_encr_chat_type_EncryptedChat' => 'Encr chat',
    'object_updateNotifySettings_param_notify_peer_type_NotifyPeer' => 'Notify peer',
    'object_updateServiceNotification_param_message_text_type_string' => 'Message text',
    'object_updateNewChannelMessage_param_channel_pts_type_int' => 'Channel pts',
    'object_updateNewChannelMessage_param_channel_pts_count_type_int' => 'Channel pts count',
    'object_updateDeleteChannelMessages_param_channel_pts_type_int' => 'Channel pts',
    'object_updateDeleteChannelMessages_param_channel_pts_count_type_int' => 'Channel pts count',
    'object_updates.channelDifferenceEmpty_param_channel_pts_type_int' => 'Channel pts',
    'object_updates.channelDifferenceTooLong_param_channel_pts_type_int' => 'Channel pts',
    'object_updates.channelDifference_param_channel_pts_type_int' => 'Channel pts',
    'object_privacyKeyChatInvite' => 'Whether the user can be invited to chats',
    'object_inputMediaUploadedThumbDocument_param_stickers_type_Vector t' => 'Stickers',
    'object_inputMediaPhotoExternal_param_caption_type_string' => 'Caption',
    'object_inputMediaDocumentExternal_param_caption_type_string' => 'Caption',
    'object_destroy_auth_key_ok' => 'Destroy auth key ok',
    'object_destroy_auth_key_none' => 'Destroy auth key none',
    'object_destroy_auth_key_fail' => 'Destroy auth key fail',
    'object_help.appChangelog_param_message_type_string' => 'Message',
    'object_help.appChangelog_param_media_type_MessageMedia' => 'Media',
    'object_help.appChangelog_param_entities_type_Vector t' => 'Entities',
    'object_pageBlockParagraph' => 'A paragraph',
    'object_pageBlockParagraph_param_text_type_RichText' => 'Text',
    'object_pageBlockPreformatted' => 'Preformatted (`<pre>` text)',
    'object_pageBlockPreformatted_param_text_type_RichText' => 'Text',
    'object_pageBlockPreformatted_param_language_type_string' => 'Programming language of preformatted text',
    'object_pageBlockDivider' => 'An empty block separating a page',
    'object_pageBlockAnchor' => 'Link to section within the page itself (like `<a href="#target">anchor</a>`)',
    'object_pageBlockAnchor_param_name_type_string' => 'Name of target section',
    'object_pageBlockCover' => 'A page cover',
    'object_pageBlockCover_param_cover_type_PageBlock' => 'Cover',
    'object_pagePart_param_videos_type_Vector t' => 'Videos',
    'object_pageFull_param_videos_type_Vector t' => 'Videos',
    'object_phoneCallRequested_param_g_a_type_bytes' => 'G a',
    'object_resPQ_param_pq_type_string' => 'Pq',
    'object_p_q_inner_data_param_pq_type_string' => 'Pq',
    'object_p_q_inner_data_param_p_type_string' => 'P',
    'object_p_q_inner_data_param_q_type_string' => 'Q',
    'object_server_DH_params_ok_param_encrypted_answer_type_string' => 'Encrypted answer',
    'object_server_DH_inner_data_param_dh_prime_type_string' => 'Dh prime',
    'object_server_DH_inner_data_param_g_a_type_string' => 'G a',
    'object_client_DH_inner_data_param_g_b_type_string' => 'G b',
    'object_msgs_state_info_param_info_type_string' => 'Info',
    'object_msgs_all_info_param_info_type_string' => 'Info',
    'object_http_wait' => 'Http wait',
    'object_http_wait_param_max_delay_type_int' => 'Max delay',
    'object_http_wait_param_wait_after_type_int' => 'Wait after',
    'object_http_wait_param_max_wait_type_int' => 'Max wait',
    'object_ipPort' => 'Ip port',
    'object_ipPort_param_ipv4_type_int' => 'Ipv4',
    'object_ipPort_param_port_type_int' => 'Port',
    'object_help.configSimple' => 'Config simple',
    'object_help.configSimple_param_date_type_int' => 'Date',
    'object_help.configSimple_param_expires_type_int' => 'Expires',
    'object_help.configSimple_param_dc_id_type_int' => 'DC ID',
    'object_help.configSimple_param_ip_port_list_type_Vector t' => 'Ip port list',
    'object_inputMessagesFilterMyMentionsUnread' => 'Messages filter my mentions unread',
    'method_initConnection_param_proxy_type_InputClientProxy' => 'Info about an MTProto proxy',
    'method_account.registerDevice_param_secret_type_bytes' => 'For FCM and APNS VoIP, optional encryption key used to encrypt push notifications',
    'method_account.getAllSecureValues' => 'Get all saved [Telegram Passport](https://core.telegram.org/passport) documents, [for more info see the passport docs »](https://core.telegram.org/passport/encryption#encryption)',
    'method_account.getSecureValue' => 'Get saved [Telegram Passport](https://core.telegram.org/passport) document, [for more info see the passport docs »](https://core.telegram.org/passport/encryption#encryption)',
    'method_account.getSecureValue_param_types_type_Vector t' => 'Get telegram passport secure parameters',
    'method_account.saveSecureValue' => 'Securely save [Telegram Passport](https://core.telegram.org/passport) document, [for more info see the passport docs »](https://core.telegram.org/passport/encryption#encryption)',
    'method_account.saveSecureValue_param_value_type_InputSecureValue' => 'Secure value, [for more info see the passport docs »](https://core.telegram.org/passport/encryption#encryption)',
    'method_account.saveSecureValue_param_secure_secret_id_type_long' => 'Passport secret hash, [for more info see the passport docs »](https://core.telegram.org/passport/encryption#encryption)',
    'method_account.deleteSecureValue' => 'Delete stored [Telegram Passport](https://core.telegram.org/passport) documents, [for more info see the passport docs »](https://core.telegram.org/passport/encryption#encryption)',
    'method_account.deleteSecureValue_param_types_type_Vector t' => 'The values to delete',
    'method_account.getAuthorizationForm' => 'Returns a Telegram Passport authorization form for sharing data with a service',
    'method_account.getAuthorizationForm_param_bot_id_type_int' => 'User identifier of the service\'s bot',
    'method_account.getAuthorizationForm_param_scope_type_string' => 'Telegram Passport element types requested by the service',
    'method_account.getAuthorizationForm_param_public_key_type_string' => 'Service\'s public key',
    'method_account.acceptAuthorization' => 'Sends a Telegram Passport authorization form, effectively sharing data with the service',
    'method_account.acceptAuthorization_param_bot_id_type_int' => 'Bot ID',
    'method_account.acceptAuthorization_param_scope_type_string' => 'Telegram Passport element types requested by the service',
    'method_account.acceptAuthorization_param_public_key_type_string' => 'Service\'s public key',
    'method_account.acceptAuthorization_param_value_hashes_type_Vector t' => 'Hashes of the encrypted credentials',
    'method_account.acceptAuthorization_param_credentials_type_SecureCredentialsEncrypted' => 'Encrypted values',
    'method_account.sendVerifyPhoneCode' => 'Send the verification phone code for telegram [passport](https://core.telegram.org/passport).',
    'method_account.sendVerifyPhoneCode_param_allow_flashcall_type_true' => 'Allow phone calls?',
    'method_account.sendVerifyPhoneCode_param_phone_number_type_string' => 'The phone number to verify',
    'method_account.sendVerifyPhoneCode_param_current_number_type_Bool' => 'Is this the current number?',
    'method_account.verifyPhone' => 'Verify a phone number for telegram [passport](https://core.telegram.org/passport).',
    'method_account.verifyPhone_param_phone_number_type_string' => 'Phone number',
    'method_account.verifyPhone_param_phone_code_hash_type_string' => 'Phone code hash received from the call to [account.sendVerifyPhoneCode](../methods/account.sendVerifyPhoneCode.md)',
    'method_account.verifyPhone_param_phone_code_type_string' => 'Code received after the call to [account.sendVerifyPhoneCode](../methods/account.sendVerifyPhoneCode.md)',
    'method_account.sendVerifyEmailCode' => 'Send the verification email code for telegram [passport](https://core.telegram.org/passport).',
    'method_account.sendVerifyEmailCode_param_email_type_string' => 'The email where to send the code',
    'method_account.verifyEmail' => 'Verify an email address for telegram [passport](https://core.telegram.org/passport).',
    'method_account.verifyEmail_param_email_type_string' => 'The email to verify',
    'method_account.verifyEmail_param_code_type_string' => 'The verification code that was received',
    'method_users.setSecureValueErrors' => 'Notify the user that the sent [passport](https://core.telegram.org/passport) data contains some errors The user will not be able to re-submit their Passport data to you until the errors are fixed (the contents of the field for which you returned the error must change).

Use this if the data submitted by the user doesn\'t satisfy the standards your service requires for any reason. For example, if a birthday date seems invalid, a submitted document is blurry, a scan shows evidence of tampering, etc. Supply some details in the error message to make sure the user knows how to correct the issues.',
    'method_users.setSecureValueErrors_param_id_type_InputUser' => 'The user',
    'method_users.setSecureValueErrors_param_errors_type_Vector t' => 'The errors',
    'method_messages.search_param_hash_type_int' => '[Hash](https://core.telegram.org/api/offsets)',
    'method_messages.report' => 'Report a message in a chat for violation of telegram\'s Terms of Service',
    'method_messages.report_param_peer_type_InputPeer' => 'Peer',
    'method_messages.report_param_id_type_Vector t' => 'The messages to report',
    'method_messages.report_param_reason_type_ReportReason' => 'Why are these messages being reported',
    'method_messages.getStickers_param_hash_type_int' => '[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)',
    'method_messages.editMessage_param_media_type_InputMedia' => 'New attached media',
    'method_messages.editInlineBotMessage_param_media_type_InputMedia' => 'Media',
    'method_messages.toggleDialogPin_param_peer_type_InputDialogPeer' => 'The dialog to pin',
    'method_messages.getRecentLocations_param_hash_type_int' => '[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)',
    'method_messages.searchStickerSets' => 'Search for stickersets',
    'method_messages.searchStickerSets_param_exclude_featured_type_true' => 'Exclude featured stickersets from results',
    'method_messages.searchStickerSets_param_q_type_string' => 'Query string',
    'method_messages.searchStickerSets_param_hash_type_int' => '[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)',
    'method_upload.getFileHashes' => 'You cannot use this method directly, use the upload, downloadToStream, downloadToFile, downloadToDir methods instead; see https://docs.madelineproto.xyz for more info',
    'method_upload.getFileHashes_param_location_type_InputFileLocation' => 'You cannot use this method directly, use the upload, downloadToStream, downloadToFile, downloadToDir methods instead; see https://docs.madelineproto.xyz for more info',
    'method_upload.getFileHashes_param_offset_type_int' => 'You cannot use this method directly, use the upload, downloadToStream, downloadToFile, downloadToDir methods instead; see https://docs.madelineproto.xyz for more info',
    'method_help.getProxyData' => 'Get promotion info of the currently-used MTProxy',
    'method_help.getTermsOfServiceUpdate' => 'Look for updates of telegram\'s terms of service',
    'method_help.acceptTermsOfService' => 'Accept the new terms of service',
    'method_help.acceptTermsOfService_param_id_type_DataJSON' => 'ID of terms of service',
    'method_help.getDeepLinkInfo' => 'Get info about a `t.me` link',
    'method_help.getDeepLinkInfo_param_path_type_string' => 'Path in `t.me/path`',
    'object_inputSecureFileLocation' => 'Location of encrypted telegram [passport](https://core.telegram.org/passport) file.',
    'object_inputSecureFileLocation_param_id_type_long' => 'File ID, **id** parameter value from [secureFile](../constructors/secureFile.md)',
    'object_inputSecureFileLocation_param_access_hash_type_long' => 'Checksum, **access\\_hash** parameter value from [secureFile](../constructors/secureFile.md)',
    'object_messageActionBotAllowed' => 'The domain name of the website on which the user has logged in. [More about Telegram Login »](https://core.telegram.org/widgets/login)',
    'object_messageActionBotAllowed_param_domain_type_string' => 'The domain name of the website on which the user has logged in.',
    'object_messageActionSecureValuesSentMe' => 'Secure [telegram passport](https://core.telegram.org/passport) values were received',
    'object_messageActionSecureValuesSentMe_param_values_type_Vector t' => 'Values',
    'object_messageActionSecureValuesSentMe_param_credentials_type_SecureCredentialsEncrypted' => 'Encrypted credentials required to decrypt the data',
    'object_messageActionSecureValuesSent' => 'Request for secure [telegram passport](https://core.telegram.org/passport) values was sent',
    'object_messageActionSecureValuesSent_param_types_type_Vector t' => 'Types',
    'object_auth.sentCode_param_terms_of_service_type_help.TermsOfService' => 'Terms of service',
    'object_inputPeerNotifySettings_param_silent_type_Bool' => 'Peer was muted?',
    'object_peerNotifySettings_param_silent_type_Bool' => 'Mute peer?',
    'object_updateDialogPinned_param_peer_type_DialogPeer' => 'The dialog',
    'object_upload.fileCdnRedirect_param_file_hashes_type_Vector t' => 'File hashes',
    'object_dcOption_param_secret_type_bytes' => 'If the `tcpo_only` flag is set, specifies the secret to use when connecting using [transport obfuscation](https://core.telegram.org/mtproto/mtproto-transports#transport-obfuscation)',
    'object_config_param_preload_featured_stickers_type_true' => 'Whether the client should preload featured stickers',
    'object_config_param_ignore_phone_entities_type_true' => 'Whether the client should ignore phone [entities](https://core.telegram.org/api/entities)',
    'object_config_param_revoke_pm_inbox_type_true' => 'Whether incoming private messages can be deleted for both participants',
    'object_config_param_blocked_mode_type_true' => 'Indicates that telegram is *probably* censored by governments/ISPs in the current region',
    'object_config_param_revoke_time_limit_type_int' => 'Only channel/supergroup messages with age smaller than the specified can be deleted',
    'object_config_param_revoke_pm_time_limit_type_int' => 'Only private messages with age smaller than the specified can be deleted',
    'object_config_param_autoupdate_url_prefix_type_string' => 'URL to use to auto-update the current app',
    'object_messages.stickers_param_hash_type_int' => '[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)',
    'object_account.noPassword_param_new_secure_salt_type_bytes' => 'New secure salt',
    'object_account.noPassword_param_secure_random_type_bytes' => 'Secure random',
    'object_account.password_param_has_recovery_type_true' => 'Whether the user has a recovery method configured',
    'object_account.password_param_has_secure_values_type_true' => 'Whether telegram [passport](https://core.telegram.org/passport) is enabled',
    'object_account.password_param_new_secure_salt_type_bytes' => 'New secure salt',
    'object_account.password_param_secure_random_type_bytes' => 'Secure random string',
    'object_account.passwordSettings_param_secure_salt_type_bytes' => 'Secure salt',
    'object_account.passwordSettings_param_secure_secret_type_bytes' => 'Secure secret',
    'object_account.passwordSettings_param_secure_secret_id_type_long' => 'Secure secret ID',
    'object_account.passwordInputSettings_param_new_secure_salt_type_bytes' => 'New secure salt',
    'object_account.passwordInputSettings_param_new_secure_secret_type_bytes' => 'New secure secret',
    'object_account.passwordInputSettings_param_new_secure_secret_id_type_long' => 'New secure secret ID',
    'object_stickerSet_param_installed_date_type_int' => 'When was this stickerset installed',
    'object_messageEntityPhone' => 'Message entity representing a phone number.',
    'object_messageEntityPhone_param_offset_type_int' => 'Offset of message entity within message (in UTF-8 codepoints)',
    'object_messageEntityPhone_param_length_type_int' => 'Length of message entity within message (in UTF-8 codepoints)',
    'object_messageEntityCashtag' => 'Message entity representing a **$cashtag**.',
    'object_messageEntityCashtag_param_offset_type_int' => 'Offset of message entity within message (in UTF-8 codepoints)',
    'object_messageEntityCashtag_param_length_type_int' => 'Length of message entity within message (in UTF-8 codepoints)',
    'object_help.termsOfService_param_popup_type_true' => 'Whether a prompt must be showed to the user, in order to accept the new terms.',
    'object_help.termsOfService_param_id_type_DataJSON' => 'ID of the new terms',
    'object_help.termsOfService_param_entities_type_Vector t' => 'Entities',
    'object_help.termsOfService_param_min_age_confirm_type_int' => 'Minimum age required to sign up to telegram, the user must confirm that they is older than the minimum age.',
    'object_inputBotInlineMessageMediaVenue_param_venue_type_type_string' => 'Venue type in the provider\'s database',
    'object_inputBotInlineResult_param_thumb_type_InputWebDocument' => 'Thumbnail for result',
    'object_inputBotInlineResult_param_content_type_InputWebDocument' => 'Result contents',
    'object_botInlineMessageMediaVenue_param_venue_type_type_string' => 'Venue type in the provider\'s database',
    'object_botInlineResult_param_thumb_type_WebDocument' => 'Thumbnail for the result',
    'object_botInlineResult_param_content_type_WebDocument' => 'Content of the result',
    'object_messages.recentStickers_param_packs_type_Vector t' => 'Packs',
    'object_messages.recentStickers_param_dates_type_Vector t' => 'Dates',
    'object_webDocumentNoProxy' => 'Remote document that can be downloaded without [proxying through telegram](https://core.telegram.org/api/files)',
    'object_webDocumentNoProxy_param_url_type_string' => 'Document URL',
    'object_webDocumentNoProxy_param_size_type_int' => 'File size',
    'object_webDocumentNoProxy_param_mime_type_type_string' => 'MIME type',
    'object_webDocumentNoProxy_param_attributes_type_Vector t' => 'Attributes',
    'object_inputWebFileGeoPointLocation' => 'Geolocation',
    'object_inputWebFileGeoPointLocation_param_geo_point_type_InputGeoPoint' => 'Geolocation',
    'object_inputWebFileGeoPointLocation_param_w_type_int' => 'Map width in pixels before applying scale; 16-1024',
    'object_inputWebFileGeoPointLocation_param_h_type_int' => 'Map height in pixels before applying scale; 16-1024',
    'object_inputWebFileGeoPointLocation_param_zoom_type_int' => 'Map zoom level; 13-20',
    'object_inputWebFileGeoPointLocation_param_scale_type_int' => 'Map scale; 1-3',
    'object_inputWebFileGeoMessageLocation' => 'Web file geo message location',
    'object_inputWebFileGeoMessageLocation_param_peer_type_InputPeer' => 'Peer',
    'object_inputWebFileGeoMessageLocation_param_msg_id_type_int' => 'Msg ID',
    'object_inputWebFileGeoMessageLocation_param_w_type_int' => 'Width',
    'object_inputWebFileGeoMessageLocation_param_h_type_int' => 'Height',
    'object_inputWebFileGeoMessageLocation_param_zoom_type_int' => 'Zoom',
    'object_inputWebFileGeoMessageLocation_param_scale_type_int' => 'Scale',
    'object_channelAdminRights_param_manage_call_type_true' => 'Manage group calls',
    'object_inputDialogPeer' => 'A peer',
    'object_inputDialogPeer_param_peer_type_InputPeer' => 'Peer',
    'object_dialogPeer' => 'Peer',
    'object_dialogPeer_param_peer_type_Peer' => 'Peer',
    'object_messages.foundStickerSetsNotModified' => 'No further results were found',
    'object_messages.foundStickerSets' => 'Found stickersets',
    'object_messages.foundStickerSets_param_hash_type_int' => '[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)',
    'object_messages.foundStickerSets_param_sets_type_Vector t' => 'Sets',
    'object_fileHash' => 'SHA256 Hash of an uploaded file, to be checked for validity after download',
    'object_fileHash_param_offset_type_int' => 'Offset from where to start computing SHA-256 hash',
    'object_fileHash_param_limit_type_int' => 'Length',
    'object_fileHash_param_hash_type_bytes' => 'SHA-256 Hash of file chunk, to be checked for validity after download',
    'object_inputClientProxy' => 'Info about an [MTProxy](https://core.telegram.org/mtproto/mtproto-transports#transport-obfuscation) used to connect.',
    'object_inputClientProxy_param_address_type_string' => 'Proxy address',
    'object_inputClientProxy_param_port_type_int' => 'Proxy port',
    'object_help.proxyDataEmpty' => 'No proxy was used to connect to tg (or none was provided to [initConnection](../methods/initConnection.md), or the used proxy doesn\'t have a promotion channel associated to it)',
    'object_help.proxyDataEmpty_param_expires_type_int' => 'Expiration date of proxy info, will have to be refetched in `expires` seconds',
    'object_help.proxyDataPromo' => 'Promotion channel associated to a certain MTProxy',
    'object_help.proxyDataPromo_param_expires_type_int' => 'Expiration date of proxy info, will have to be refetched in `expires` seconds',
    'object_help.proxyDataPromo_param_peer_type_Peer' => 'The promoted channel',
    'object_help.proxyDataPromo_param_chats_type_Vector t' => 'Chats',
    'object_help.proxyDataPromo_param_users_type_Vector t' => 'Users',
    'object_help.termsOfServiceUpdateEmpty' => 'No changes were made to telegram\'s terms of service',
    'object_help.termsOfServiceUpdateEmpty_param_expires_type_int' => 'New TOS updates will have to be queried using [help.getTermsOfServiceUpdate](../methods/help.getTermsOfServiceUpdate.md) in `expires` seconds',
    'object_help.termsOfServiceUpdate' => 'Info about an update of telegram\'s terms of service. If the terms of service are declined, then the [account.deleteAccount](../methods/account.deleteAccount.md) method should be called with the reason "Decline ToS update"',
    'object_help.termsOfServiceUpdate_param_expires_type_int' => 'New TOS updates will have to be queried using [help.getTermsOfServiceUpdate](../methods/help.getTermsOfServiceUpdate.md) in `expires` seconds',
    'object_help.termsOfServiceUpdate_param_terms_of_service_type_help.TermsOfService' => 'New terms of service',
    'object_inputSecureFileUploaded' => 'Uploaded secure file, for more info [see the passport docs »](https://core.telegram.org/passport/encryption#inputsecurefile)',
    'object_inputSecureFileUploaded_param_id_type_long' => 'Secure file ID',
    'object_inputSecureFileUploaded_param_parts_type_int' => 'Secure file part count',
    'object_inputSecureFileUploaded_param_md5_checksum_type_string' => 'MD5 hash of encrypted uploaded file, to be checked server-side',
    'object_inputSecureFileUploaded_param_file_hash_type_bytes' => 'File hash',
    'object_inputSecureFileUploaded_param_secret_type_bytes' => 'Secret',
    'object_inputSecureFile' => 'Preuploaded [passport](https://core.telegram.org/passport) file, for more info [see the passport docs »](https://core.telegram.org/passport/encryption#inputsecurefile)',
    'object_inputSecureFile_param_id_type_long' => 'Secure file ID',
    'object_inputSecureFile_param_access_hash_type_long' => 'Secure file access hash',
    'object_secureFileEmpty' => 'Empty constructor',
    'object_secureFile' => 'Secure [passport](https://core.telegram.org/passport) file, for more info [see the passport docs »](https://core.telegram.org/passport/encryption#inputsecurefile)',
    'object_secureFile_param_id_type_long' => 'ID',
    'object_secureFile_param_access_hash_type_long' => 'Access hash',
    'object_secureFile_param_size_type_int' => 'File size',
    'object_secureFile_param_dc_id_type_int' => 'DC ID',
    'object_secureFile_param_date_type_int' => 'Date of upload',
    'object_secureFile_param_file_hash_type_bytes' => 'File hash',
    'object_secureFile_param_secret_type_bytes' => 'Secret',
    'object_secureData' => 'Secure [passport](https://core.telegram.org/passport) data, for more info [see the passport docs »](https://core.telegram.org/passport/encryption#securedata)',
    'object_secureData_param_data_type_bytes' => 'Data',
    'object_secureData_param_data_hash_type_bytes' => 'Data hash',
    'object_secureData_param_secret_type_bytes' => 'Secret',
    'object_securePlainPhone' => 'Phone number to use in [telegram passport](https://core.telegram.org/passport): [it must be verified, first »](https://core.telegram.org/passport/encryption#secureplaindata).',
    'object_securePlainPhone_param_phone_type_string' => 'Phone number',
    'object_securePlainEmail' => 'Email address to use in [telegram passport](https://core.telegram.org/passport): [it must be verified, first »](https://core.telegram.org/passport/encryption#secureplaindata).',
    'object_securePlainEmail_param_email_type_string' => 'Email address',
    'object_secureValueTypePersonalDetails' => 'Personal details',
    'object_secureValueTypePassport' => 'Passport',
    'object_secureValueTypeDriverLicense' => 'Driver\'s license',
    'object_secureValueTypeIdentityCard' => 'Identity card',
    'object_secureValueTypeInternalPassport' => 'Internal [passport](https://core.telegram.org/passport)',
    'object_secureValueTypeAddress' => 'Address',
    'object_secureValueTypeUtilityBill' => 'Utility bill',
    'object_secureValueTypeBankStatement' => 'Bank statement',
    'object_secureValueTypeRentalAgreement' => 'Rental agreement',
    'object_secureValueTypePassportRegistration' => 'Internal registration [passport](https://core.telegram.org/passport)',
    'object_secureValueTypeTemporaryRegistration' => 'Temporary registration',
    'object_secureValueTypePhone' => 'Phone',
    'object_secureValueTypeEmail' => 'Email',
    'object_secureValue' => 'Secure value',
    'object_secureValue_param_type_type_SecureValueType' => 'Secure [passport](https://core.telegram.org/passport) value type',
    'object_secureValue_param_data_type_SecureData' => 'Encrypted [Telegram Passport](https://core.telegram.org/passport) element data',
    'object_secureValue_param_front_side_type_SecureFile' => 'Encrypted [passport](https://core.telegram.org/passport) file with the front side of the document',
    'object_secureValue_param_reverse_side_type_SecureFile' => 'Encrypted [passport](https://core.telegram.org/passport) file with the reverse side of the document',
    'object_secureValue_param_selfie_type_SecureFile' => 'Encrypted [passport](https://core.telegram.org/passport) file with a selfie of the user holding the document',
    'object_secureValue_param_files_type_Vector t' => 'Files',
    'object_secureValue_param_plain_data_type_SecurePlainData' => 'Plaintext verified [passport](https://core.telegram.org/passport) data',
    'object_secureValue_param_hash_type_bytes' => 'Data hash',
    'object_inputSecureValue' => 'Secure value, [for more info see the passport docs »](https://core.telegram.org/passport/encryption#encryption)',
    'object_inputSecureValue_param_type_type_SecureValueType' => 'Secure [passport](https://core.telegram.org/passport) value type',
    'object_inputSecureValue_param_data_type_SecureData' => 'Encrypted [Telegram Passport](https://core.telegram.org/passport) element data',
    'object_inputSecureValue_param_front_side_type_InputSecureFile' => 'Encrypted [passport](https://core.telegram.org/passport) file with the front side of the document',
    'object_inputSecureValue_param_reverse_side_type_InputSecureFile' => 'Encrypted [passport](https://core.telegram.org/passport) file with the reverse side of the document',
    'object_inputSecureValue_param_selfie_type_InputSecureFile' => 'Encrypted [passport](https://core.telegram.org/passport) file with a selfie of the user holding the document',
    'object_inputSecureValue_param_files_type_Vector t' => 'Files',
    'object_inputSecureValue_param_plain_data_type_SecurePlainData' => 'Plaintext verified [passport](https://core.telegram.org/passport) data',
    'object_secureValueHash' => 'Secure value hash',
    'object_secureValueHash_param_type_type_SecureValueType' => 'Secure value type',
    'object_secureValueHash_param_hash_type_bytes' => 'Hash',
    'object_secureValueErrorData' => 'Represents an issue in one of the data fields that was provided by the user. The error is considered resolved when the field\'s value changes.',
    'object_secureValueErrorData_param_type_type_SecureValueType' => 'The section of the user\'s Telegram Passport which has the error, one of [secureValueTypePersonalDetails](../constructors/secureValueTypePersonalDetails.md), [secureValueTypePassport](../constructors/secureValueTypePassport.md), [secureValueTypeDriverLicense](../constructors/secureValueTypeDriverLicense.md), [secureValueTypeIdentityCard](../constructors/secureValueTypeIdentityCard.md), [secureValueTypeInternalPassport](../constructors/secureValueTypeInternalPassport.md), [secureValueTypeAddress](../constructors/secureValueTypeAddress.md)',
    'object_secureValueErrorData_param_data_hash_type_bytes' => 'Data hash',
    'object_secureValueErrorData_param_field_type_string' => 'Name of the data field which has the error',
    'object_secureValueErrorData_param_text_type_string' => 'Error message',
    'object_secureValueErrorFrontSide' => 'Represents an issue with the front side of a document. The error is considered resolved when the file with the front side of the document changes.',
    'object_secureValueErrorFrontSide_param_type_type_SecureValueType' => 'One of [secureValueTypePassport](../constructors/secureValueTypePassport.md), [secureValueTypeDriverLicense](../constructors/secureValueTypeDriverLicense.md), [secureValueTypeIdentityCard](../constructors/secureValueTypeIdentityCard.md), [secureValueTypeInternalPassport](../constructors/secureValueTypeInternalPassport.md)',
    'object_secureValueErrorFrontSide_param_file_hash_type_bytes' => 'File hash',
    'object_secureValueErrorFrontSide_param_text_type_string' => 'Error message',
    'object_secureValueErrorReverseSide' => 'Represents an issue with the reverse side of a document. The error is considered resolved when the file with reverse side of the document changes.',
    'object_secureValueErrorReverseSide_param_type_type_SecureValueType' => 'One of [secureValueTypeDriverLicense](../constructors/secureValueTypeDriverLicense.md), [secureValueTypeIdentityCard](../constructors/secureValueTypeIdentityCard.md)',
    'object_secureValueErrorReverseSide_param_file_hash_type_bytes' => 'File hash',
    'object_secureValueErrorReverseSide_param_text_type_string' => 'Error message',
    'object_secureValueErrorSelfie' => 'Represents an issue with the selfie with a document. The error is considered resolved when the file with the selfie changes.',
    'object_secureValueErrorSelfie_param_type_type_SecureValueType' => 'One of [secureValueTypePassport](../constructors/secureValueTypePassport.md), [secureValueTypeDriverLicense](../constructors/secureValueTypeDriverLicense.md), [secureValueTypeIdentityCard](../constructors/secureValueTypeIdentityCard.md), [secureValueTypeInternalPassport](../constructors/secureValueTypeInternalPassport.md)',
    'object_secureValueErrorSelfie_param_file_hash_type_bytes' => 'File hash',
    'object_secureValueErrorSelfie_param_text_type_string' => 'Error message',
    'object_secureValueErrorFile' => 'Represents an issue with a document scan. The error is considered resolved when the file with the document scan changes.',
    'object_secureValueErrorFile_param_type_type_SecureValueType' => 'One of [secureValueTypeUtilityBill](../constructors/secureValueTypeUtilityBill.md), [secureValueTypeBankStatement](../constructors/secureValueTypeBankStatement.md), [secureValueTypeRentalAgreement](../constructors/secureValueTypeRentalAgreement.md), [secureValueTypePassportRegistration](../constructors/secureValueTypePassportRegistration.md), [secureValueTypeTemporaryRegistration](../constructors/secureValueTypeTemporaryRegistration.md)',
    'object_secureValueErrorFile_param_file_hash_type_bytes' => 'File hash',
    'object_secureValueErrorFile_param_text_type_string' => 'Error message',
    'object_secureValueErrorFiles' => 'Represents an issue with a list of scans. The error is considered resolved when the list of files containing the scans changes.',
    'object_secureValueErrorFiles_param_type_type_SecureValueType' => 'One of [secureValueTypeUtilityBill](../constructors/secureValueTypeUtilityBill.md), [secureValueTypeBankStatement](../constructors/secureValueTypeBankStatement.md), [secureValueTypeRentalAgreement](../constructors/secureValueTypeRentalAgreement.md), [secureValueTypePassportRegistration](../constructors/secureValueTypePassportRegistration.md), [secureValueTypeTemporaryRegistration](../constructors/secureValueTypeTemporaryRegistration.md)',
    'object_secureValueErrorFiles_param_file_hash_type_Vector t' => 'File hash',
    'object_secureValueErrorFiles_param_text_type_string' => 'Error message',
    'object_secureCredentialsEncrypted' => 'Encrypted credentials required to decrypt [telegram passport](https://core.telegram.org/passport) data.',
    'object_secureCredentialsEncrypted_param_data_type_bytes' => 'Encrypted JSON-serialized data with unique user\'s payload, data hashes and secrets required for EncryptedPassportElement decryption and authentication, as described in [decrypting data »](https://core.telegram.org/passport#decrypting-data)',
    'object_secureCredentialsEncrypted_param_hash_type_bytes' => 'Data hash for data authentication as described in [decrypting data »](https://core.telegram.org/passport#decrypting-data)',
    'object_secureCredentialsEncrypted_param_secret_type_bytes' => 'Secret, encrypted with the bot\'s public RSA key, required for data decryption as described in [decrypting data »](https://core.telegram.org/passport#decrypting-data)',
    'object_account.authorizationForm' => '[Telegram Passport](https://core.telegram.org/passport) authorization form',
    'object_account.authorizationForm_param_selfie_required_type_true' => 'Selfie required?',
    'object_account.authorizationForm_param_required_types_type_Vector t' => 'Required types',
    'object_account.authorizationForm_param_values_type_Vector t' => 'Values',
    'object_account.authorizationForm_param_errors_type_Vector t' => 'Errors',
    'object_account.authorizationForm_param_users_type_Vector t' => 'Users',
    'object_account.authorizationForm_param_privacy_policy_url_type_string' => 'URL of the service\'s privacy policy',
    'object_account.sentEmailCode' => 'The sent email code',
    'object_account.sentEmailCode_param_email_pattern_type_string' => 'The email (to which the code was sent) must match this [pattern](https://core.telegram.org/api/pattern)',
    'object_account.sentEmailCode_param_length_type_int' => 'The length of the verification code',
    'object_help.deepLinkInfoEmpty' => 'Deep link info empty',
    'object_help.deepLinkInfo' => 'Deep linking info',
    'object_help.deepLinkInfo_param_update_app_type_true' => 'An update of the app is required to parse this link',
    'object_help.deepLinkInfo_param_message_type_string' => 'Message to show to the user',
    'object_help.deepLinkInfo_param_entities_type_Vector t' => 'Entities',
    'method_invokeWithMessagesRange' => 'Invoke with the given message range',
    'method_invokeWithMessagesRange_param_range_type_MessageRange' => 'Message range',
    'method_invokeWithMessagesRange_param_query_type_!X' => 'Query',
    'method_invokeWithTakeout' => 'Invoke a method within a takeout session',
    'method_invokeWithTakeout_param_takeout_id_type_long' => 'Takeout session ID',
    'method_invokeWithTakeout_param_query_type_!X' => 'Query',
    'method_account.initTakeoutSession' => 'Intialize account takeout session',
    'method_account.initTakeoutSession_param_contacts_type_true' => 'Whether to export contacts',
    'method_account.initTakeoutSession_param_message_users_type_true' => 'Whether to export messages in private chats',
    'method_account.initTakeoutSession_param_message_chats_type_true' => 'Whether to export messages in [legacy groups](https://core.telegram.org/api/channel)',
    'method_account.initTakeoutSession_param_message_megagroups_type_true' => 'Whether to export messages in [supergroups](https://core.telegram.org/api/channel)',
    'method_account.initTakeoutSession_param_message_channels_type_true' => 'Whether to export messages in [channels](https://core.telegram.org/api/channel)',
    'method_account.initTakeoutSession_param_files_type_true' => 'Whether to export files',
    'method_account.initTakeoutSession_param_file_max_size_type_int' => 'Maximum size of files to export',
    'method_account.finishTakeoutSession' => 'Finish account takeout session',
    'method_account.finishTakeoutSession_param_success_type_true' => 'Data exported successfully',
    'method_contacts.getSaved' => 'Get all contacts',
    'method_messages.getSplitRanges' => 'Get message ranges for saving the user\'s chat history',
    'method_channels.getLeftChannels' => 'Get a list of [channels/supergroups](https://core.telegram.org/api/channel) we left',
    'method_channels.getLeftChannels_param_offset_type_int' => 'Offset for [pagination](https://core.telegram.org/api/offsets)',
    'object_ipPortSecret' => 'Ip port secret',
    'object_ipPortSecret_param_ipv4_type_int' => 'Ipv4',
    'object_ipPortSecret_param_port_type_int' => 'Port',
    'object_ipPortSecret_param_secret_type_bytes' => 'Secret',
    'object_accessPointRule' => 'Access point rule',
    'object_accessPointRule_param_phone_prefix_rules_type_string' => 'Phone prefix rules',
    'object_accessPointRule_param_dc_id_type_int' => 'DC ID',
    'object_accessPointRule_param_ips_type_vector' => 'Ips',
    'object_help.configSimple_param_rules_type_vector' => 'Rules',
    'object_inputTakeoutFileLocation' => 'Empty constructor for takeout',
    'object_savedPhoneContact' => 'Saved contact',
    'object_savedPhoneContact_param_phone_type_string' => 'Phone number',
    'object_savedPhoneContact_param_first_name_type_string' => 'First name',
    'object_savedPhoneContact_param_last_name_type_string' => 'Last name',
    'object_savedPhoneContact_param_date_type_int' => 'Date added',
    'object_account.takeout' => 'Takout info',
    'object_account.takeout_param_id_type_long' => 'Takeout ID',
    'method_contacts.toggleTopPeers' => 'Enable/disable [top peers](https://core.telegram.org/api/top-rating)',
    'method_contacts.toggleTopPeers_param_enabled_type_Bool' => 'Enable/disable',
    'method_messages.getDialogs_param_hash_type_int' => '[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)',
    'method_messages.markDialogUnread' => 'Manually mark dialog as unread',
    'method_messages.markDialogUnread_param_unread_type_true' => 'Mark as unread/read',
    'method_messages.markDialogUnread_param_peer_type_InputDialogPeer' => 'Dialog',
    'method_messages.getDialogUnreadMarks' => 'Get dialogs manually marked as unread',
    'object_inputMediaContact_param_vcard_type_string' => 'Contact vcard',
    'object_messageMediaContact_param_vcard_type_string' => 'VCARD of contact',
    'object_dialog_param_unread_mark_type_true' => 'Whether the chat was manually marked as unread',
    'object_geoPoint_param_access_hash_type_long' => 'Access hash',
    'object_messages.dialogsNotModified' => 'Dialogs haven\'t changed',
    'object_messages.dialogsNotModified_param_count_type_int' => 'Number of dialogs found server-side by the query',
    'object_updateDialogUnreadMark' => 'The manual unread mark of a chat was changed',
    'object_updateDialogUnreadMark_param_unread_type_true' => 'Was the chat marked or unmarked as read',
    'object_updateDialogUnreadMark_param_peer_type_DialogPeer' => 'The dialog',
    'object_config_param_dc_txt_domain_name_type_string' => 'Domain name for fetching encrypted DC list from DNS TXT record',
    'object_config_param_gif_search_username_type_string' => 'Username of the bot to use to search for GIFs',
    'object_config_param_venue_search_username_type_string' => 'Username of the bot to use to search for venues',
    'object_config_param_img_search_username_type_string' => 'Username of the bot to use for image search',
    'object_config_param_static_maps_provider_type_string' => 'ID of the map provider to use for venues',
    'object_config_param_caption_length_max_type_int' => 'Maximum length of caption (length in utf8 codepoints)',
    'object_config_param_message_length_max_type_int' => 'Maximum length of messages (length in utf8 codepoints)',
    'object_config_param_webfile_dc_id_type_int' => 'DC ID to use to download [webfiles](https://core.telegram.org/api/files)',
    'object_inputBotInlineMessageMediaContact_param_vcard_type_string' => 'VCard info',
    'object_botInlineMessageMediaContact_param_vcard_type_string' => 'VCard info',
    'object_contacts.topPeersDisabled' => 'Top peers disabled',
    'object_draftMessageEmpty_param_date_type_int' => 'When was the draft last updated',
    'object_inputWebFileGeoPointLocation_param_access_hash_type_long' => 'Access hash',
    'method_contacts.getContacts_param_hash_type_Vector t' => 'User IDs of previously cached contacts',
    'method_contacts.getTopPeers_param_hash_type_Vector t' => 'Peer IDs of previously cached peers',
    'method_messages.getDialogs_param_hash_type_Vector t' => 'IDs of previously fetched dialogs',
    'method_messages.getHistory_param_hash_type_Vector t' => 'IDs of messages you already fetched',
    'method_messages.search_param_hash_type_Vector t' => 'The IDs of messages you already fetched',
    'method_messages.getStickers_param_hash_type_Vector t' => ' the hash parameter of the previous result of this method',
    'method_messages.getAllStickers_param_hash_type_Vector t' => 'The hash parameter of the previous result of this method',
    'method_messages.getSavedGifs_param_hash_type_Vector t' => ' the hash parameter of the previous result of this method',
    'method_messages.getFeaturedStickers_param_hash_type_Vector t' => ' the hash parameter of the previous result of this method',
    'method_messages.getRecentStickers_param_hash_type_Vector t' => 'IDs the hash parameter of the previous result of this method',
    'method_messages.getMaskStickers_param_hash_type_Vector t' => ' the hash parameter of the previous result of this method',
    'method_messages.getWebPage_param_hash_type_Vector t' => ' the hash parameter of the previous result of this method',
    'method_messages.getFavedStickers_param_hash_type_Vector t' => ' the hash parameter of the previous result of this method',
    'method_messages.getRecentLocations_param_hash_type_Vector t' => 'IDs of locations you already fetched',
    'method_messages.searchStickerSets_param_hash_type_Vector t' => 'The IDs of stickersets you already fetched',
    'method_channels.getParticipants_param_hash_type_Vector t' => 'IDs of previously fetched participants',
    'method_auth.checkPassword_param_password_type_InputCheckPasswordSRP' => 'You cannot use this method directly, use the complete2falogin method instead (see https://docs.madelineproto.xyz for more info)',
    'method_account.getPasswordSettings_param_password_type_InputCheckPasswordSRP' => 'You cannot use this method directly; use $MadelineProto->update2fa($params), instead (see https://docs.madelineproto.xyz for more info)',
    'method_account.updatePasswordSettings_param_password_type_InputCheckPasswordSRP' => 'You cannot use this method directly; use $MadelineProto->update2fa($params), instead (see https://docs.madelineproto.xyz for more info)',
    'method_account.getTmpPassword_param_password_type_InputCheckPasswordSRP' => 'SRP password parameters',
    'method_account.confirmPasswordEmail' => 'Verify an email to use as [2FA recovery method](https://core.telegram.org/api/srp).',
    'method_account.confirmPasswordEmail_param_code_type_string' => 'The phone code that was received after [setting a recovery email](https://core.telegram.org/api/srp#email-verification)',
    'method_account.resendPasswordEmail' => 'Resend the code to verify an email to use as [2FA recovery method](https://core.telegram.org/api/srp).',
    'method_account.cancelPasswordEmail' => 'Cancel the code that was sent to verify an email to use as [2FA recovery method](https://core.telegram.org/api/srp).',
    'method_account.getContactSignUpNotification' => 'Whether the user will receive notifications when contacts sign up',
    'method_account.setContactSignUpNotification' => 'Toggle contact sign up notifications',
    'method_account.setContactSignUpNotification_param_silent_type_Bool' => 'Whether to disable contact sign up notifications',
    'method_account.getNotifyExceptions' => 'Returns list of chats with non-default notification settings',
    'method_account.getNotifyExceptions_param_compare_sound_type_true' => 'If true, chats with non-default sound will also be returned',
    'method_account.getNotifyExceptions_param_peer_type_InputNotifyPeer' => 'If specified, only chats of the specified category will be returned',
    'method_contacts.getContactIDs' => 'Get contact by telegram IDs',
    'method_contacts.getContactIDs_param_hash_type_Vector t' => 'Previously fetched IDs',
    'method_contacts.deleteByPhones' => 'Delete contacts by phone number',
    'method_contacts.deleteByPhones_param_phones_type_Vector t' => 'Phones',
    'method_messages.sendInlineBotResult_param_hide_via_type_true' => 'Whether to hide the `via @botname` in the resulting message (only for bot usernames encountered in the [config](../constructors/config.md))',
    'method_messages.clearAllDrafts' => 'Clear all [drafts](https://core.telegram.org/api/drafts).',
    'method_messages.updatePinnedMessage' => 'Pin a message',
    'method_messages.updatePinnedMessage_param_silent_type_true' => 'Pin the message silently, without triggering a notification',
    'method_messages.updatePinnedMessage_param_peer_type_InputPeer' => 'The peer where to pin the message',
    'method_messages.updatePinnedMessage_param_id_type_int' => 'The message to pin, can be 0 to unpin any currently pinned messages',
    'method_messages.sendVote' => 'Vote in a [poll](../constructors/poll.md)',
    'method_messages.sendVote_param_peer_type_InputPeer' => 'The chat where the poll was sent',
    'method_messages.sendVote_param_msg_id_type_int' => 'The message ID of the poll',
    'method_messages.sendVote_param_options_type_Vector t' => 'Options',
    'method_messages.getPollResults' => 'Get poll results',
    'method_messages.getPollResults_param_peer_type_InputPeer' => 'Peer where the poll was found',
    'method_messages.getPollResults_param_msg_id_type_int' => 'Message ID of poll message',
    'method_messages.getOnlines' => 'Get count of online users in a chat',
    'method_messages.getOnlines_param_peer_type_InputPeer' => 'The chat',
    'method_messages.getStatsURL' => 'Returns URL with the chat statistics. Currently this method can be used only for channels',
    'method_messages.getStatsURL_param_peer_type_InputPeer' => 'Chat identifier',
    'method_help.getAppUpdate_param_source_type_string' => 'Source',
    'method_help.getAppConfig' => 'Get app-specific configuration',
    'method_help.getPassportConfig' => 'Get [passport](https://core.telegram.org/passport) configuration',
    'method_help.getPassportConfig_param_hash_type_Vector t' => 'Hash',
    'method_help.getSupportName' => 'Get localized name of the telegram support user',
    'method_help.getUserInfo' => 'Internal use',
    'method_help.getUserInfo_param_user_id_type_InputUser' => 'User ID',
    'method_help.editUserInfo' => 'Internal use',
    'method_help.editUserInfo_param_user_id_type_InputUser' => 'User',
    'method_help.editUserInfo_param_message_type_string' => 'Message',
    'method_help.editUserInfo_param_entities_type_Vector t' => 'Entities',
    'method_langpack.getLangPack_param_lang_pack_type_string' => 'Language pack name',
    'method_langpack.getStrings_param_lang_pack_type_string' => 'Language pack name',
    'method_langpack.getDifference_param_lang_code_type_string' => 'Language code',
    'method_langpack.getLanguages_param_lang_pack_type_string' => 'Language pack',
    'method_langpack.getLanguage' => 'Get information about a language in a localization pack',
    'method_langpack.getLanguage_param_lang_pack_type_string' => 'Language pack name',
    'method_langpack.getLanguage_param_lang_code_type_string' => 'Language code',
    'object_inputMediaGeoLive_param_stopped_type_true' => 'Whether sending of the geolocation was stopped',
    'object_inputMediaPoll' => 'A poll',
    'object_inputMediaPoll_param_poll_type_Poll' => 'The poll to send',
    'object_inputPhoto_param_file_reference_type_bytes' => '[File reference](https://core.telegram.org/api/file_reference)',
    'object_inputFileLocation_param_file_reference_type_bytes' => '[File reference](https://core.telegram.org/api/file_reference)',
    'object_inputDocumentFileLocation_param_file_reference_type_bytes' => '[File reference](https://core.telegram.org/api/file_reference)',
    'object_fileLocation_param_file_reference_type_bytes' => 'File reference',
    'object_chatFull_param_pinned_msg_id_type_int' => 'Message ID of the pinned message',
    'object_channelFull_param_can_view_stats_type_true' => 'Can the user call [messages.getStatsURL](../methods/messages.getStatsURL.md) on this channel',
    'object_channelFull_param_online_count_type_int' => 'Number of users currently online',
    'object_message_param_from_scheduled_type_true' => 'Whether this is a scheduled post',
    'object_messageMediaPoll' => 'Poll',
    'object_messageMediaPoll_param_poll_type_Poll' => 'The poll',
    'object_messageMediaPoll_param_results_type_PollResults' => 'The results of the poll',
    'object_messageActionContactSignUp' => 'A contact just signed up to telegram',
    'object_photo_param_file_reference_type_bytes' => '[file reference](https://core.telegram.org/api/file_reference)',
    'object_inputNotifyBroadcasts' => 'All [channels](https://core.telegram.org/api/channel)',
    'object_inputReportReasonChildAbuse' => 'Report for child abuse',
    'object_inputReportReasonCopyright' => 'Report for copyrighted content',
    'object_userFull_param_can_pin_message_type_true' => 'Whether you can pin messages in the chat with this user, you can do this only for a chat with yourself',
    'object_userFull_param_pinned_msg_id_type_int' => 'Pinned message ID, you can only pin messages in a chat with yourself',
    'object_messages.channelMessages_param_inexact_type_true' => 'If set, returned results may be inexact',
    'object_updateLangPackTooLong_param_lang_code_type_string' => 'Language code',
    'object_updateUserPinnedMessage' => 'A message was pinned in a private chat with a user',
    'object_updateUserPinnedMessage_param_user_id_type_int' => 'User that pinned the message',
    'object_updateUserPinnedMessage_param_id_type_int' => 'Message ID that was pinned',
    'object_updateChatPinnedMessage' => 'A message was pinned in a [legacy group](https://core.telegram.org/api/channel)',
    'object_updateChatPinnedMessage_param_chat_id_type_int' => '[Legacy group](https://core.telegram.org/api/channel) ID',
    'object_updateChatPinnedMessage_param_id_type_int' => 'ID of pinned message',
    'object_updateMessagePoll' => 'The results of a poll have changed',
    'object_updateMessagePoll_param_poll_id_type_long' => 'Poll ID',
    'object_updateMessagePoll_param_poll_type_Poll' => 'If the server knows the client hasn\'t cached this poll yet, the poll itself',
    'object_updateMessagePoll_param_results_type_PollResults' => 'New poll results',
    'object_config_param_pfs_enabled_type_true' => 'Whether [pfs](https://core.telegram.org/api/pfs) was used',
    'object_config_param_base_lang_pack_version_type_int' => 'Basic language pack version',
    'object_help.appUpdate_param_popup_type_true' => 'Popup?',
    'object_help.appUpdate_param_version_type_string' => 'New version name',
    'object_help.appUpdate_param_entities_type_Vector t' => 'Entities',
    'object_help.appUpdate_param_document_type_Document' => 'Attached document',
    'object_inputDocument_param_file_reference_type_bytes' => '[File reference](https://core.telegram.org/api/file_reference)',
    'object_document_param_file_reference_type_bytes' => '[File reference](https://core.telegram.org/api/file_reference)',
    'object_notifyBroadcasts' => 'Channel notification settings',
    'object_inputPrivacyKeyPhoneP2P' => 'Whether the user allows P2P communication during VoIP calls',
    'object_privacyKeyPhoneP2P' => 'Whether P2P connections in phone calls are allowed',
    'object_authorization_param_current_type_true' => 'Whether this is the current session',
    'object_authorization_param_official_app_type_true' => 'Whether the session is from an official app',
    'object_authorization_param_password_pending_type_true' => 'Whether the session is still waiting for a 2FA password',
    'object_account.password_param_has_password_type_true' => 'Whether the user has a password',
    'object_account.password_param_current_algo_type_PasswordKdfAlgo' => 'The [KDF algorithm for SRP two-factor authentication](https://core.telegram.org/api/srp) of the current password',
    'object_account.password_param_srp_B_type_bytes' => 'Srp B param for [SRP authorization](https://core.telegram.org/api/srp)',
    'object_account.password_param_srp_id_type_long' => 'Srp ID param for [SRP authorization](https://core.telegram.org/api/srp)',
    'object_account.password_param_new_algo_type_PasswordKdfAlgo' => 'The [KDF algorithm for SRP two-factor authentication](https://core.telegram.org/api/srp) to use when creating new passwords',
    'object_account.password_param_new_secure_algo_type_SecurePasswordKdfAlgo' => 'The KDF algorithm for telegram [passport](https://core.telegram.org/passport)',
    'object_account.passwordSettings_param_secure_settings_type_SecureSecretSettings' => 'Telegram [passport](https://core.telegram.org/passport) settings',
    'object_account.passwordInputSettings_param_new_algo_type_PasswordKdfAlgo' => 'The [SRP algorithm](https://core.telegram.org/api/srp) to use',
    'object_account.passwordInputSettings_param_new_secure_settings_type_SecureSecretSettings' => 'Telegram [passport](https://core.telegram.org/passport) settings',
    'object_textSubscript' => 'Subscript text',
    'object_textSubscript_param_text_type_RichText' => 'Text',
    'object_textSuperscript' => 'Superscript text',
    'object_textSuperscript_param_text_type_RichText' => 'Text',
    'object_textMarked' => 'Highlighted text',
    'object_textMarked_param_text_type_RichText' => 'Text',
    'object_textPhone' => 'Rich text linked to a phone number',
    'object_textPhone_param_text_type_RichText' => 'Text',
    'object_textPhone_param_phone_type_string' => 'Phone number',
    'object_textImage' => 'Inline image',
    'object_textImage_param_document_id_type_long' => 'Document ID',
    'object_textImage_param_w_type_int' => 'Width',
    'object_textImage_param_h_type_int' => 'Height',
    'object_textAnchor' => 'Text linking to another section of the page',
    'object_textAnchor_param_text_type_RichText' => 'Text',
    'object_textAnchor_param_name_type_string' => 'Section name',
    'object_pageBlockPhoto_param_caption_type_PageCaption' => 'Caption',
    'object_pageBlockPhoto_param_url_type_string' => 'HTTP URL of page the photo leads to when clicked',
    'object_pageBlockPhoto_param_webpage_id_type_long' => 'ID of preview of the page the photo leads to when clicked',
    'object_pageBlockVideo_param_caption_type_PageCaption' => 'Caption',
    'object_pageBlockEmbed_param_caption_type_PageCaption' => 'Caption',
    'object_pageBlockEmbedPost_param_caption_type_PageCaption' => 'Caption',
    'object_pageBlockCollage_param_caption_type_PageCaption' => 'Caption',
    'object_pageBlockSlideshow_param_caption_type_PageCaption' => 'Caption',
    'object_pageBlockAudio_param_caption_type_PageCaption' => 'Audio caption',
    'object_pageBlockKicker' => 'Kicker',
    'object_pageBlockKicker_param_text_type_RichText' => 'Contents',
    'object_pageBlockTable' => 'Table',
    'object_pageBlockTable_param_bordered_type_true' => 'Does the table have a visible border?',
    'object_pageBlockTable_param_striped_type_true' => 'Is the table striped?',
    'object_pageBlockTable_param_title_type_RichText' => 'Title',
    'object_pageBlockTable_param_rows_type_Vector t' => 'Rows',
    'object_pageBlockOrderedList' => 'Ordered list of IV blocks',
    'object_pageBlockOrderedList_param_items_type_Vector t' => 'Items',
    'object_pageBlockDetails' => 'A collapsible details block',
    'object_pageBlockDetails_param_open_type_true' => 'Whether the block is open by default',
    'object_pageBlockDetails_param_blocks_type_Vector t' => 'Blocks',
    'object_pageBlockDetails_param_title_type_RichText' => 'Always visible heading for the block',
    'object_pageBlockRelatedArticles' => 'Related articles',
    'object_pageBlockRelatedArticles_param_title_type_RichText' => 'Title',
    'object_pageBlockRelatedArticles_param_articles_type_Vector t' => 'Articles',
    'object_pageBlockMap' => 'A map',
    'object_pageBlockMap_param_geo_type_GeoPoint' => 'Location of the map center',
    'object_pageBlockMap_param_zoom_type_int' => 'Map zoom level; 13-20',
    'object_pageBlockMap_param_w_type_int' => 'Map width in pixels before applying scale; 16-102',
    'object_pageBlockMap_param_h_type_int' => 'Map height in pixels before applying scale; 16-1024',
    'object_pageBlockMap_param_caption_type_PageCaption' => 'Caption',
    'object_phoneCall_param_p2p_allowed_type_true' => 'Whether P2P connection to the other peer is allowed',
    'object_langPackLanguage_param_official_type_true' => 'Whether the language pack is official',
    'object_langPackLanguage_param_rtl_type_true' => 'Is this a localization pack for an RTL language',
    'object_langPackLanguage_param_beta_type_true' => 'Is this a beta localization pack?',
    'object_langPackLanguage_param_base_lang_code_type_string' => 'Identifier of a base language pack; may be empty. If a string is missed in the language pack, then it should be fetched from base language pack. Unsupported in custom language packs',
    'object_langPackLanguage_param_plural_code_type_string' => 'A language code to be used to apply plural forms. See [https://www.unicode.org/cldr/charts/latest/supplemental/language\\_plural\\_rules.html](https://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html) for more info',
    'object_langPackLanguage_param_strings_count_type_int' => 'Total number of non-deleted strings from the language pack',
    'object_langPackLanguage_param_translated_count_type_int' => 'Total number of translated strings from the language pack',
    'object_langPackLanguage_param_translations_url_type_string' => 'Link to language translation interface; empty for custom local language packs',
    'object_secureValue_param_translation_type_Vector t' => 'Translation',
    'object_inputSecureValue_param_translation_type_Vector t' => 'Translation',
    'object_secureValueError' => 'Secure value error',
    'object_secureValueError_param_type_type_SecureValueType' => 'Type of element which has the issue',
    'object_secureValueError_param_hash_type_bytes' => 'Hash',
    'object_secureValueError_param_text_type_string' => 'Error message',
    'object_secureValueErrorTranslationFile' => 'Represents an issue with one of the files that constitute the translation of a document. The error is considered resolved when the file changes.',
    'object_secureValueErrorTranslationFile_param_type_type_SecureValueType' => 'One of [secureValueTypePersonalDetails](../constructors/secureValueTypePersonalDetails.md), [secureValueTypePassport](../constructors/secureValueTypePassport.md), [secureValueTypeDriverLicense](../constructors/secureValueTypeDriverLicense.md), [secureValueTypeIdentityCard](../constructors/secureValueTypeIdentityCard.md), [secureValueTypeInternalPassport](../constructors/secureValueTypeInternalPassport.md), [secureValueTypeUtilityBill](../constructors/secureValueTypeUtilityBill.md), [secureValueTypeBankStatement](../constructors/secureValueTypeBankStatement.md), [secureValueTypeRentalAgreement](../constructors/secureValueTypeRentalAgreement.md), [secureValueTypePassportRegistration](../constructors/secureValueTypePassportRegistration.md), [secureValueTypeTemporaryRegistration](../constructors/secureValueTypeTemporaryRegistration.md)',
    'object_secureValueErrorTranslationFile_param_file_hash_type_bytes' => 'File hash',
    'object_secureValueErrorTranslationFile_param_text_type_string' => 'Error message',
    'object_secureValueErrorTranslationFiles' => 'Represents an issue with the translated version of a document. The error is considered resolved when a file with the document translation changes.',
    'object_secureValueErrorTranslationFiles_param_type_type_SecureValueType' => 'One of [secureValueTypePersonalDetails](../constructors/secureValueTypePersonalDetails.md), [secureValueTypePassport](../constructors/secureValueTypePassport.md), [secureValueTypeDriverLicense](../constructors/secureValueTypeDriverLicense.md), [secureValueTypeIdentityCard](../constructors/secureValueTypeIdentityCard.md), [secureValueTypeInternalPassport](../constructors/secureValueTypeInternalPassport.md), [secureValueTypeUtilityBill](../constructors/secureValueTypeUtilityBill.md), [secureValueTypeBankStatement](../constructors/secureValueTypeBankStatement.md), [secureValueTypeRentalAgreement](../constructors/secureValueTypeRentalAgreement.md), [secureValueTypePassportRegistration](../constructors/secureValueTypePassportRegistration.md), [secureValueTypeTemporaryRegistration](../constructors/secureValueTypeTemporaryRegistration.md)',
    'object_secureValueErrorTranslationFiles_param_file_hash_type_Vector t' => 'File hash',
    'object_secureValueErrorTranslationFiles_param_text_type_string' => 'Error message',
    'object_passwordKdfAlgoUnknown' => 'Unknown KDF (most likely, the client is outdated and does not support the specified KDF algorithm)',
    'object_passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow' => 'This key derivation algorithm defines that [SRP 2FA login](https://core.telegram.org/api/srp) must be used',
    'object_passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow_param_salt1_type_bytes' => 'One of two salts used by the derivation function (see [SRP 2FA login](https://core.telegram.org/api/srp))',
    'object_passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow_param_salt2_type_bytes' => 'One of two salts used by the derivation function (see [SRP 2FA login](https://core.telegram.org/api/srp))',
    'object_passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow_param_g_type_int' => 'Base (see [SRP 2FA login](https://core.telegram.org/api/srp))',
    'object_passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow_param_p_type_bytes' => '2048-bit modulus (see [SRP 2FA login](https://core.telegram.org/api/srp))',
    'object_securePasswordKdfAlgoUnknown' => 'Unknown KDF algo (most likely the client has to be updated)',
    'object_securePasswordKdfAlgoPBKDF2HMACSHA512iter100000' => 'PBKDF2 with SHA512 and 100000 iterations KDF algo',
    'object_securePasswordKdfAlgoPBKDF2HMACSHA512iter100000_param_salt_type_bytes' => 'Salt',
    'object_securePasswordKdfAlgoSHA512' => 'SHA512 KDF algo',
    'object_securePasswordKdfAlgoSHA512_param_salt_type_bytes' => 'Salt',
    'object_secureSecretSettings' => 'Secure settings',
    'object_secureSecretSettings_param_secure_algo_type_SecurePasswordKdfAlgo' => 'Secure KDF algo',
    'object_secureSecretSettings_param_secure_secret_type_bytes' => 'Secure secret',
    'object_secureSecretSettings_param_secure_secret_id_type_long' => 'Secret ID',
    'object_inputCheckPasswordEmpty' => 'There is no password',
    'object_inputCheckPasswordSRP' => 'Constructor for checking the validity of a 2FA SRP password (see [SRP](https://core.telegram.org/api/srp))',
    'object_inputCheckPasswordSRP_param_srp_id_type_long' => '[SRP ID](https://core.telegram.org/api/srp)',
    'object_inputCheckPasswordSRP_param_A_type_bytes' => '`A` parameter (see [SRP](https://core.telegram.org/api/srp))',
    'object_inputCheckPasswordSRP_param_M1_type_bytes' => '`M1` parameter (see [SRP](https://core.telegram.org/api/srp))',
    'object_secureRequiredType' => 'Required type',
    'object_secureRequiredType_param_native_names_type_true' => 'Native names',
    'object_secureRequiredType_param_selfie_required_type_true' => 'Is a selfie required',
    'object_secureRequiredType_param_translation_required_type_true' => 'Is a translation required',
    'object_secureRequiredType_param_type_type_SecureValueType' => 'Secure value type',
    'object_secureRequiredTypeOneOf' => 'One of',
    'object_secureRequiredTypeOneOf_param_types_type_Vector t' => 'Types',
    'object_help.passportConfigNotModified' => 'Password configuration not modified',
    'object_help.passportConfig' => 'Telegram [passport](https://core.telegram.org/passport) configuration',
    'object_help.passportConfig_param_hash_type_int' => '[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)',
    'object_help.passportConfig_param_countries_langs_type_DataJSON' => 'Localization',
    'object_inputAppEvent_param_data_type_JSONValue' => 'Details of the event',
    'object_jsonObjectValue' => 'JSON key: value pair',
    'object_jsonObjectValue_param_key_type_string' => 'Key',
    'object_jsonObjectValue_param_value_type_JSONValue' => 'Value',
    'object_jsonNull' => 'Null JSON value',
    'object_jsonBool' => 'JSON boolean value',
    'object_jsonBool_param_value_type_Bool' => 'Value',
    'object_jsonNumber' => 'JSON numeric value',
    'object_jsonNumber_param_value_type_double' => 'Value',
    'object_jsonString' => 'JSON string',
    'object_jsonString_param_value_type_string' => 'Value',
    'object_jsonArray' => 'JSON array',
    'object_jsonArray_param_value_type_Vector t' => 'Value',
    'object_jsonObject' => 'JSON object value',
    'object_jsonObject_param_value_type_Vector t' => 'Value',
    'object_pageTableCell' => 'Table cell',
    'object_pageTableCell_param_header_type_true' => 'Is this element part of the column header',
    'object_pageTableCell_param_align_center_type_true' => 'Horizontally centered block',
    'object_pageTableCell_param_align_right_type_true' => 'Right-aligned block',
    'object_pageTableCell_param_valign_middle_type_true' => 'Vertically centered block',
    'object_pageTableCell_param_valign_bottom_type_true' => 'Block vertically-alligned to the bottom',
    'object_pageTableCell_param_text_type_RichText' => 'Content',
    'object_pageTableCell_param_colspan_type_int' => 'For how many columns should this cell extend',
    'object_pageTableCell_param_rowspan_type_int' => 'For how many rows should this cell extend',
    'object_pageTableRow' => 'Table row',
    'object_pageTableRow_param_cells_type_Vector t' => 'Cells',
    'object_pageCaption' => 'Page caption',
    'object_pageCaption_param_text_type_RichText' => 'Caption',
    'object_pageCaption_param_credit_type_RichText' => 'Credits',
    'object_pageListItemText' => 'List item',
    'object_pageListItemText_param_text_type_RichText' => 'Text',
    'object_pageListItemBlocks' => 'List item',
    'object_pageListItemBlocks_param_blocks_type_Vector t' => 'Blocks',
    'object_pageListOrderedItemText' => 'Ordered list of text items',
    'object_pageListOrderedItemText_param_num_type_string' => 'Number of element within ordered list',
    'object_pageListOrderedItemText_param_text_type_RichText' => 'Text',
    'object_pageListOrderedItemBlocks' => 'Ordered list of [IV](https://instantview.telegram.org) blocks',
    'object_pageListOrderedItemBlocks_param_num_type_string' => 'Number of element within ordered list',
    'object_pageListOrderedItemBlocks_param_blocks_type_Vector t' => 'Blocks',
    'object_pageRelatedArticle' => 'Related article',
    'object_pageRelatedArticle_param_url_type_string' => 'URL of article',
    'object_pageRelatedArticle_param_webpage_id_type_long' => 'Webpage ID of generated IV preview',
    'object_pageRelatedArticle_param_title_type_string' => 'Title',
    'object_pageRelatedArticle_param_description_type_string' => 'Description',
    'object_pageRelatedArticle_param_photo_id_type_long' => 'ID of preview photo',
    'object_pageRelatedArticle_param_author_type_string' => 'Author name',
    'object_pageRelatedArticle_param_published_date_type_int' => 'Date of pubblication',
    'object_page' => '[Instant view](https://instantview.telegram.org) page',
    'object_page_param_part_type_true' => 'Indicates that not full page preview is available to the client and it will need to fetch full Instant View from the server using [messages.getWebPagePreview](../methods/messages.getWebPagePreview.md).',
    'object_page_param_rtl_type_true' => 'Whether the page contains RTL text',
    'object_page_param_v2_type_true' => 'Whether this is an [IV v2](https://instantview.telegram.org/docs#what-39s-new-in-2-0) page',
    'object_page_param_url_type_string' => 'Original page HTTP URL',
    'object_page_param_blocks_type_Vector t' => 'Blocks',
    'object_page_param_photos_type_Vector t' => 'Photos',
    'object_page_param_documents_type_Vector t' => 'Documents',
    'object_help.supportName' => 'Localized name for telegram support',
    'object_help.supportName_param_name_type_string' => 'Localized name',
    'object_help.userInfoEmpty' => 'Internal use',
    'object_help.userInfo' => 'Internal use',
    'object_help.userInfo_param_message_type_string' => 'Info',
    'object_help.userInfo_param_entities_type_Vector t' => 'Entities',
    'object_help.userInfo_param_author_type_string' => 'Author',
    'object_help.userInfo_param_date_type_int' => 'Date',
    'object_pollAnswer' => 'A possible answer of a poll',
    'object_pollAnswer_param_text_type_string' => 'Textual representation of the answer',
    'object_pollAnswer_param_option_type_bytes' => 'The param that has to be passed to [messages.sendVote](../methods/messages.sendVote.md).',
    'object_poll' => 'Poll',
    'object_poll_param_id_type_long' => 'ID of the poll',
    'object_poll_param_closed_type_true' => 'Whether the poll is closed and doesn\'t accept any more answers',
    'object_poll_param_question_type_string' => 'The question of the poll',
    'object_poll_param_answers_type_Vector t' => 'Answers',
    'object_pollAnswerVoters' => 'A poll answer, and how users voted on it',
    'object_pollAnswerVoters_param_chosen_type_true' => 'Whether we have chosen this answer',
    'object_pollAnswerVoters_param_option_type_bytes' => 'The param that has to be passed to [messages.sendVote](../methods/messages.sendVote.md).',
    'object_pollAnswerVoters_param_voters_type_int' => 'How many users voted for this option',
    'object_pollResults' => 'Results of poll',
    'object_pollResults_param_min_type_true' => 'Similar to [min](https://core.telegram.org/api/min) objects, used for poll constructors that are the same for all users so they don\'t have option chosen by the current user (you can use [messages.getPollResults](../methods/messages.getPollResults.md) to get the full poll results).',
    'object_pollResults_param_results_type_Vector t' => 'Results',
    'object_pollResults_param_total_voters_type_int' => 'Total number of people that voted in the poll',
    'object_chatOnlines' => 'Number of online users in a chat',
    'object_chatOnlines_param_onlines_type_int' => 'Number of online users',
    'object_statsURL' => 'URL with chat statistics',
    'object_statsURL_param_url_type_string' => 'Chat statistics',
    'method_auth.sendCode_param_settings_type_CodeSettings' => 'You cannot use this method directly, use the phoneLogin method instead (see https://docs.madelineproto.xyz for more info)',
    'method_account.getWallPapers_param_hash_type_Vector t' => 'IDs of previously fetched wallpapers',
    'method_account.sendChangePhoneCode_param_settings_type_CodeSettings' => 'Phone code settings',
    'method_account.sendConfirmPhoneCode_param_settings_type_CodeSettings' => 'Phone code settings',
    'method_account.sendVerifyPhoneCode_param_settings_type_CodeSettings' => 'Phone code settings',
    'method_account.getWallPaper' => 'Get info about a certain wallpaper',
    'method_account.getWallPaper_param_wallpaper_type_InputWallPaper' => 'The wallpaper to get info about',
    'method_account.uploadWallPaper' => 'Create and upload a new wallpaper',
    'method_account.uploadWallPaper_param_file_type_InputFile' => 'The JPG/PNG wallpaper',
    'method_account.uploadWallPaper_param_mime_type_type_string' => 'MIME type of uploaded wallpaper',
    'method_account.uploadWallPaper_param_settings_type_WallPaperSettings' => 'Wallpaper settings',
    'method_account.saveWallPaper' => 'Install/uninstall wallpaper',
    'method_account.saveWallPaper_param_wallpaper_type_InputWallPaper' => 'Wallpaper to save',
    'method_account.saveWallPaper_param_unsave_type_Bool' => 'Uninstall wallpaper?',
    'method_account.saveWallPaper_param_settings_type_WallPaperSettings' => 'Wallpaper settings',
    'method_account.installWallPaper' => 'Install wallpaper',
    'method_account.installWallPaper_param_wallpaper_type_InputWallPaper' => 'Wallpaper to install',
    'method_account.installWallPaper_param_settings_type_WallPaperSettings' => 'Wallpaper settings',
    'method_account.resetWallPapers' => 'Delete installed wallpapers',
    'method_messages.exportChatInvite_param_peer_type_InputPeer' => 'Chat',
    'method_messages.editChatAbout' => 'Edit the description of a [group/supergroup/channel](https://core.telegram.org/api/channel).',
    'method_messages.editChatAbout_param_peer_type_InputPeer' => 'The [group/supergroup/channel](https://core.telegram.org/api/channel).',
    'method_messages.editChatAbout_param_about_type_string' => 'The new description',
    'method_messages.editChatDefaultBannedRights' => 'Edit the default banned rights of a [channel/supergroup/group](https://core.telegram.org/api/channel).',
    'method_messages.editChatDefaultBannedRights_param_peer_type_InputPeer' => 'The peer',
    'method_messages.editChatDefaultBannedRights_param_banned_rights_type_ChatBannedRights' => 'The new global rights',
    'method_channels.editAdmin_param_admin_rights_type_ChatAdminRights' => 'The admin rights',
    'method_channels.editBanned_param_banned_rights_type_ChatBannedRights' => 'The banned rights',
    'object_chat_param_admin_rights_type_ChatAdminRights' => '[Admin rights](https://core.telegram.org/api/rights) of the user in the group',
    'object_chat_param_default_banned_rights_type_ChatBannedRights' => '[Default banned rights](https://core.telegram.org/api/rights) of all users in the group',
    'object_channel_param_admin_rights_type_ChatAdminRights' => 'Admin rights of the user in this channel (see [rights](https://core.telegram.org/api/rights))',
    'object_channel_param_banned_rights_type_ChatBannedRights' => 'Banned rights of the user in this channel (see [rights](https://core.telegram.org/api/rights))',
    'object_channel_param_default_banned_rights_type_ChatBannedRights' => 'Default chat rights (see [rights](https://core.telegram.org/api/rights))',
    'object_chatFull_param_can_set_username_type_true' => 'Can we change the username of this chat',
    'object_chatFull_param_about_type_string' => 'About string for this chat',
    'object_photoStrippedSize' => 'Just the image\'s content',
    'object_photoStrippedSize_param_type_type_string' => 'Thumbnail type',
    'object_photoStrippedSize_param_bytes_type_bytes' => 'Thumbnail data',
    'object_wallPaper_param_id_type_long' => 'Identifier',
    'object_wallPaper_param_creator_type_true' => 'Creator of the wallpaper',
    'object_wallPaper_param_default_type_true' => 'Whether this is the default wallpaper',
    'object_wallPaper_param_pattern_type_true' => 'Pattern',
    'object_wallPaper_param_dark_type_true' => 'Dark mode',
    'object_wallPaper_param_access_hash_type_long' => 'Access hash',
    'object_wallPaper_param_slug_type_string' => 'Unique wallpaper ID',
    'object_wallPaper_param_document_type_Document' => 'The actual wallpaper',
    'object_wallPaper_param_settings_type_WallPaperSettings' => 'Wallpaper settings',
    'object_messages.messagesSlice_param_inexact_type_true' => 'If set, indicates that the results may be inexact',
    'object_updateChatDefaultBannedRights' => 'Default banned rights in a [normal chat](https://core.telegram.org/api/channel) were updated',
    'object_updateChatDefaultBannedRights_param_peer_type_Peer' => 'The chat',
    'object_updateChatDefaultBannedRights_param_default_banned_rights_type_ChatBannedRights' => 'New default banned rights',
    'object_updateChatDefaultBannedRights_param_version_type_int' => 'Version',
    'object_document_param_thumbs_type_Vector t' => 'Thumbnails',
    'object_channelParticipantAdmin_param_self_type_true' => 'Is this the current user',
    'object_channelParticipantAdmin_param_admin_rights_type_ChatAdminRights' => 'Admin [rights](https://core.telegram.org/api/rights)',
    'object_channelParticipantBanned_param_banned_rights_type_ChatBannedRights' => 'Banned [rights](https://core.telegram.org/api/rights)',
    'object_channelParticipantsContacts' => 'Fetch only participants that are also contacts',
    'object_channelParticipantsContacts_param_q_type_string' => 'Optional search query for searching contact participants by name',
    'object_channelAdminLogEventActionDefaultBannedRights' => 'The default banned rights were modified',
    'object_channelAdminLogEventActionDefaultBannedRights_param_prev_banned_rights_type_ChatBannedRights' => 'Previous global [banned rights](https://core.telegram.org/api/rights)',
    'object_channelAdminLogEventActionDefaultBannedRights_param_new_banned_rights_type_ChatBannedRights' => 'New glboal [banned rights](https://core.telegram.org/api/rights).',
    'object_channelAdminLogEventActionStopPoll' => 'A poll was stopped',
    'object_channelAdminLogEventActionStopPoll_param_message_type_Message' => 'The poll that was stopped',
    'object_chatAdminRights' => 'Represents the rights of an admin in a [channel/supergroup](https://core.telegram.org/api/channel).',
    'object_chatAdminRights_param_change_info_type_true' => 'If set, allows the admin to modify the description of the [channel/supergroup](https://core.telegram.org/api/channel)',
    'object_chatAdminRights_param_post_messages_type_true' => 'If set, allows the admin to post messages in the [channel](https://core.telegram.org/api/channel)',
    'object_chatAdminRights_param_edit_messages_type_true' => 'If set, allows the admin to also edit messages from other admins in the [channel](https://core.telegram.org/api/channel)',
    'object_chatAdminRights_param_delete_messages_type_true' => 'If set, allows the admin to also delete messages from other admins in the [channel](https://core.telegram.org/api/channel)',
    'object_chatAdminRights_param_ban_users_type_true' => 'If set, allows the admin to ban users from the [channel/supergroup](https://core.telegram.org/api/channel)',
    'object_chatAdminRights_param_invite_users_type_true' => 'If set, allows the admin to invite users in the [channel/supergroup](https://core.telegram.org/api/channel)',
    'object_chatAdminRights_param_pin_messages_type_true' => 'If set, allows the admin to pin messages in the [channel/supergroup](https://core.telegram.org/api/channel)',
    'object_chatAdminRights_param_add_admins_type_true' => 'If set, allows the admin to add other admins with the same (or more limited) permissions in the [channel/supergroup](https://core.telegram.org/api/channel)',
    'object_chatBannedRights' => 'Represents the rights of a normal user in a [supergroup/channel/chat](https://core.telegram.org/api/channel). In this case, the flags are inverted: if set, a flag **does not allow** a user to do X.',
    'object_chatBannedRights_param_view_messages_type_true' => 'If set, does not allow a user to view messages in a [supergroup/channel/chat](https://core.telegram.org/api/channel)',
    'object_chatBannedRights_param_sendMessages_type_true' => 'Can send messages?',
    'object_chatBannedRights_param_send_media_type_true' => 'If set, does not allow a user to send any media in a [supergroup/chat](https://core.telegram.org/api/channel)',
    'object_chatBannedRights_param_send_stickers_type_true' => 'If set, does not allow a user to send stickers in a [supergroup/chat](https://core.telegram.org/api/channel)',
    'object_chatBannedRights_param_send_gifs_type_true' => 'If set, does not allow a user to send gifs in a [supergroup/chat](https://core.telegram.org/api/channel)',
    'object_chatBannedRights_param_send_games_type_true' => 'If set, does not allow a user to send games in a [supergroup/chat](https://core.telegram.org/api/channel)',
    'object_chatBannedRights_param_send_inline_type_true' => 'If set, does not allow a user to use inline bots in a [supergroup/chat](https://core.telegram.org/api/channel)',
    'object_chatBannedRights_param_embed_links_type_true' => 'If set, does not allow a user to embed links in the messages of a [supergroup/chat](https://core.telegram.org/api/channel)',
    'object_chatBannedRights_param_send_polls_type_true' => 'If set, does not allow a user to send stickers in a [supergroup/chat](https://core.telegram.org/api/channel)',
    'object_chatBannedRights_param_change_info_type_true' => 'If set, does not allow any user to change the description of a [supergroup/chat](https://core.telegram.org/api/channel)',
    'object_chatBannedRights_param_invite_users_type_true' => 'If set, does not allow any user to invite users in a [supergroup/chat](https://core.telegram.org/api/channel)',
    'object_chatBannedRights_param_pin_messages_type_true' => 'If set, does not allow any user to pin messages in a [supergroup/chat](https://core.telegram.org/api/channel)',
    'object_chatBannedRights_param_until_date_type_int' => 'Validity of said permissions (0 = forever, forever = 2^31-1 for now).',
    'object_inputWallPaper' => 'Wallpaper',
    'object_inputWallPaper_param_id_type_long' => 'Wallpaper ID',
    'object_inputWallPaper_param_access_hash_type_long' => 'Access hash',
    'object_inputWallPaperSlug' => 'Wallpaper by slug (a unique ID)',
    'object_inputWallPaperSlug_param_slug_type_string' => 'Unique wallpaper ID',
    'object_account.wallPapersNotModified' => 'No new wallpapers were found',
    'object_account.wallPapers' => 'Installed wallpapers',
    'object_account.wallPapers_param_hash_type_int' => '[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)',
    'object_account.wallPapers_param_wallpapers_type_Vector t' => 'Wallpapers',
    'object_codeSettings' => 'Settings used by telegram servers for sending the confirm code.

Example implementations: [telegram for android](https://github.com/DrKLO/Telegram/blob/master/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java), [tdlib](https://github.com/tdlib/td/tree/master/td/telegram/SendCodeHelper.cpp).',
    'object_codeSettings_param_allow_flashcall_type_true' => 'Whether to allow phone verification via [phone calls](https://core.telegram.org/api/auth).',
    'object_codeSettings_param_current_number_type_true' => 'Pass true if the phone number is used on the current device. Ignored if allow\\_flashcall is not set.',
    'object_codeSettings_param_app_hash_persistent_type_true' => 'Persistent hash?',
    'object_codeSettings_param_app_hash_type_string' => 'Hash type',
    'object_wallPaperSettings' => 'Wallpaper settings',
    'object_wallPaperSettings_param_blur_type_true' => 'If set, the wallpaper must be downscaled to fit in 450x450 square and then box-blurred with radius 12',
    'object_wallPaperSettings_param_motion_type_true' => 'If set, the background needs to be slightly moved when device is rotated',
    'object_wallPaperSettings_param_background_color_type_int' => 'If set, a PNG pattern is to be combined with the `color` chosen by the user: the main color of the background in RGB24 format',
    'object_wallPaperSettings_param_intensity_type_int' => 'Intensity of the pattern when it is shown above the main background color, 0-100',
    'object_inputPrivacyKeyProfilePhoto' => 'Whether people will be able to see the user\'s profile picture',
    'object_inputPrivacyKeyForwards' => 'Whether messages forwarded from this user will be [anonymous](https://telegram.org/blog/unsend-privacy-emoji#anonymous-forwarding)',
    'method_account.getAutoDownloadSettings' => 'Get media autodownload settings',
    'method_account.saveAutoDownloadSettings' => 'Change media autodownload settings',
    'method_account.saveAutoDownloadSettings_param_low_type_true' => 'Whether to save settings in the low data usage preset',
    'method_account.saveAutoDownloadSettings_param_high_type_true' => 'Whether to save settings in the high data usage preset',
    'method_account.saveAutoDownloadSettings_param_settings_type_AutoDownloadSettings' => 'Media autodownload settings',
    'method_messages.deleteHistory_param_revoke_type_true' => 'Whether to delete the message history for all chat participants',
    'method_messages.getStatsURL_param_dark_type_true' => 'Pass true if a URL with the dark theme must be returned',
    'method_messages.getStatsURL_param_params_type_string' => 'Parameters from `tg://statsrefresh?params=******` link',
    'method_messages.getEmojiKeywords' => 'Get localized emoji keywords',
    'method_messages.getEmojiKeywords_param_lang_code_type_string' => 'Language code',
    'method_messages.getEmojiKeywordsDifference' => 'Get changed emoji keywords',
    'method_messages.getEmojiKeywordsDifference_param_lang_code_type_string' => 'Language code',
    'method_messages.getEmojiKeywordsDifference_param_from_version_type_int' => 'Previous emoji keyword localization version',
    'method_messages.getEmojiURL' => 'Returns an HTTP URL which can be used to automatically log in into translation platform and suggest new emoji replacements. The URL will be valid for 30 seconds after generation',
    'method_messages.getEmojiURL_param_lang_code_type_string' => 'Language code for which the emoji replacements will be suggested',
    'method_phone.setCallRating_param_user_initiative_type_true' => 'Whether the user decided on their own initiative to rate the call',
    'method_langpack.getDifference_param_lang_pack_type_string' => 'Language pack',
    'object_user_param_support_type_true' => 'Whether this is an official support user',
    'object_updateChatPinnedMessage_param_version_type_int' => 'Used to reorder updates in legacy groups',
    'object_privacyKeyForwards' => 'Whether messages forwarded from the user will be [anonymously forwarded](https://telegram.org/blog/unsend-privacy-emoji#anonymous-forwarding)',
    'object_privacyKeyProfilePhoto' => 'Whether the profile picture of the user is visible',
    'object_stickerSet_param_thumb_type_PhotoSize' => 'Thumbnail for stickerset',
    'object_messageFwdHeader_param_from_name_type_string' => 'The name of the user that originally sent the message',
    'object_autoDownloadSettings' => 'Autodownload settings',
    'object_autoDownloadSettings_param_disabled_type_true' => 'Disable automatic media downloads?',
    'object_autoDownloadSettings_param_video_preload_large_type_true' => 'Whether to preload the first seconds of videos larger than the specified limit',
    'object_autoDownloadSettings_param_audio_preload_next_type_true' => 'Whether to preload the next audio track when you\'re listening to music',
    'object_autoDownloadSettings_param_phonecalls_less_data_type_true' => 'Whether to enable data saving mode in phone calls',
    'object_autoDownloadSettings_param_photo_size_max_type_int' => 'Maximum size of photos to preload',
    'object_autoDownloadSettings_param_video_size_max_type_int' => 'Maximum size of videos to preload',
    'object_autoDownloadSettings_param_file_size_max_type_int' => 'Maximum size of other files to preload',
    'object_account.autoDownloadSettings' => 'Media autodownload settings',
    'object_account.autoDownloadSettings_param_low_type_AutoDownloadSettings' => 'Low data usage preset',
    'object_account.autoDownloadSettings_param_medium_type_AutoDownloadSettings' => 'Medium data usage preset',
    'object_account.autoDownloadSettings_param_high_type_AutoDownloadSettings' => 'High data usage preset',
    'object_emojiKeyword' => 'Emoji keyword',
    'object_emojiKeyword_param_keyword_type_string' => 'Keyword',
    'object_emojiKeyword_param_emoticons_type_Vector t' => 'Emoticons',
    'object_emojiKeywordDeleted' => 'Deleted emoji keyword',
    'object_emojiKeywordDeleted_param_keyword_type_string' => 'Keyword',
    'object_emojiKeywordDeleted_param_emoticons_type_Vector t' => 'Emoticons',
    'object_emojiKeywordsDifference' => 'Changes to emoji keywords',
    'object_emojiKeywordsDifference_param_lang_code_type_string' => 'Language code for keywords',
    'object_emojiKeywordsDifference_param_from_version_type_int' => 'Previous emoji keyword list version',
    'object_emojiKeywordsDifference_param_version_type_int' => 'Current version of emoji keyword list',
    'object_emojiKeywordsDifference_param_keywords_type_Vector t' => 'Keywords',
    'object_emojiURL' => 'An HTTP URL which can be used to automatically log in into translation platform and suggest new emoji replacements. The URL will be valid for 30 seconds after generation',
    'object_emojiURL_param_url_type_string' => 'An HTTP URL which can be used to automatically log in into translation platform and suggest new emoji replacements. The URL will be valid for 30 seconds after generation',
    'method_contacts.getTopPeers_param_forward_users_type_true' => 'Users to which the users often forwards messages to',
    'method_contacts.getTopPeers_param_forward_chats_type_true' => 'Chats to which the users often forwards messages to',
    'method_messages.getDialogs_param_folder_id_type_int' => 'Folder ID',
    'method_messages.searchGlobal_param_offset_rate_type_int' => 'Initially 0, then set to the [`next_rate` parameter of messages.messagesSlice](../constructors/messages.messagesSlice.md)',
    'method_messages.reorderPinnedDialogs_param_folder_id_type_int' => 'Folder ID',
    'method_messages.getPinnedDialogs_param_folder_id_type_int' => 'Folder ID',
    'method_messages.getEmojiKeywordsLanguages' => 'Get info about an emoji keyword localization',
    'method_messages.getEmojiKeywordsLanguages_param_lang_codes_type_Vector t' => 'Language codes',
    'method_messages.getSearchCounters' => 'Get the number of results that would be found by a [messages.search](../methods/messages.search.md) call with the same parameters',
    'method_messages.getSearchCounters_param_peer_type_InputPeer' => 'Peer where to search',
    'method_messages.getSearchCounters_param_filters_type_Vector t' => 'Filters',
    'method_messages.requestUrlAuth' => 'Get more info about a Seamless Telegram Login authorization request, for more info [click here »](https://core.telegram.org/api/url-authorization)',
    'method_messages.requestUrlAuth_param_peer_type_InputPeer' => 'Peer where the message is located',
    'method_messages.requestUrlAuth_param_msg_id_type_int' => 'The message',
    'method_messages.requestUrlAuth_param_button_id_type_int' => 'The ID of the button with the authorization request',
    'method_messages.acceptUrlAuth' => 'Use this to accept a Seamless Telegram Login authorization request, for more info [click here »](https://core.telegram.org/api/url-authorization)',
    'method_messages.acceptUrlAuth_param_write_allowed_type_true' => 'Set this flag to allow the bot to send messages to you (if requested)',
    'method_messages.acceptUrlAuth_param_peer_type_InputPeer' => 'The location of the message',
    'method_messages.acceptUrlAuth_param_msg_id_type_int' => 'Message ID of the message with the login button',
    'method_messages.acceptUrlAuth_param_button_id_type_int' => 'ID of the login button',
    'method_channels.getGroupsForDiscussion' => 'Get all groups that can be used as [discussion groups](https://telegram.org/blog/privacy-discussions-web-bots)',
    'method_channels.getBroadcastsForDiscussion' => 'Get channels for discussion',
    'method_channels.setDiscussionGroup' => 'Associate a group to a channel as [discussion group](https://telegram.org/blog/privacy-discussions-web-bots) for that channel',
    'method_channels.setDiscussionGroup_param_broadcast_type_InputChannel' => 'Channel',
    'method_channels.setDiscussionGroup_param_group_type_InputChannel' => 'Discussion group to associate to the channel',
    'method_phone.requestCall_param_video_type_true' => 'You cannot use this method directly, see https://docs.madelineproto.xyz#calls for more info on handling calls',
    'method_phone.discardCall_param_video_type_true' => 'You cannot use this method directly, see https://docs.madelineproto.xyz#calls for more info on handling calls',
    'method_folders.editPeerFolders' => 'Edit peers in folder',
    'method_folders.editPeerFolders_param_folder_peers_type_Vector t' => 'New folder peers',
    'method_folders.deleteFolder' => 'Delete a folder',
    'method_folders.deleteFolder_param_folder_id_type_int' => 'Folder to delete',
    'object_inputPeerUserFromMessage' => 'Defines a [min](https://core.telegram.org/api/min) user that was seen in a certain message of a certain chat.',
    'object_inputPeerUserFromMessage_param_peer_type_InputPeer' => 'The chat where the user was seen',
    'object_inputPeerUserFromMessage_param_msg_id_type_int' => 'The message ID',
    'object_inputPeerUserFromMessage_param_user_id_type_int' => 'The identifier of the user that was seen',
    'object_inputPeerChannelFromMessage' => 'Defines a [min](https://core.telegram.org/api/min) channel that was seen in a certain message of a certain chat.',
    'object_inputPeerChannelFromMessage_param_peer_type_InputPeer' => 'The chat where the channel\'s message was seen',
    'object_inputPeerChannelFromMessage_param_msg_id_type_int' => 'The message ID',
    'object_inputPeerChannelFromMessage_param_channel_id_type_int' => 'The identifier of the channel that was seen',
    'object_inputUserFromMessage' => 'Defines a [min](https://core.telegram.org/api/min) user that was seen in a certain message of a certain chat.',
    'object_inputUserFromMessage_param_peer_type_InputPeer' => 'The chat where the user was seen',
    'object_inputUserFromMessage_param_msg_id_type_int' => 'The message ID',
    'object_inputUserFromMessage_param_user_id_type_int' => 'The identifier of the user that was seen',
    'object_inputDocumentFileLocation_param_thumb_size_type_string' => 'Thumbnail size to download the thumbnail',
    'object_inputPhotoFileLocation' => 'Use this object to download a photo with [upload.getFile](../methods/upload.getFile.md) method',
    'object_inputPhotoFileLocation_param_id_type_long' => 'Photo ID, obtained from the [photo](../constructors/photo.md) object',
    'object_inputPhotoFileLocation_param_access_hash_type_long' => 'Photo\'s access hash, obtained from the [photo](../constructors/photo.md) object',
    'object_inputPhotoFileLocation_param_file_reference_type_bytes' => '[File reference](https://core.telegram.org/api/file_reference)',
    'object_inputPhotoFileLocation_param_thumb_size_type_string' => 'The [PhotoSize](../types/PhotoSize.md) to download: must be set to the `type` field of the desired PhotoSize object of the [photo](../constructors/photo.md)',
    'object_inputPeerPhotoFileLocation' => 'Location of profile photo of channel/group/supergroup/user',
    'object_inputPeerPhotoFileLocation_param_big_type_true' => 'Whether to download the high-quality version of the picture',
    'object_inputPeerPhotoFileLocation_param_peer_type_InputPeer' => 'The peer whose profile picture should be downloaded',
    'object_inputPeerPhotoFileLocation_param_volume_id_type_long' => 'Volume ID from [FileLocation](../types/FileLocation.md) met in the profile photo container.',
    'object_inputPeerPhotoFileLocation_param_local_id_type_int' => 'Local ID from [FileLocation](../types/FileLocation.md) met in the profile photo container.',
    'object_inputStickerSetThumb' => 'Location of stickerset thumbnail (see [files](https://core.telegram.org/api/files))',
    'object_inputStickerSetThumb_param_stickerset_type_InputStickerSet' => 'Sticker set',
    'object_inputStickerSetThumb_param_volume_id_type_long' => 'Volume ID',
    'object_inputStickerSetThumb_param_local_id_type_int' => 'Local ID',
    'object_user_param_scam_type_true' => 'This may be a scam user',
    'object_userProfilePhoto_param_dc_id_type_int' => 'DC ID where the photo is stored',
    'object_channel_param_scam_type_true' => 'This channel/supergroup is probably a scam',
    'object_channel_param_has_link_type_true' => 'Whether this channel has a private join link',
    'object_chatFull_param_folder_id_type_int' => 'Folder ID',
    'object_channelFull_param_folder_id_type_int' => 'Folder ID',
    'object_channelFull_param_linked_chat_id_type_int' => 'ID of the linked discussion chat for channels',
    'object_channelFull_param_pts_type_int' => 'Latest [PTS](https://core.telegram.org/api/updates) for this channel',
    'object_chatPhoto_param_dc_id_type_int' => 'DC where this photo is stored',
    'object_message_param_legacy_type_true' => 'This is a legacy message: it has to be refetched with the new layer',
    'object_messageService_param_legacy_type_true' => 'This is a legacy message: it has to be refetched with the new layer',
    'object_messageActionPhoneCall_param_video_type_true' => 'Is this a video call?',
    'object_dialog_param_folder_id_type_int' => 'Folder ID',
    'object_dialogFolder' => 'Dialog in folder',
    'object_dialogFolder_param_pinned_type_true' => 'Is this folder pinned',
    'object_dialogFolder_param_folder_type_Folder' => 'The folder',
    'object_dialogFolder_param_peer_type_Peer' => 'Peer in folder',
    'object_dialogFolder_param_top_message_type_int' => 'Latest message ID of dialog',
    'object_dialogFolder_param_unread_muted_peers_count_type_int' => 'Number of unread muted peers in folder',
    'object_dialogFolder_param_unread_unmuted_peers_count_type_int' => 'Number of unread unmuted peers in folder',
    'object_dialogFolder_param_unread_muted_messages_count_type_int' => 'Number of unread messages from muted peers in folder',
    'object_dialogFolder_param_unread_unmuted_messages_count_type_int' => 'Number of unread messages from unmuted peers in folder',
    'object_photo_param_dc_id_type_int' => 'DC ID to use for download',
    'object_userFull_param_folder_id_type_int' => 'Folder ID',
    'object_messages.messagesSlice_param_next_rate_type_int' => 'Rate to use in the `offset_rate` parameter in the next call to [messages.searchGlobal](../methods/messages.searchGlobal.md)',
    'object_updateReadHistoryInbox_param_folder_id_type_int' => 'Folder ID',
    'object_updateReadHistoryInbox_param_still_unread_count_type_int' => 'Number of messages that are still unread',
    'object_updateReadChannelInbox_param_folder_id_type_int' => 'ID of folder for peers in folders',
    'object_updateReadChannelInbox_param_still_unread_count_type_int' => 'Count of messages weren\'t read yet',
    'object_updateReadChannelInbox_param_pts_type_int' => '[Event count after generation](https://core.telegram.org/api/updates)',
    'object_updateDialogPinned_param_folder_id_type_int' => 'If the dialog is in a folder, the folder ID',
    'object_updatePinnedDialogs_param_folder_id_type_int' => 'If the dialogs are in a folder, the folder ID',
    'object_updateFolderPeers' => 'The dialog list of a folder was changed',
    'object_updateFolderPeers_param_folder_peers_type_Vector t' => 'New folder peers',
    'object_updateFolderPeers_param_pts_type_int' => '[Event count after generation](https://core.telegram.org/api/updates)',
    'object_updateFolderPeers_param_pts_count_type_int' => '[Number of events that were generated](https://core.telegram.org/api/updates)',
    'object_config_param_pinned_infolder_count_max_type_int' => 'Maximum count of dialogs per folder',
    'object_inputPrivacyKeyPhoneNumber' => 'Whether people will be able to see the user\'s phone number',
    'object_privacyKeyPhoneNumber' => 'Whether the user allows us to see his phone number',
    'object_inputPrivacyValueAllowChatParticipants' => 'Allow only participants of certain chats',
    'object_inputPrivacyValueAllowChatParticipants_param_chats_type_Vector t' => 'Chats',
    'object_inputPrivacyValueDisallowChatParticipants' => 'Disallow only participants of certain chats',
    'object_inputPrivacyValueDisallowChatParticipants_param_chats_type_Vector t' => 'CHats',
    'object_privacyValueAllowChatParticipants' => 'Allow all participants of certain chats',
    'object_privacyValueAllowChatParticipants_param_chats_type_Vector t' => 'Allowed chats',
    'object_privacyValueDisallowChatParticipants' => 'Disallow only participants of certain chats',
    'object_privacyValueDisallowChatParticipants_param_chats_type_Vector t' => 'Disallowed chats',
    'object_account.privacyRules_param_chats_type_Vector t' => 'Chats allowed?',
    'object_chatInvite_param_photo_type_Photo' => 'Chat/supergroup/channel photo',
    'object_stickerSet_param_thumb_dc_id_type_int' => 'DC ID of thumbnail',
    'object_keyboardButtonUrlAuth' => 'Button to request a user to authorize via URL using [Seamless Telegram Login](https://telegram.org/blog/privacy-discussions-web-bots#meet-seamless-web-bots). When the user clicks on such a button, [messages.requestUrlAuth](../methods/messages.requestUrlAuth.md) should be called, providing the `button_id` and the ID of the container message. The returned [urlAuthResultRequest](../constructors/urlAuthResultRequest.md) object will contain more details about the authorization request (`request_write_access` if the bot would like to send messages to the user along with the username of the bot which will be used for user authorization). Finally, the user can choose to call [messages.acceptUrlAuth](../methods/messages.acceptUrlAuth.md) to get a [urlAuthResultAccepted](../constructors/urlAuthResultAccepted.md) with the URL to open instead of the `url` of this constructor, or a [urlAuthResultDefault](../constructors/urlAuthResultDefault.md), in which case the `url` of this constructor must be opened, instead. If the user refuses the authorization request but still wants to open the link, the `url` of this constructor must be used.',
    'object_keyboardButtonUrlAuth_param_text_type_string' => 'Button label',
    'object_keyboardButtonUrlAuth_param_fwd_text_type_string' => 'New text of the button in forwarded messages.',
    'object_keyboardButtonUrlAuth_param_url_type_string' => 'An HTTP URL to be opened with user authorization data added to the query string when the button is pressed. If the user refuses to provide authorization data, the original URL without information about the user will be opened. The data added is the same as described in [Receiving authorization data](https://core.telegram.org/widgets/login#receiving-authorization-data).<br><br>**NOTE**: Services must **always** check the hash of the received data to verify the authentication and the integrity of the data as described in [Checking authorization](https://core.telegram.org/widgets/login#checking-authorization).',
    'object_keyboardButtonUrlAuth_param_button_id_type_int' => 'ID of the button to pass to [messages.requestUrlAuth](../methods/messages.requestUrlAuth.md)',
    'object_inputKeyboardButtonUrlAuth' => 'Button to request a user to [authorize](../methods/messages.acceptUrlAuth.md) via URL using [Seamless Telegram Login](https://telegram.org/blog/privacy-discussions-web-bots#meet-seamless-web-bots).',
    'object_inputKeyboardButtonUrlAuth_param_request_write_access_type_true' => 'Set this flag to request the permission for your bot to send messages to the user.',
    'object_inputKeyboardButtonUrlAuth_param_text_type_string' => 'Button text',
    'object_inputKeyboardButtonUrlAuth_param_fwd_text_type_string' => 'New text of the button in forwarded messages.',
    'object_inputKeyboardButtonUrlAuth_param_url_type_string' => 'An HTTP URL to be opened with user authorization data added to the query string when the button is pressed. If the user refuses to provide authorization data, the original URL without information about the user will be opened. The data added is the same as described in [Receiving authorization data](https://core.telegram.org/widgets/login#receiving-authorization-data).<br>NOTE: You must always check the hash of the received data to verify the authentication and the integrity of the data as described in [Checking authorization](https://core.telegram.org/widgets/login#checking-authorization).',
    'object_inputKeyboardButtonUrlAuth_param_bot_type_InputUser' => 'Username of a bot, which will be used for user authorization. See [Setting up a bot](https://core.telegram.org/widgets/login#setting-up-a-bot) for more details. If not specified, the current bot\'s username will be assumed. The url\'s domain must be the same as the domain linked with the bot. See [Linking your domain to the bot](https://core.telegram.org/widgets/login#linking-your-domain-to-the-bot) for more details.',
    'object_inputChannelFromMessage' => 'Defines a [min](https://core.telegram.org/api/min) channel that was seen in a certain message of a certain chat.',
    'object_inputChannelFromMessage_param_peer_type_InputPeer' => 'The chat where the channel was seen',
    'object_inputChannelFromMessage_param_msg_id_type_int' => 'The message ID in the chat where the channel was seen',
    'object_inputChannelFromMessage_param_channel_id_type_int' => 'The channel ID',
    'object_updates.channelDifferenceTooLong_param_dialog_type_Dialog' => 'Dialog containing the latest [PTS](https://core.telegram.org/api/updates) that can be used to reset the channel state',
    'object_topPeerCategoryForwardUsers' => 'Users to which the users often forwards messages to',
    'object_topPeerCategoryForwardChats' => 'Chats to which the users often forwards messages to',
    'object_phoneCallWaiting_param_video_type_true' => 'Is this a video call',
    'object_phoneCallRequested_param_video_type_true' => 'Whether this is a video call',
    'object_phoneCallAccepted_param_video_type_true' => 'Whether this is a video call',
    'object_phoneCall_param_connections_type_Vector t' => 'Phone connections',
    'object_phoneCallDiscarded_param_video_type_true' => 'Whether the call was a video call',
    'object_channelAdminLogEventActionChangePhoto_param_prev_photo_type_Photo' => 'Previous picture',
    'object_channelAdminLogEventActionChangePhoto_param_new_photo_type_Photo' => 'New picture',
    'object_channelAdminLogEventActionChangeLinkedChat' => 'The linked chat was changed',
    'object_channelAdminLogEventActionChangeLinkedChat_param_prev_value_type_int' => 'Previous linked chat',
    'object_channelAdminLogEventActionChangeLinkedChat_param_new_value_type_int' => 'New linked chat',
    'object_inputDialogPeerFolder' => 'All peers in a folder',
    'object_inputDialogPeerFolder_param_folder_id_type_int' => 'Folder ID',
    'object_dialogPeerFolder' => 'Folder',
    'object_dialogPeerFolder_param_folder_id_type_int' => 'Folder ID',
    'object_emojiLanguage' => 'Emoji language',
    'object_emojiLanguage_param_lang_code_type_string' => 'Language code',
    'object_fileLocationToBeDeprecated' => 'Indicates the location of a photo, will be deprecated soon',
    'object_fileLocationToBeDeprecated_param_volume_id_type_long' => 'Volume ID',
    'object_fileLocationToBeDeprecated_param_local_id_type_int' => 'Local ID',
    'object_folder' => 'Folder',
    'object_folder_param_autofill_new_broadcasts_type_true' => 'Automatically add new channels to this folder',
    'object_folder_param_autofill_public_groups_type_true' => 'Automatically add joined new public supergroups to this folder',
    'object_folder_param_autofill_new_correspondents_type_true' => 'Automatically add new private chats to this folder',
    'object_folder_param_id_type_int' => 'Folder ID',
    'object_folder_param_title_type_string' => 'Folder title',
    'object_folder_param_photo_type_ChatPhoto' => 'Folder picture',
    'object_inputFolderPeer' => 'Peer in a folder',
    'object_inputFolderPeer_param_peer_type_InputPeer' => 'Peer',
    'object_inputFolderPeer_param_folder_id_type_int' => 'Folder ID',
    'object_folderPeer' => 'Peer in a folder',
    'object_folderPeer_param_peer_type_Peer' => 'Folder peer info',
    'object_folderPeer_param_folder_id_type_int' => 'Folder ID',
    'object_messages.searchCounter' => 'Indicates how many results would be found by a [messages.search](../methods/messages.search.md) call with the same parameters',
    'object_messages.searchCounter_param_inexact_type_true' => 'If set, the results may be inexact',
    'object_messages.searchCounter_param_filter_type_MessagesFilter' => 'Provided message filter',
    'object_messages.searchCounter_param_count_type_int' => 'Number of results that were found server-side',
    'object_urlAuthResultRequest' => 'Details about the authorization request, for more info [click here »](https://core.telegram.org/api/url-authorization)',
    'object_urlAuthResultRequest_param_request_write_access_type_true' => 'Whether the bot would like to send messages to the user',
    'object_urlAuthResultRequest_param_bot_type_User' => 'Username of a bot, which will be used for user authorization. If not specified, the current bot\'s username will be assumed. The url\'s domain must be the same as the domain linked with the bot. See [Linking your domain to the bot](https://core.telegram.org/widgets/login#linking-your-domain-to-the-bot) for more details.',
    'object_urlAuthResultRequest_param_domain_type_string' => 'The domain name of the website on which the user will log in.',
    'object_urlAuthResultAccepted' => 'Details about an accepted authorization request, for more info [click here »](https://core.telegram.org/api/url-authorization)',
    'object_urlAuthResultAccepted_param_url_type_string' => 'The URL name of the website on which the user has logged in.',
    'object_urlAuthResultDefault' => 'Details about an accepted authorization request, for more info [click here »](https://core.telegram.org/api/url-authorization)',
    'method_contacts.addContact' => 'Add an existing telegram user as contact',
    'method_contacts.addContact_param_add_phone_privacy_exception_type_true' => 'Allow the other user to see our phone number?',
    'method_contacts.addContact_param_id_type_InputUser' => 'Telegram ID of the other user',
    'method_contacts.addContact_param_first_name_type_string' => 'First name',
    'method_contacts.addContact_param_last_name_type_string' => 'Last name',
    'method_contacts.addContact_param_phone_type_string' => 'User\'s phone number',
    'method_contacts.acceptContact' => 'If the [peer settings](../constructors/peerSettings.md) of a new user allow us to add him as contact, add that user as contact',
    'method_contacts.acceptContact_param_id_type_InputUser' => 'The user to add as contact',
    'method_contacts.getLocated' => 'Get contacts near you',
    'method_contacts.getLocated_param_geo_point_type_InputGeoPoint' => 'Geolocation',
    'method_messages.searchGlobal_param_folder_id_type_int' => 'Folder where to search',
    'method_messages.hidePeerSettingsBar' => 'Should be called after the user hides the report spam/add as contact bar of a new chat, effectively prevents the user from executing the actions specified in the [peer\'s settings](../constructors/peerSettings.md).',
    'method_messages.hidePeerSettingsBar_param_peer_type_InputPeer' => 'Peer',
    'method_channels.createChannel_param_geo_point_type_InputGeoPoint' => 'Geogroup location',
    'method_channels.createChannel_param_address_type_string' => 'Geogroup address',
    'method_channels.getAdminedPublicChannels_param_by_location_type_true' => 'Get geogroups',
    'method_channels.getAdminedPublicChannels_param_check_limit_type_true' => 'If set and the user has reached the limit of owned public [channels/supergroups/geogroups](https://core.telegram.org/api/channel), instead of returning the channel list one of the specified [errors](#possible-errors) will be returned.<br>Useful to check if a new public channel can indeed be created, even before asking the user to enter a channel username to use in [channels.checkUsername](../methods/channels.checkUsername.md)/[channels.updateUsername](../methods/channels.updateUsername.md).',
    'method_channels.editCreator' => 'Transfer channel ownership',
    'method_channels.editCreator_param_channel_type_InputChannel' => 'Channel',
    'method_channels.editCreator_param_user_id_type_InputUser' => 'New channel owner',
    'method_channels.editCreator_param_password_type_InputCheckPasswordSRP' => '[2FA password](https://core.telegram.org/api/srp) of account',
    'method_channels.editLocation' => 'Edit location of geogroup',
    'method_channels.editLocation_param_channel_type_InputChannel' => '[Geogroup](https://core.telegram.org/api/channel)',
    'method_channels.editLocation_param_geo_point_type_InputGeoPoint' => 'New geolocation',
    'method_channels.editLocation_param_address_type_string' => 'Address string',
    'object_channelFull_param_can_set_location_type_true' => 'Can we set the geolocation of this group (for geogroups)',
    'object_channelFull_param_location_type_ChannelLocation' => 'Location of the geogroup',
    'object_peerSettings_param_add_contact_type_true' => 'Whether we can add the user as contact',
    'object_peerSettings_param_block_contact_type_true' => 'Whether we can block the user',
    'object_peerSettings_param_share_contact_type_true' => 'Whether we can share the user\'s contact',
    'object_peerSettings_param_need_contacts_exception_type_true' => 'Whether a special exception for contacts is needed',
    'object_peerSettings_param_report_geo_type_true' => 'Whether we can report a geogroup is irrelevant for this location',
    'object_inputReportReasonGeoIrrelevant' => 'Report an irrelevant geogroup',
    'object_userFull_param_settings_type_PeerSettings' => 'Peer settings',
    'object_updatePeerSettings' => 'Settings of a certain peer have changed',
    'object_updatePeerSettings_param_peer_type_Peer' => 'The peer',
    'object_updatePeerSettings_param_settings_type_PeerSettings' => 'Associated peer settings',
    'object_updatePeerLocated' => 'List of peers near you was updated',
    'object_updatePeerLocated_param_peers_type_Vector t' => 'Peers',
    'object_stickerSet_param_animated_type_true' => 'Is this an animated stickerpack',
    'object_messageEntityUnderline' => 'Message entity representing underlined text.',
    'object_messageEntityUnderline_param_offset_type_int' => 'Offset of message entity within message (in UTF-8 codepoints)',
    'object_messageEntityUnderline_param_length_type_int' => 'Length of message entity within message (in UTF-8 codepoints)',
    'object_messageEntityStrike' => 'Message entity representing <del>strikethrough</del> text.',
    'object_messageEntityStrike_param_offset_type_int' => 'Offset of message entity within message (in UTF-8 codepoints)',
    'object_messageEntityStrike_param_length_type_int' => 'Length of message entity within message (in UTF-8 codepoints)',
    'object_messageEntityBlockquote' => 'Message entity representing a block quote.',
    'object_messageEntityBlockquote_param_offset_type_int' => 'Offset of message entity within message (in UTF-8 codepoints)',
    'object_messageEntityBlockquote_param_length_type_int' => 'Length of message entity within message (in UTF-8 codepoints)',
    'object_channelAdminLogEventActionChangeLocation' => 'The geogroup location was changed',
    'object_channelAdminLogEventActionChangeLocation_param_prev_value_type_ChannelLocation' => 'Previous location',
    'object_channelAdminLogEventActionChangeLocation_param_new_value_type_ChannelLocation' => 'New location',
    'object_channelLocationEmpty' => 'No location (normal supergroup)',
    'object_channelLocation' => 'Geographical location of supergroup (geogroups)',
    'object_channelLocation_param_geo_point_type_GeoPoint' => 'Geographical location of supergrup',
    'object_channelLocation_param_address_type_string' => 'Textual description of the address',
    'object_peerLocated' => 'Peer geolocated nearby',
    'object_peerLocated_param_peer_type_Peer' => 'Peer',
    'object_peerLocated_param_expires_type_int' => 'Validity period of current data',
    'object_peerLocated_param_distance_type_int' => 'Distance from the peer in meters',
    'method_account.registerDevice_param_no_muted_type_true' => 'Avoid receiving (silent and invisible background) notifications. Useful to save battery.',
    'method_upload.getFile_param_precise_type_true' => 'You cannot use this method directly, use the upload, downloadToStream, downloadToFile, downloadToDir methods instead; see https://docs.madelineproto.xyz for more info',
    'method_channels.editAdmin_param_rank_type_string' => 'Indicates the role (rank) of the admin in the group: just an arbitrary string',
    'method_channels.toggleSlowMode' => 'Toggle supergroup slow mode: if enabled, users will only be able to send one message every `seconds` seconds',
    'method_channels.toggleSlowMode_param_channel_type_InputChannel' => 'The [supergroup](https://core.telegram.org/api/channel)',
    'method_channels.toggleSlowMode_param_seconds_type_int' => 'Users will only be able to send one message every `seconds` seconds, `0` to disable the limitation',
    'object_channel_param_has_geo_type_true' => 'Whether this chanel has a geoposition',
    'object_channel_param_slowmode_enabled_type_true' => 'Whether slow mode is enabled for groups to prevent flood in chat',
    'object_channelFull_param_slowmode_seconds_type_int' => 'If specified, users in supergroups will only be able to send one message every `slowmode_seconds` seconds',
    'object_auth.authorizationSignUpRequired' => 'An account with this phone number doesn\'t exist on telegram: the user has to [enter basic information and sign up](https://core.telegram.org/api/auth)',
    'object_auth.authorizationSignUpRequired_param_terms_of_service_type_help.TermsOfService' => 'Telegram\'s terms of service: the user must read and accept the terms of service before signing up to telegram',
    'object_help.appUpdate_param_can_not_skip_type_true' => 'Unskippable, the new info must be shown to the user (with a popup or something else)',
    'object_inputStickerSetAnimatedEmoji' => 'Animated emojis stickerset',
    'object_channelParticipantCreator_param_rank_type_string' => 'The role (rank) of the group creator in the group: just an arbitrary string, `admin` by default',
    'object_channelParticipantAdmin_param_rank_type_string' => 'The role (rank) of the admin in the group: just an arbitrary string, `admin` by default',
    'object_payments.paymentVerificationNeeded' => 'Payment was not successful, additional verification is needed',
    'object_payments.paymentVerificationNeeded_param_url_type_string' => 'URL for additional payment credentials verification',
    'object_channelAdminLogEventActionToggleSlowMode' => '[Slow mode setting for supergroups was changed](../methods/channels.toggleSlowMode.md)',
    'object_channelAdminLogEventActionToggleSlowMode_param_prev_value_type_int' => 'Previous slow mode value',
    'object_channelAdminLogEventActionToggleSlowMode_param_new_value_type_int' => 'New slow mode value',
    'object_codeSettings_param_allow_app_hash_type_true' => 'If a token that will be included in eventually sent SMSs is required: required in newer versions of android, to use the [android SMS receiver APIs](https://developers.google.com/identity/sms-retriever/overview)',
    'object_channelFull_param_slowmode_next_send_date_type_int' => 'Indicates when the user will be allowed to send another message in the supergroup (unixdate)',
    'method_account.uploadTheme' => 'Upload theme',
    'method_account.uploadTheme_param_file_type_InputFile' => 'Theme file uploaded as described in [files »](https://core.telegram.org/api/files)',
    'method_account.uploadTheme_param_thumb_type_InputFile' => 'Thumbnail',
    'method_account.uploadTheme_param_file_name_type_string' => 'File name',
    'method_account.uploadTheme_param_mime_type_type_string' => 'MIME type, must be `application/x-tgtheme-{format}`, where `format` depends on the client',
    'method_account.createTheme' => 'Create a theme',
    'method_account.createTheme_param_slug_type_string' => 'Unique theme ID',
    'method_account.createTheme_param_title_type_string' => 'Theme name',
    'method_account.createTheme_param_document_type_InputDocument' => 'Theme file',
    'method_account.updateTheme' => 'Update theme',
    'method_account.updateTheme_param_format_type_string' => 'Theme format, a string that identifies the theming engines supported by the client',
    'method_account.updateTheme_param_theme_type_InputTheme' => 'Theme to update',
    'method_account.updateTheme_param_slug_type_string' => 'Unique theme ID',
    'method_account.updateTheme_param_title_type_string' => 'Theme name',
    'method_account.updateTheme_param_document_type_InputDocument' => 'Theme file',
    'method_account.saveTheme_param_theme_type_InputTheme' => 'Theme to save',
    'method_account.saveTheme_param_unsave_type_Bool' => 'Unsave',
    'method_account.installTheme' => 'Install a theme',
    'method_account.installTheme_param_format_type_string' => 'Theme format, a string that identifies the theming engines supported by the client',
    'method_account.installTheme_param_theme_type_InputTheme' => 'Theme to install',
    'method_account.getTheme' => 'Get theme information',
    'method_account.getTheme_param_format_type_string' => 'Theme format, a string that identifies the theming engines supported by the client',
    'method_account.getTheme_param_theme_type_InputTheme' => 'Theme',
    'method_account.getTheme_param_document_id_type_long' => 'Document ID',
    'method_account.getThemes_param_format_type_string' => 'Theme format, a string that identifies the theming engines supported by the client',
    'method_account.getThemes_param_hash_type_Vector t' => 'Hash for pagination',
    'method_messages.sendMessage_param_schedule_date_type_int' => 'Scheduled message date for scheduled messages',
    'method_messages.sendMedia_param_schedule_date_type_int' => 'Scheduled message date for scheduled messages',
    'method_messages.forwardMessages_param_schedule_date_type_int' => 'Scheduled message date for scheduled messages',
    'method_messages.sendInlineBotResult_param_schedule_date_type_int' => 'Scheduled message date for scheduled messages',
    'method_messages.editMessage_param_schedule_date_type_int' => 'Scheduled message date for scheduled messages',
    'method_messages.sendMultiMedia_param_schedule_date_type_int' => 'Scheduled message date for scheduled messages',
    'method_messages.getScheduledHistory' => 'Get scheduled messages',
    'method_messages.getScheduledHistory_param_peer_type_InputPeer' => 'Peer',
    'method_messages.getScheduledHistory_param_hash_type_Vector t' => 'Hash',
    'method_messages.getScheduledMessages' => 'Get scheduled messages',
    'method_messages.getScheduledMessages_param_peer_type_InputPeer' => 'Peer',
    'method_messages.getScheduledMessages_param_id_type_Vector t' => 'ID',
    'method_messages.sendScheduledMessages' => 'Send scheduled messages right away',
    'method_messages.sendScheduledMessages_param_peer_type_InputPeer' => 'Peer',
    'method_messages.sendScheduledMessages_param_id_type_Vector t' => 'ID',
    'method_messages.deleteScheduledMessages' => 'Delete scheduled messages',
    'method_messages.deleteScheduledMessages_param_peer_type_InputPeer' => 'Peer',
    'method_messages.deleteScheduledMessages_param_id_type_Vector t' => 'ID',
    'object_user_param_restriction_reason_type_Vector t' => 'Restriction reason',
    'object_channel_param_restriction_reason_type_Vector t' => 'Restriction reason',
    'object_chatFull_param_has_scheduled_type_true' => 'Whether scheduled messages are available',
    'object_channelFull_param_has_scheduled_type_true' => 'Whether scheduled messages are available',
    'object_message_param_edit_hide_type_true' => 'Whether the message should be shown as not modified to the user, even if an edit date is present',
    'object_message_param_restriction_reason_type_Vector t' => 'Restriction reason',
    'object_userFull_param_has_scheduled_type_true' => 'Whether scheduled messages are available',
    'object_updateNewScheduledMessage' => 'New incoming scheduled message',
    'object_updateNewScheduledMessage_param_message_type_Message' => 'Message',
    'object_updateDeleteScheduledMessages' => 'Some scheduled messages were deleted',
    'object_updateDeleteScheduledMessages_param_peer_type_Peer' => 'Peer',
    'object_updateDeleteScheduledMessages_param_messages_type_Vector t' => 'Messages',
    'object_updateTheme' => 'A cloud theme was updated',
    'object_updateTheme_param_theme_type_Theme' => 'Theme',
    'object_inputPrivacyKeyAddedByPhone' => 'Whether people can add you to their contact list by your phone number',
    'object_privacyKeyAddedByPhone' => 'Whether people can add you to their contact list by your phone number',
    'object_webPage_param_documents_type_Vector t' => 'Documents',
    'object_restrictionReason' => 'Restriction reason.

Contains the reason why access to a certain object must be restricted. Clients are supposed to deny access to the channel if the `platform` field is equal to `all` or to the current platform (`ios`, `android`, `wp`, etc.). Platforms can be concatenated (`ios-android`, `ios-wp`), unknown platforms are to be ignored. The `text` is the error message that should be shown to the user.',
    'object_restrictionReason_param_platform_type_string' => 'Platform identifier (ios, android, wp, all, etc.), can be concatenated with a dash as separator (`android-ios`, `ios-wp`, etc)',
    'object_restrictionReason_param_reason_type_string' => 'Restriction reason (`porno`, `terms`, etc.)',
    'object_restrictionReason_param_text_type_string' => 'Error message to be shown to the user',
    'object_inputTheme' => 'Theme',
    'object_inputTheme_param_id_type_long' => 'ID',
    'object_inputTheme_param_access_hash_type_long' => 'Access hash',
    'object_inputThemeSlug' => 'Theme by theme ID',
    'object_inputThemeSlug_param_slug_type_string' => 'Unique theme ID',
    'object_themeDocumentNotModified' => 'Theme background hasn\'t changed',
    'object_theme' => 'Theme',
    'object_theme_param_creator_type_true' => 'Whether the current user is the creator of this theme',
    'object_theme_param_default_type_true' => 'Whether this is the default theme',
    'object_theme_param_id_type_long' => 'Theme ID',
    'object_theme_param_access_hash_type_long' => 'Theme access hash',
    'object_theme_param_slug_type_string' => 'Unique theme ID',
    'object_theme_param_title_type_string' => 'Theme name',
    'object_theme_param_document_type_Document' => 'Theme',
    'object_theme_param_installs_count_type_int' => 'Installation count',
    'object_account.themesNotModified' => 'No new themes were installed',
    'object_account.themes' => 'Installed themes',
    'object_account.themes_param_hash_type_int' => '[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)',
    'object_account.themes_param_themes_type_Vector t' => 'Themes',
    'method_account.installTheme_param_dark_type_true' => 'Whether to install the dark version',
    'method_account.getThemes' => 'Get installed themes',
    'method_account.saveTheme' => 'Save a theme',
    'object_inputBotInlineResult_param_send_message_type_InputBotInlineMessage' => 'Message to send when the result is selected',
    'object_inputBotInlineResultPhoto_param_send_message_type_InputBotInlineMessage' => 'Message to send when the result is selected',
    'object_inputBotInlineResultDocument_param_send_message_type_InputBotInlineMessage' => 'Message to send when the result is selected',
    'object_inputBotInlineResultGame_param_send_message_type_InputBotInlineMessage' => 'Message to send when the result is selected',
    'object_botInlineResult_param_send_message_type_BotInlineMessage' => 'Message to send',
    'object_botInlineMediaResult_param_send_message_type_BotInlineMessage' => 'Depending on the `type` and on the [constructor](../types/BotInlineMessage.md), contains the caption of the media or the content of the message to be sent **instead** of the media',
    'object_chatBannedRights_param_send_messages_type_true' => 'If set, does not allow a user to send messages in a [supergroup/chat](https://core.telegram.org/api/channel)',
    'object_updateStickerSetsOrder_param_order_type_Vector long' => 'New sticker order by sticker ID',
    'object_pageBlockList_param_items_type_Vector PageListItem' => 'List of blocks in an IV page',
    'object_topPeerCategoryPeers_param_peers_type_Vector TopPeer' => 'Peers',
    'object_stickerPack_param_documents_type_Vector long' => 'Stickers',
    'object_updateDeleteChannelMessages_param_messages_type_Vector int' => 'IDs of messages that were deleted',
    'object_photos.photos_param_photos_type_Vector Photo' => 'List of photos',
    'object_photos.photos_param_users_type_Vector User' => 'List of mentioned users',
    'object_updatePeerLocated_param_peers_type_Vector PeerLocated' => 'Geolocated peer list update',
    'object_messages.savedGifs_param_gifs_type_Vector Document' => 'List of saved gifs',
    'object_pageBlockRelatedArticles_param_articles_type_Vector PageRelatedArticle' => 'Related articles',
    'object_inputSingleMedia_param_random_id_type_long' => 'Unique client media ID required to prevent message resending',
    'object_inputSingleMedia_param_entities_type_Vector MessageEntity' => 'Message [entities](https://core.telegram.org/api/entities) for styled text',
    'object_updatePinnedDialogs_param_order_type_Vector DialogPeer' => 'New order of pinned dialogs',
    'object_messages.chatsSlice_param_chats_type_Vector Chat' => 'Chats',
    'object_messages.stickerSetInstallResultArchive_param_sets_type_Vector StickerSetCovered' => 'Archived stickersets',
    'object_upload.fileCdnRedirect_param_file_hashes_type_Vector FileHash' => 'File hashes (see [CDN files](https://core.telegram.org/cdn)',
    'object_help.deepLinkInfo_param_entities_type_Vector MessageEntity' => '[Message entities for styled text](https://core.telegram.org/api/entities)',
    'object_inputPrivacyValueDisallowChatParticipants_param_chats_type_Vector int' => 'Disallowed chat IDs',
    'object_updateServiceNotification_param_entities_type_Vector MessageEntity' => '[Message entities for styled text](https://core.telegram.org/api/entities)',
    'object_pageListOrderedItemBlocks_param_blocks_type_Vector PageBlock' => 'Item contents',
    'object_channels.adminLogResults_param_events_type_Vector ChannelAdminLogEvent' => 'Admin log events',
    'object_channels.adminLogResults_param_chats_type_Vector Chat' => 'Chats mentioned in events',
    'object_channels.adminLogResults_param_users_type_Vector User' => 'Users mentioned in events',
    'object_messages.channelMessages_param_messages_type_Vector Message' => 'Found messages',
    'object_messages.channelMessages_param_chats_type_Vector Chat' => 'Chats',
    'object_messages.channelMessages_param_users_type_Vector User' => 'Users',
    'object_message_param_entities_type_Vector MessageEntity' => 'Message [entities](https://core.telegram.org/api/entities) for styled text',
    'object_message_param_restriction_reason_type_Vector RestrictionReason' => 'Contains the reason why access to this message must be restricted.',
    'object_messages.favedStickers_param_packs_type_Vector StickerPack' => 'Emojis associated to stickers',
    'object_messages.favedStickers_param_stickers_type_Vector Document' => 'Favorited stickers',
    'object_messages.foundStickerSets_param_sets_type_Vector StickerSetCovered' => 'Found stickersets',
    'object_account.authorizationForm_param_required_types_type_Vector SecureRequiredType' => 'Required [Telegram Passport](https://core.telegram.org/passport) documents',
    'object_account.authorizationForm_param_values_type_Vector SecureValue' => 'Already submitted [Telegram Passport](https://core.telegram.org/passport) documents',
    'object_account.authorizationForm_param_errors_type_Vector SecureValueError' => '[Telegram Passport](https://core.telegram.org/passport) errors',
    'object_account.authorizationForm_param_users_type_Vector User' => 'Info about the bot to which the form will be submitted',
    'object_messageActionChatAddUser_param_users_type_Vector int' => 'Users that were invited to the chat',
    'object_shippingOption_param_prices_type_Vector LabeledPrice' => 'List of price portions',
    'object_inputBotInlineMessageMediaAuto_param_entities_type_Vector MessageEntity' => '[Message entities for styled text](https://core.telegram.org/api/entities)',
    'object_photos.photosSlice_param_photos_type_Vector Photo' => 'List of photos',
    'object_photos.photosSlice_param_users_type_Vector User' => 'List of mentioned users',
    'object_pageBlockCollage_param_items_type_Vector PageBlock' => 'Media elements',
    'object_updatesCombined_param_updates_type_Vector Update' => 'List of updates',
    'object_updatesCombined_param_users_type_Vector User' => 'List of users mentioned in updates',
    'object_updatesCombined_param_chats_type_Vector Chat' => 'List of chats mentioned in updates',
    'object_pageBlockOrderedList_param_items_type_Vector PageListOrderedItem' => 'List items',
    'object_privacyValueAllowChatParticipants_param_chats_type_Vector int' => 'Allowed chats',
    'object_emojiKeyword_param_emoticons_type_Vector string' => 'Emojis associated to keyword',
    'object_botInlineMessageMediaAuto_param_entities_type_Vector MessageEntity' => '[Message entities for styled text](https://core.telegram.org/api/entities)',
    'object_messageReactions' => 'Message reactions',
    'object_messageReactions_param_min_type_true' => 'Similar to [min](https://core.telegram.org/api/min) objects, used for message reaction constructors that are the same for all users so they don\'t have the reactions sent by the current user (you can use [messages.getMessagesReactions](../methods/messages.getMessagesReactions.md) to get the full reaction info).',
    'object_messageReactions_param_results_type_Vector ReactionCount' => 'Reactions',
    'object_decryptedMessageMediaDocument_param_attributes_type_Vector DocumentAttribute' => 'Document attributes for media types',
    'object_messageActionSecureValuesSent_param_types_type_Vector SecureValueType' => 'Secure value types',
    'object_pollResults_param_results_type_Vector PollAnswerVoters' => 'Poll results',
    'object_messages.stickers_param_stickers_type_Vector Document' => 'Stickers',
    'object_photo_param_sizes_type_Vector PhotoSize' => 'Available sizes for download',
    'object_inputPrivacyValueAllowChatParticipants_param_chats_type_Vector int' => 'Allowed chat IDs',
    'object_contacts.found_param_my_results_type_Vector Peer' => 'Personalized results',
    'object_contacts.found_param_results_type_Vector Peer' => 'List of found user identifiers',
    'object_contacts.found_param_chats_type_Vector Chat' => 'Found chats',
    'object_contacts.found_param_users_type_Vector User' => 'List of users',
    'object_chatInvite_param_participants_type_Vector User' => 'A few of the participants that are in the group',
    'object_messages.dialogs_param_dialogs_type_Vector Dialog' => 'List of chats',
    'object_messages.dialogs_param_messages_type_Vector Message' => 'List of last messages from each chat',
    'object_messages.dialogs_param_chats_type_Vector Chat' => 'List of groups mentioned in the chats',
    'object_messages.dialogs_param_users_type_Vector User' => 'List of users mentioned in messages and groups',
    'object_textConcat_param_texts_type_Vector RichText' => 'Concatenated rich texts',
    'object_messages.allStickers_param_sets_type_Vector StickerSet' => 'All stickersets',
    'object_phone.phoneCall_param_users_type_Vector User' => 'VoIP phone call participants',
    'object_updatePrivacy_param_rules_type_Vector PrivacyRule' => 'New privacy rules',
    'object_channelMessagesFilter_param_ranges_type_Vector MessageRange' => 'A range of messages to fetch',
    'object_updateShortMessage_param_entities_type_Vector MessageEntity' => '[Entities](https://core.telegram.org/api/entities) for styled text',
    'object_pageListItemBlocks_param_blocks_type_Vector PageBlock' => 'Blocks',
    'object_inputWebDocument_param_attributes_type_Vector DocumentAttribute' => 'Attributes for media types',
    'object_inputMediaUploadedPhoto_param_stickers_type_Vector InputDocument' => 'Attached mask stickers',
    'object_contacts.topPeers_param_categories_type_Vector TopPeerCategoryPeers' => 'Top peers by top peer category',
    'object_contacts.topPeers_param_chats_type_Vector Chat' => 'Chats',
    'object_contacts.topPeers_param_users_type_Vector User' => 'Users',
    'object_user_param_restriction_reason_type_Vector RestrictionReason' => 'Contains the reason why access to this user must be restricted.',
    'object_messages.botResults_param_results_type_Vector BotInlineResult' => 'The results',
    'object_messages.botResults_param_users_type_Vector User' => 'Users mentioned in the results',
    'object_pageBlockDetails_param_blocks_type_Vector PageBlock' => 'Block contents',
    'object_inputPrivacyValueAllowUsers_param_users_type_Vector InputUser' => 'Allowed users',
    'object_messages.chatFull_param_chats_type_Vector Chat' => 'List containing basic info on chat',
    'object_messages.chatFull_param_users_type_Vector User' => 'List of users mentioned above',
    'object_privacyValueDisallowChatParticipants_param_chats_type_Vector int' => 'Disallowed chats',
    'object_replyInlineMarkup_param_rows_type_Vector KeyboardButtonRow' => 'Bot or inline keyboard rows',
    'object_updates.differenceSlice_param_new_messages_type_Vector Message' => 'List of new messgaes',
    'object_updates.differenceSlice_param_new_encrypted_messages_type_Vector EncryptedMessage' => 'New messages from the [encrypted event sequence](https://core.telegram.org/api/updates)',
    'object_updates.differenceSlice_param_other_updates_type_Vector Update' => 'List of updates',
    'object_updates.differenceSlice_param_chats_type_Vector Chat' => 'List of chats mentioned in events',
    'object_updates.differenceSlice_param_users_type_Vector User' => 'List of users mentioned in events',
    'object_channelFull_param_bot_info_type_Vector BotInfo' => 'Info about bots in the channel/supergrup',
    'object_messages.foundGifs_param_results_type_Vector FoundGif' => 'Found GIFs',
    'object_messageUserReaction' => 'Message reaction',
    'object_messageUserReaction_param_user_id_type_int' => 'ID of user that reacted this way',
    'object_messageUserReaction_param_reaction_type_string' => 'Reaction (UTF8 emoji)',
    'object_updates.channelDifference_param_new_messages_type_Vector Message' => 'New messages',
    'object_updates.channelDifference_param_other_updates_type_Vector Update' => 'Other updates',
    'object_updates.channelDifference_param_chats_type_Vector Chat' => 'Chats',
    'object_updates.channelDifference_param_users_type_Vector User' => 'Users',
    'object_decryptedMessageActionDeleteMessages_param_random_ids_type_Vector long' => 'List of deleted message IDs',
    'object_jsonObject_param_value_type_Vector JSONObjectValue' => 'Values',
    'object_photos.photo_param_users_type_Vector User' => 'Users',
    'object_account.webAuthorizations_param_authorizations_type_Vector WebAuthorization' => 'Web authorization list',
    'object_account.webAuthorizations_param_users_type_Vector User' => 'Users',
    'object_account.wallPapers_param_wallpapers_type_Vector WallPaper' => 'Wallpapers',
    'object_inputBotInlineMessageText_param_entities_type_Vector MessageEntity' => '[Message entities for styled text](https://core.telegram.org/api/entities)',
    'object_invoice_param_prices_type_Vector LabeledPrice' => 'Price breakdown, a list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.)',
    'object_replyKeyboardMarkup_param_rows_type_Vector KeyboardButtonRow' => 'Button row',
    'object_payments.paymentForm_param_users_type_Vector User' => 'Users',
    'object_contacts.resolvedPeer_param_chats_type_Vector Chat' => 'Chats',
    'object_contacts.resolvedPeer_param_users_type_Vector User' => 'Users',
    'object_config_param_dc_options_type_Vector DcOption' => 'DC IP list',
    'object_contacts.importedContacts_param_imported_type_Vector ImportedContact' => 'List of succesfully imported contacts',
    'object_contacts.importedContacts_param_popular_invites_type_Vector PopularContact' => 'Popular contacts',
    'object_contacts.importedContacts_param_retry_contacts_type_Vector long' => 'List of contact ids that could not be imported due to system limitation and will need to be imported at a later date.<br>Parameter added in [Layer 13](https://core.telegram.org/api/layers#layer-13)',
    'object_contacts.importedContacts_param_users_type_Vector User' => 'List of users',
    'object_inputMediaUploadedDocument_param_attributes_type_Vector DocumentAttribute' => 'Attributes that specify the type of the document (video, audio, voice, sticker, etc.)',
    'object_inputMediaUploadedDocument_param_stickers_type_Vector InputDocument' => 'Attached stickers',
    'object_messages.stickerSet_param_packs_type_Vector StickerPack' => 'Emoji info for stickers',
    'object_messages.stickerSet_param_documents_type_Vector Document' => 'Stickers in stickerset',
    'object_contacts.contacts_param_contacts_type_Vector Contact' => 'Contact list',
    'object_contacts.contacts_param_users_type_Vector User' => 'User list',
    'object_pageBlockTable_param_rows_type_Vector PageTableRow' => 'Table rows',
    'object_account.themes_param_themes_type_Vector Theme' => 'Themes',
    'object_help.proxyDataPromo_param_chats_type_Vector Chat' => 'Chats',
    'object_help.proxyDataPromo_param_users_type_Vector User' => 'Users',
    'object_messages.peerDialogs_param_dialogs_type_Vector Dialog' => 'Dialog info',
    'object_messages.peerDialogs_param_messages_type_Vector Message' => 'Messages mentioned in dialog info',
    'object_messages.peerDialogs_param_chats_type_Vector Chat' => 'Chats',
    'object_messages.peerDialogs_param_users_type_Vector User' => 'Users',
    'object_updates.channelDifferenceTooLong_param_messages_type_Vector Message' => 'The latest messages',
    'object_updates.channelDifferenceTooLong_param_chats_type_Vector Chat' => 'Chats from messages',
    'object_updates.channelDifferenceTooLong_param_users_type_Vector User' => 'Users from messages',
    'object_messages.recentStickers_param_packs_type_Vector StickerPack' => 'Emojis associated to stickers',
    'object_messages.recentStickers_param_stickers_type_Vector Document' => 'Recent stickers',
    'object_messages.recentStickers_param_dates_type_Vector int' => 'When was each sticker last used',
    'object_inputPhotoLegacyFileLocation' => 'Legacy file location',
    'object_inputPhotoLegacyFileLocation_param_id_type_long' => 'Photo ID',
    'object_inputPhotoLegacyFileLocation_param_access_hash_type_long' => 'Access hash',
    'object_inputPhotoLegacyFileLocation_param_file_reference_type_bytes' => 'File reference',
    'object_inputPhotoLegacyFileLocation_param_volume_id_type_long' => 'Volume ID',
    'object_inputPhotoLegacyFileLocation_param_local_id_type_int' => 'Local ID',
    'object_inputPhotoLegacyFileLocation_param_secret_type_long' => 'Secret',
    'object_draftMessage_param_entities_type_Vector MessageEntity' => 'Message [entities](https://core.telegram.org/api/entities) for styled text.',
    'object_help.termsOfService_param_entities_type_Vector MessageEntity' => '[Message entities for styled text](https://core.telegram.org/api/entities)',
    'object_contacts.blocked_param_blocked_type_Vector ContactBlocked' => 'List of blocked users',
    'object_contacts.blocked_param_users_type_Vector User' => 'List of users',
    'object_pageBlockSlideshow_param_items_type_Vector PageBlock' => 'Slideshow items',
    'object_keyboardButtonRow_param_buttons_type_Vector KeyboardButton' => 'Bot or inline keyboard buttons',
    'object_updateFolderPeers_param_folder_peers_type_Vector FolderPeer' => 'New peer list',
    'object_channels.channelParticipants_param_participants_type_Vector ChannelParticipant' => 'Participants',
    'object_channels.channelParticipants_param_users_type_Vector User' => 'Users mentioned in participant info',
    'object_emojiKeywordsDifference_param_keywords_type_Vector EmojiKeyword' => 'Emojis associated to keywords',
    'object_page_param_blocks_type_Vector PageBlock' => 'Page elements (like with HTML elements, only as TL constructors)',
    'object_page_param_photos_type_Vector Photo' => 'Photos in page',
    'object_page_param_documents_type_Vector Document' => 'Media in page',
    'object_webDocumentNoProxy_param_attributes_type_Vector DocumentAttribute' => 'Attributes for media types',
    'object_messageActionSecureValuesSentMe_param_values_type_Vector SecureValue' => 'Vector with information about documents and other Telegram Passport elements that were shared with the bot',
    'object_reactionCount' => 'Reactions',
    'object_reactionCount_param_chosen_type_true' => 'Whether the current user sent this reaction',
    'object_reactionCount_param_reaction_type_string' => 'Reaction (a UTF8 emoji)',
    'object_reactionCount_param_count_type_int' => 'NUmber of users that reacted with this emoji',
    'object_emojiKeywordDeleted_param_emoticons_type_Vector string' => 'Emojis that were associated to keyword',
    'object_decryptedMessageService_param_random_id_type_long' => 'Random message ID, assigned by the message author.<br>Must be equal to the ID passed to the sending method.',
    'object_messages.highScores_param_scores_type_Vector HighScore' => 'Highscores',
    'object_messages.highScores_param_users_type_Vector User' => 'Users, associated to the highscores',
    'object_stickerSetMultiCovered_param_covers_type_Vector Document' => 'Preview stickers',
    'object_inputSecureValue_param_translation_type_Vector InputSecureFile' => 'Array of encrypted [passport](https://core.telegram.org/passport) files with translated versions of the provided documents',
    'object_inputSecureValue_param_files_type_Vector InputSecureFile' => 'Array of encrypted [passport](https://core.telegram.org/passport) files with photos the of the documents',
    'object_updates_param_updates_type_Vector Update' => 'List of updates',
    'object_updates_param_users_type_Vector User' => 'List of users mentioned in updates',
    'object_updates_param_chats_type_Vector Chat' => 'List of chats mentioned in updates',
    'object_updateReadMessagesContents_param_messages_type_Vector int' => 'IDs of read messages',
    'object_decryptedMessageLayer_param_random_bytes_type_bytes' => 'Set of random bytes to prevent content recognition in short encrypted messages.<br>Clients are required to check that there are at least 15 random bytes included in each message. Messages with less than 15 random bytes must be ignored.<br>Parameter moved here from [decryptedMessage](../constructors/decryptedMessage.md) in [Layer 17](https://core.telegram.org/api/layers#layer-17).',
    'object_decryptedMessage_param_random_id_type_long' => 'Random message ID, assigned by the author of message.<br>Must be equal to the ID passed to sending method.',
    'object_decryptedMessage_param_entities_type_Vector MessageEntity' => 'Message [entities](https://core.telegram.org/api/entities) for styled text (parameter added in layer 45)',
    'object_chatFull_param_bot_info_type_Vector BotInfo' => 'Info about bots that are in this chat',
    'object_messages.featuredStickers_param_sets_type_Vector StickerSetCovered' => 'Featured stickersets',
    'object_messages.featuredStickers_param_unread_type_Vector long' => 'IDs of new featured stickersets',
    'object_decryptedMessageMediaExternalDocument_param_attributes_type_Vector DocumentAttribute' => 'Attributes for media types',
    'object_document_param_thumbs_type_Vector PhotoSize' => 'Thumbnails',
    'object_document_param_attributes_type_Vector DocumentAttribute' => 'Attributes',
    'object_help.appUpdate_param_entities_type_Vector MessageEntity' => '[Message entities for styled text](https://core.telegram.org/api/entities)',
    'object_updates.difference_param_new_messages_type_Vector Message' => 'List of new messages',
    'object_updates.difference_param_new_encrypted_messages_type_Vector EncryptedMessage' => 'List of new encrypted secret chat messages',
    'object_updates.difference_param_other_updates_type_Vector Update' => 'List of updates',
    'object_updates.difference_param_chats_type_Vector Chat' => 'List of chats mentioned in events',
    'object_updates.difference_param_users_type_Vector User' => 'List of users mentioned in events',
    'object_webPage_param_documents_type_Vector Document' => 'Attached webpage documents',
    'object_decryptedMessageActionReadMessages_param_random_ids_type_Vector long' => 'List of message IDs',
    'object_messageActionChatCreate_param_users_type_Vector int' => 'List of group members',
    'object_botInlineMessageText_param_entities_type_Vector MessageEntity' => '[Message entities for styled text](https://core.telegram.org/api/entities)',
    'object_account.authorizations_param_authorizations_type_Vector Authorization' => 'Logged-in sessions',
    'object_langPackDifference_param_strings_type_Vector LangPackString' => 'Localized strings',
    'object_updateDeleteScheduledMessages_param_messages_type_Vector int' => 'Deleted scheduled messages',
    'object_encryptedMessage_param_random_id_type_long' => 'Random message ID, assigned by the author of message',
    'object_encryptedMessage_param_bytes_type_bytes' => 'TL-serialising of [DecryptedMessage](../types/DecryptedMessage.md) type, encrypted with the key creatied at stage of chat initialization',
    'object_account.privacyRules_param_rules_type_Vector PrivacyRule' => 'Privacy rules',
    'object_account.privacyRules_param_chats_type_Vector Chat' => 'Chats to which the rules apply',
    'object_account.privacyRules_param_users_type_Vector User' => 'Users to which the rules apply',
    'object_phoneCall_param_connections_type_Vector PhoneConnection' => 'List of endpoints the user can connect to to exchange call data',
    'object_secureValueErrorFiles_param_file_hash_type_Vector bytes' => 'File hash',
    'object_chatParticipants_param_participants_type_Vector ChatParticipant' => 'List of group members',
    'object_secureValueErrorTranslationFiles_param_file_hash_type_Vector bytes' => 'Hash',
    'object_pageBlockEmbedPost_param_blocks_type_Vector PageBlock' => 'Post contents',
    'object_decryptedMessageActionScreenshotMessages_param_random_ids_type_Vector long' => 'List of affected message ids (that appeared on the screenshot)',
    'object_channel_param_restriction_reason_type_Vector RestrictionReason' => 'Contains the reason why access to this channel must be restricted.',
    'object_updateChannelReadMessagesContents_param_messages_type_Vector int' => 'IDs of messages that were read',
    'object_messages.chats_param_chats_type_Vector Chat' => 'List of chats',
    'object_contacts.blockedSlice_param_blocked_type_Vector ContactBlocked' => 'List of blocked users',
    'object_contacts.blockedSlice_param_users_type_Vector User' => 'List of users',
    'object_encryptedMessageService_param_random_id_type_long' => 'Random message ID, assigned by the author of message',
    'object_encryptedMessageService_param_bytes_type_bytes' => 'TL-serialising of [DecryptedMessage](../types/DecryptedMessage.md) type, encrypted with the key creatied at stage of chat initialization',
    'object_messages.dialogsSlice_param_dialogs_type_Vector Dialog' => 'List of dialogs',
    'object_messages.dialogsSlice_param_messages_type_Vector Message' => 'List of last messages from dialogs',
    'object_messages.dialogsSlice_param_chats_type_Vector Chat' => 'List of chats mentioned in dialogs',
    'object_messages.dialogsSlice_param_users_type_Vector User' => 'List of users mentioned in messages and chats',
    'object_cdnConfig_param_public_keys_type_Vector CdnPublicKey' => 'Vector of public keys to use **only** during handshakes to [CDN](https://core.telegram.org/cdn) DCs.',
    'object_jsonArray_param_value_type_Vector JSONValue' => 'JSON values',
    'object_messages.messages_param_messages_type_Vector Message' => 'List of messages',
    'object_messages.messages_param_chats_type_Vector Chat' => 'List of chats mentioned in dialogs',
    'object_messages.messages_param_users_type_Vector User' => 'List of users mentioned in messages and chats',
    'object_help.recentMeUrls_param_urls_type_Vector RecentMeUrl' => 'URLs',
    'object_help.recentMeUrls_param_chats_type_Vector Chat' => 'Chats',
    'object_help.recentMeUrls_param_users_type_Vector User' => 'Users',
    'object_botInfo_param_commands_type_Vector BotCommand' => 'Bot commands that can be used in the chat',
    'object_pageTableRow_param_cells_type_Vector PageTableCell' => 'Table cells',
    'object_help.userInfo_param_entities_type_Vector MessageEntity' => '[Message entities for styled text](https://core.telegram.org/api/entities)',
    'object_inputPrivacyValueDisallowUsers_param_users_type_Vector InputUser' => 'Users to disallow',
    'object_secureValue_param_translation_type_Vector SecureFile' => 'Array of encrypted [passport](https://core.telegram.org/passport) files with translated versions of the provided documents',
    'object_secureValue_param_files_type_Vector SecureFile' => 'Array of encrypted [passport](https://core.telegram.org/passport) files with photos the of the documents',
    'object_payments.validatedRequestedInfo_param_shipping_options_type_Vector ShippingOption' => 'Shipping options',
    'object_privacyValueAllowUsers_param_users_type_Vector int' => 'Allowed users',
    'object_webDocument_param_attributes_type_Vector DocumentAttribute' => 'Attributes for media types',
    'object_secureRequiredTypeOneOf_param_types_type_Vector SecureRequiredType' => 'Secure required value types',
    'object_updateShortSentMessage_param_entities_type_Vector MessageEntity' => '[Entities](https://core.telegram.org/api/entities) for styled text',
    'object_updateShortChatMessage_param_entities_type_Vector MessageEntity' => '[Entities](https://core.telegram.org/api/entities) for styled text',
    'object_updateMessageID_param_random_id_type_long' => 'Previuosly transferred client **random\\_id** identifier',
    'object_messages.archivedStickers_param_sets_type_Vector StickerSetCovered' => 'Archived stickersets',
    'object_messages.messagesSlice_param_messages_type_Vector Message' => 'List of messages',
    'object_messages.messagesSlice_param_chats_type_Vector Chat' => 'List of chats mentioned in messages',
    'object_messages.messagesSlice_param_users_type_Vector User' => 'List of users mentioned in messages and chats',
    'object_privacyValueDisallowUsers_param_users_type_Vector int' => 'Disallowed users',
    'object_updateDcOptions_param_dc_options_type_Vector DcOption' => 'New connection options',
    'object_payments.paymentReceipt_param_users_type_Vector User' => 'Users',
    'object_updateMessageReactions' => 'New message reactions are available',
    'object_updateMessageReactions_param_peer_type_Peer' => 'Peer',
    'object_updateMessageReactions_param_msg_id_type_int' => 'Message ID',
    'object_updateMessageReactions_param_reactions_type_MessageReactions' => 'Reactions',
    'object_channels.channelParticipant_param_users_type_Vector User' => 'Users',
    'object_poll_param_answers_type_Vector PollAnswer' => 'The possible answers, vote using [messages.sendVote](../methods/messages.sendVote.md).',
    'object_updateDeleteMessages_param_messages_type_Vector int' => 'List of identifiers of deleted messages',
    'object_messageReactionsList' => 'List of message reactions',
    'object_messageReactionsList_param_count_type_int' => 'Total number of reactions',
    'object_messageReactionsList_param_reactions_type_Vector MessageUserReaction' => 'Reactions',
    'object_messageReactionsList_param_users_type_Vector User' => 'Users that reacted like this',
    'object_messageReactionsList_param_next_offset_type_string' => 'Next offset to use when fetching reactions using [messages.getMessageReactionsList](../methods/messages.getMessageReactionsList.md)',
    'method_messages.sendEncryptedFile_param_random_id_type_long' => 'Unique client message ID necessary to prevent message resending',
    'method_messages.sendEncryptedFile_param_data_type_bytes' => 'TL-serialization of [DecryptedMessage](../types/DecryptedMessage.md) type, encrypted with a key generated during chat initialization',
    'method_channels.getChannels_param_id_type_Vector InputChannel' => 'IDs of channels/supergroups to get info about',
    'method_users.getUsers_param_id_type_Vector InputUser' => 'List of user identifiers',
    'method_channels.getMessages_param_id_type_Vector InputMessage' => 'IDs of messages to get',
    'method_channels.readMessageContents_param_id_type_Vector int' => 'IDs of messages whose contents should be marked as read',
    'method_channels.inviteToChannel_param_users_type_Vector InputUser' => 'Users to invite',
    'method_messages.sendVote_param_options_type_Vector bytes' => 'The options that were chosen',
    'method_messages.getEmojiKeywordsLanguages_param_lang_codes_type_Vector string' => 'Language codes',
    'method_messages.sendScheduledMessages_param_id_type_Vector int' => 'Scheduled message IDs',
    'method_help.getPassportConfig_param_hash_type_int' => '[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)',
    'method_langpack.getStrings_param_keys_type_Vector string' => 'Strings to get',
    'method_account.setPrivacy_param_rules_type_Vector InputPrivacyRule' => 'New privacy rules',
    'method_messages.sendScreenshotNotification_param_random_id_type_long' => 'Random ID to avoid message resending',
    'method_messages.startBot_param_random_id_type_long' => 'Random ID to avoid resending the same message',
    'method_messages.deleteChatUser_param_chat_id_type_int' => 'Chat ID',
    'method_messages.sendMessage_param_random_id_type_long' => 'Unique client message ID required to prevent message resending',
    'method_messages.sendMessage_param_entities_type_Vector MessageEntity' => 'Message [entities](https://core.telegram.org/api/entities) for sending styled text',
    'method_messages.getWebPagePreview_param_entities_type_Vector MessageEntity' => '[Message entities for styled text](https://core.telegram.org/api/entities)',
    'method_account.getWallPapers_param_hash_type_int' => '[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)',
    'method_messages.readMessageContents_param_id_type_Vector int' => 'Message ID list',
    'method_messages.getScheduledHistory_param_hash_type_int' => '[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)',
    'method_phone.requestCall_param_random_id_type_int' => 'You cannot use this method directly, see https://docs.madelineproto.xyz#calls for more info on handling calls',
    'method_messages.setInlineBotResults_param_results_type_Vector InputBotInlineResult' => 'Vector of results for the inline query',
    'method_messages.sendMedia_param_random_id_type_long' => 'Random ID to avoid resending the same message',
    'method_messages.sendMedia_param_entities_type_Vector MessageEntity' => 'Message [entities](https://core.telegram.org/api/entities) for styled text',
    'method_messages.editMessage_param_entities_type_Vector MessageEntity' => '[Message entities for styled text](https://core.telegram.org/api/entities)',
    'method_messages.getMessagesReactions' => 'Get message reactions',
    'method_messages.getMessagesReactions_param_peer_type_InputPeer' => 'Peer',
    'method_messages.getMessagesReactions_param_id_type_Vector int' => 'Message IDs',
    'method_users.setSecureValueErrors_param_errors_type_Vector SecureValueError' => 'Errors',
    'method_contacts.getContactIDs_param_hash_type_int' => '[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)',
    'method_messages.getSearchCounters_param_filters_type_Vector MessagesFilter' => 'Search filters',
    'method_contacts.deleteByPhones_param_phones_type_Vector string' => 'Phone numbers',
    'method_messages.readFeaturedStickers_param_id_type_Vector long' => 'IDs of stickersets to mark as read',
    'method_messages.saveDraft_param_entities_type_Vector MessageEntity' => 'Message [entities](https://core.telegram.org/api/entities) for styled text',
    'method_account.unregisterDevice_param_other_uids_type_Vector int' => 'List of user identifiers of other users currently using the client',
    'method_messages.report_param_id_type_Vector int' => 'IDs of messages to report',
    'method_account.deleteSecureValue_param_types_type_Vector SecureValueType' => 'Document types to delete',
    'method_messages.getChats_param_id_type_Vector int' => 'List of chat IDs',
    'method_messages.reorderStickerSets_param_order_type_Vector long' => 'New stickerset order by stickerset IDs',
    'method_messages.sendInlineBotResult_param_random_id_type_long' => 'Random ID to avoid resending the same query',
    'method_messages.getAllChats_param_except_ids_type_Vector int' => 'Except these chats/channels/supergroups',
    'method_messages.requestEncryption_param_random_id_type_int' => 'You cannot use this method directly, see https://docs.madelineproto.xyz for more info on handling secret chats',
    'method_channels.reportSpam_param_id_type_Vector int' => 'IDs of spam messages',
    'method_messages.createChat_param_users_type_Vector InputUser' => 'List of user IDs to be invited',
    'method_account.acceptAuthorization_param_value_hashes_type_Vector SecureValueHash' => 'Types of values sent and their hashes',
    'method_folders.editPeerFolders_param_folder_peers_type_Vector InputFolderPeer' => 'New peer list',
    'method_messages.setBotShippingResults_param_shipping_options_type_Vector ShippingOption' => 'A vector of available shipping options.',
    'method_messages.deleteScheduledMessages_param_id_type_Vector int' => 'Scheduled message IDs',
    'method_messages.editChatTitle_param_chat_id_type_int' => 'Chat ID',
    'method_account.registerDevice_param_other_uids_type_Vector int' => 'List of user identifiers of other users currently using the client',
    'method_messages.addChatUser_param_chat_id_type_int' => 'Chat ID',
    'method_messages.migrateChat_param_chat_id_type_int' => 'Legacy group to migrate',
    'method_messages.sendReaction' => 'Send reaction to message',
    'method_messages.sendReaction_param_peer_type_InputPeer' => 'Peer',
    'method_messages.sendReaction_param_msg_id_type_int' => 'Message ID to react to',
    'method_messages.sendReaction_param_reaction_type_string' => 'Reaction (a UTF8 emoji)',
    'method_channels.deleteMessages_param_id_type_Vector int' => 'IDs of messages to delete',
    'method_messages.deleteMessages_param_id_type_Vector int' => 'Message ID list',
    'method_messages.getFullChat_param_chat_id_type_int' => 'You cannot use this method directly, use the getPwrChat, getInfo, getFullInfo methods instead (see https://docs.madelineproto.xyz for more info)',
    'method_account.getSecureValue_param_types_type_Vector SecureValueType' => 'Requested value types',
    'method_messages.getMessagesViews_param_id_type_Vector int' => 'ID of message',
    'method_account.getThemes_param_hash_type_int' => '[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)',
    'method_messages.sendEncrypted_param_random_id_type_long' => 'Unique client message ID, necessary to avoid message resending',
    'method_messages.sendEncrypted_param_data_type_bytes' => 'TL-serialization of [DecryptedMessage](../types/DecryptedMessage.md) type, encrypted with a key that was created during chat initialization',
    'method_auth.dropTempAuthKeys_param_except_auth_keys_type_Vector long' => 'The auth keys that **shouldn\'t** be dropped.',
    'method_messages.reorderPinnedDialogs_param_order_type_Vector InputDialogPeer' => 'New dialog order',
    'method_help.saveAppLog_param_events_type_Vector InputAppEvent' => 'List of input events',
    'method_messages.getScheduledMessages_param_id_type_Vector int' => 'IDs of scheduled messages',
    'method_photos.deletePhotos_param_id_type_Vector InputPhoto' => 'Input photos to delete',
    'method_messages.sendEncryptedService_param_random_id_type_long' => 'Unique client message ID required to prevent message resending',
    'method_messages.sendEncryptedService_param_data_type_bytes' => 'TL-serialization of  [DecryptedMessage](../types/DecryptedMessage.md) type, encrypted with a key generated during chat initialization',
    'method_messages.sendMultiMedia_param_multi_media_type_Vector InputSingleMedia' => 'The medias to send',
    'method_contacts.importContacts_param_contacts_type_Vector InputContact' => 'List of contacts to import',
    'method_contacts.deleteContacts_param_id_type_Vector InputUser' => 'User ID list',
    'method_stickers.createStickerSet_param_stickers_type_Vector InputStickerSetItem' => 'Stickers',
    'method_channels.getAdminLog_param_admins_type_Vector InputUser' => 'Only show events from these admins',
    'method_help.editUserInfo_param_entities_type_Vector MessageEntity' => '[Message entities for styled text](https://core.telegram.org/api/entities)',
    'method_messages.editChatPhoto_param_chat_id_type_int' => 'Chat ID',
    'method_messages.getMessages_param_id_type_Vector InputMessage' => 'Message ID list',
    'method_messages.editInlineBotMessage_param_entities_type_Vector MessageEntity' => '[Message entities for styled text](https://core.telegram.org/api/entities)',
    'method_messages.getPeerDialogs_param_peers_type_Vector InputDialogPeer' => 'Peers',
    'method_messages.forwardMessages_param_id_type_Vector int' => 'IDs of messages',
    'method_messages.forwardMessages_param_random_id_type_Vector long' => 'Random ID to prevent resending of messages',
    'method_messages.getMessageReactionsList' => 'Get full message reaction list',
    'method_messages.getMessageReactionsList_param_peer_type_InputPeer' => 'Peer',
    'method_messages.getMessageReactionsList_param_id_type_int' => 'Message ID',
    'method_messages.getMessageReactionsList_param_reaction_type_string' => 'Get only reactions of this type (UTF8 emoji)',
    'method_messages.getMessageReactionsList_param_offset_type_string' => 'Offset (typically taken from the `next_offset` field of the returned [MessageReactionsList](../types/MessageReactionsList.md))',
    'method_messages.getMessageReactionsList_param_limit_type_int' => 'Maximum number of results to return, [see pagination](https://core.telegram.org/api/offsets)',
    'method_messages.editChatAdmin_param_chat_id_type_int' => 'The ID of the group',
    'method_invokeAfterMsgs_param_msg_ids_type_Vector long' => 'List of messages on which a current query depends',
    'object_botInlineMediaResultDocument_param_send_message_type_BotInlineMessage' => '',
    'object_botInlineMediaResultPhoto_param_send_message_type_BotInlineMessage' => '',
    'object_channelBannedRights_param_send_messages_type_true' => '',
    'method_messages.getMessagesReactions_param_id_type_Vector t' => '',
    'object_message_param_reactions_type_MessageReactions' => '',
    'object_message_param_restriction_reason_type_string' => '',
    'object_messageReactions_param_results_type_Vector t' => '',
    'method_auth.exportLoginToken' => '',
    'method_auth.exportLoginToken_param_api_id_type_int' => '',
    'method_auth.exportLoginToken_param_api_hash_type_string' => '',
    'method_auth.exportLoginToken_param_except_ids_type_Vector t' => '',
    'method_auth.importLoginToken' => '',
    'method_auth.importLoginToken_param_token_type_bytes' => '',
    'method_auth.acceptLoginToken' => '',
    'method_auth.acceptLoginToken_param_token_type_bytes' => '',
    'method_account.createTheme_param_settings_type_InputThemeSettings' => '',
    'method_account.updateTheme_param_settings_type_InputThemeSettings' => '',
    'method_account.setContentSettings' => '',
    'method_account.setContentSettings_param_sensitive_enabled_type_true' => '',
    'method_account.getContentSettings' => '',
    'method_account.getMultiWallPapers' => '',
    'method_account.getMultiWallPapers_param_wallpapers_type_Vector t' => '',
    'method_messages.getPollVotes' => '',
    'method_messages.getPollVotes_param_peer_type_InputPeer' => '',
    'method_messages.getPollVotes_param_id_type_int' => '',
    'method_messages.getPollVotes_param_option_type_bytes' => '',
    'method_messages.getPollVotes_param_offset_type_string' => '',
    'method_messages.getPollVotes_param_limit_type_int' => '',
    'method_upload.getFile_param_cdn_supported_type_true' => '',
    'method_channels.getInactiveChannels' => '',
    'object_inputMediaPoll_param_correct_answers_type_Vector t' => '',
    'object_wallPaperNoFile' => '',
    'object_wallPaperNoFile_param_default_type_true' => '',
    'object_wallPaperNoFile_param_dark_type_true' => '',
    'object_wallPaperNoFile_param_settings_type_WallPaperSettings' => '',
    'object_updateGeoLiveViewed' => '',
    'object_updateGeoLiveViewed_param_peer_type_Peer' => '',
    'object_updateGeoLiveViewed_param_msg_id_type_int' => '',
    'object_updateLoginToken' => '',
    'object_updateMessagePollVote' => '',
    'object_updateMessagePollVote_param_poll_id_type_long' => '',
    'object_updateMessagePollVote_param_user_id_type_int' => '',
    'object_updateMessagePollVote_param_options_type_Vector t' => '',
    'object_webPage_param_attributes_type_Vector t' => '',
    'object_keyboardButtonRequestPoll' => '',
    'object_keyboardButtonRequestPoll_param_quiz_type_Bool' => '',
    'object_keyboardButtonRequestPoll_param_text_type_string' => '',
    'object_poll_param_public_voters_type_true' => '',
    'object_poll_param_multiple_choice_type_true' => '',
    'object_poll_param_quiz_type_true' => '',
    'object_pollAnswerVoters_param_correct_type_true' => '',
    'object_pollResults_param_recent_voters_type_Vector t' => '',
    'object_inputWallPaperNoFile' => '',
    'object_wallPaperSettings_param_second_background_color_type_int' => '',
    'object_wallPaperSettings_param_rotation_type_int' => '',
    'object_autoDownloadSettings_param_video_upload_maxbitrate_type_int' => '',
    'object_theme_param_settings_type_ThemeSettings' => '',
    'object_auth.loginToken' => '',
    'object_auth.loginToken_param_expires_type_int' => '',
    'object_auth.loginToken_param_token_type_bytes' => '',
    'object_auth.loginTokenMigrateTo' => '',
    'object_auth.loginTokenMigrateTo_param_dc_id_type_int' => '',
    'object_auth.loginTokenMigrateTo_param_token_type_bytes' => '',
    'object_auth.loginTokenSuccess' => '',
    'object_auth.loginTokenSuccess_param_authorization_type_auth.Authorization' => '',
    'object_account.contentSettings' => '',
    'object_account.contentSettings_param_sensitive_enabled_type_true' => '',
    'object_account.contentSettings_param_sensitive_can_change_type_true' => '',
    'object_messages.inactiveChats' => '',
    'object_messages.inactiveChats_param_dates_type_Vector t' => '',
    'object_messages.inactiveChats_param_chats_type_Vector t' => '',
    'object_messages.inactiveChats_param_users_type_Vector t' => '',
    'object_baseThemeClassic' => '',
    'object_baseThemeDay' => '',
    'object_baseThemeNight' => '',
    'object_baseThemeTinted' => '',
    'object_baseThemeArctic' => '',
    'object_inputThemeSettings' => '',
    'object_inputThemeSettings_param_base_theme_type_BaseTheme' => '',
    'object_inputThemeSettings_param_accent_color_type_int' => '',
    'object_inputThemeSettings_param_message_top_color_type_int' => '',
    'object_inputThemeSettings_param_message_bottom_color_type_int' => '',
    'object_inputThemeSettings_param_wallpaper_type_InputWallPaper' => '',
    'object_inputThemeSettings_param_wallpaper_settings_type_WallPaperSettings' => '',
    'object_themeSettings' => '',
    'object_themeSettings_param_base_theme_type_BaseTheme' => '',
    'object_themeSettings_param_accent_color_type_int' => '',
    'object_themeSettings_param_message_top_color_type_int' => '',
    'object_themeSettings_param_message_bottom_color_type_int' => '',
    'object_themeSettings_param_wallpaper_type_WallPaper' => '',
    'object_webPageAttributeTheme' => '',
    'object_webPageAttributeTheme_param_documents_type_Vector t' => '',
    'object_webPageAttributeTheme_param_settings_type_ThemeSettings' => '',
    'object_messageUserVote' => '',
    'object_messageUserVote_param_user_id_type_int' => '',
    'object_messageUserVote_param_option_type_bytes' => '',
    'object_messageUserVote_param_date_type_int' => '',
    'object_messageUserVoteInputOption' => '',
    'object_messageUserVoteInputOption_param_user_id_type_int' => '',
    'object_messageUserVoteInputOption_param_date_type_int' => '',
    'object_messageUserVoteMultiple' => '',
    'object_messageUserVoteMultiple_param_user_id_type_int' => '',
    'object_messageUserVoteMultiple_param_options_type_Vector t' => '',
    'object_messageUserVoteMultiple_param_date_type_int' => '',
    'object_messages.votesList' => '',
    'object_messages.votesList_param_count_type_int' => '',
    'object_messages.votesList_param_votes_type_Vector t' => '',
    'object_messages.votesList_param_users_type_Vector t' => '',
    'object_messages.votesList_param_next_offset_type_string' => '',
  ],
];

    // THIS WILL BE OVERWRITTEN BY $lang["en"]
    public static $current_lang = [
  'req_pq' => 'Requesting pq...',
  'done' => 'Done!',
  'cdn_reupload' => 'File is not stored on CDN, requesting reupload!',
  'stored_on_cdn' => 'File is stored on CDN!',
  'serializing_madelineproto' => 'Serializing MadelineProto...',
  'phpseclib_fork' => 'Please install this fork of phpseclib: https://github.com/danog/phpseclib',
  'inst_dc' => 'Istantiating DataCenter...',
  'load_rsa' => 'Loading RSA keys...',
  'TL_translation' => 'Translating TL schemas...',
  'dh_prime_check_0' => 'Executing dh_prime checks (0/3)...',
  'nearest_dc' => 'We\'re in %s, nearest DC is %d.',
  'serialization_ofd' => 'Serialization is out of date, reconstructing object!',
  'getupdates_deserialization' => 'Getting updates after deserialization...',
  'shutdown_reader_pool' => 'Shutting down reader pool, %d jobs left',
  'threading_on' => 'THREADING IS ENABLED',
  'socket_reader' => 'Socket reader on DC %s: ',
  'socket_status_1' => 'CREATING',
  'socket_status_2' => 'SUBMITTING',
  'socket_status_3' => 'WAITING',
  'socket_status_4' => 'READY',
  'socket_status_5' => 'WORKING',
  'api_not_set' => 'You must provide an api key and an api id, get your own @ my.telegram.org',
  'session_corrupted' => 'The session is corrupted!',
  'resetSession_seqno' => 'Resetting session id and seq_no in DC %s...',
  'gen_perm_auth_key' => 'Generating permanent authorization key for DC %s...',
  'gen_temp_auth_key' => 'Generating temporary authorization key for DC %s...',
  'copy_auth_dcs' => 'Copying authorization from DC %s to DC %s...',
  'write_client_info' => 'Writing client info (also executing %s)...',
  'config_updated' => 'Updated config!',
  'length_not_4' => 'Length is not equal to 4',
  'length_not_8' => 'Length is not equal to 8',
  'value_bigger_than_2147483647' => 'Provided value %s is bigger than 2147483647',
  'value_smaller_than_2147483648' => 'Provided value %s is smaller than -2147483648',
  'value_bigger_than_9223372036854775807' => 'Provided value %s is bigger than 9223372036854775807',
  'value_smaller_than_9223372036854775808' => 'Provided value %s is smaller than -9223372036854775808',
  'value_bigger_than_4294967296' => 'Provided value %s is bigger than 4294967296',
  'value_smaller_than_0' => 'Provided value %s is smaller than 0',
  'encode_double_error' => 'Could not properly encode double',
  'file_not_exist' => 'File does not exist',
  'deserialization_error' => 'An error occurred on deserialization',
  'rsa_init' => 'Istantiating \\tgseclib\\Crypt\\RSA...',
  'loading_key' => 'Loading key...',
  'computing_fingerprint' => 'Computing fingerprint...',
  'rsa_encrypting' => 'Encrypting with rsa key...',
  'rpc_tg_error' => 'Telegram returned an RPC error: %s (%s), caused by %s:%s%sTL trace:',
  'v_error' => '506c656173652075706461746520746f20746865206c61746573742076657273696f6e206f66204d6164656c696e6550726f746f2e',
  'v_tgerror' => '506c6561736520757064617465207068702d6c69627467766f6970',
  'no_mode_specified' => 'No mode was specified!',
  'constructor_function_uncalled' => 'The constructor function wasn\'t called! Please call the constructor function before using this method.',
  'proxy_class_invalid' => 'Invalid proxy class provided!',
  'socket_con_error' => 'Connection: couldn\'t connect to socket.',
  'protocol_not_implemented' => 'Connection: This protocol isn\'t implemented yet.',
  'protocol_invalid' => 'Connection: invalid protocol specified.',
  'nothing_in_socket' => 'Nothing in the socket!',
  'wrong_length_read' => 'WARNING: Wrong length was read (should\'ve read %s, read %s)!',
  'no_data_in_socket' => 'No data in the socket!',
  'dc_con_start' => 'Connecting to DC %s...',
  'dc_con_stop' => 'Disconnecting from DC %s...',
  'dc_con_test_start' => 'Connecting to DC %s (%s server, %s, %s)...',
  'script_not_exist' => 'Provided script does not exist',
  'apifactory_start' => 'Running APIFactory...',
  'madelineproto_ready' => 'MadelineProto is ready!',
  'logout_error' => 'An error occurred while logging out!',
  'logout_ok' => 'Logged out successfully!',
  'already_loggedIn' => 'This instance of MadelineProto is already logged in. Logging out first...',
  'login_ok' => 'Logged in successfully!',
  'login_user' => 'Logging in as a normal user...',
  'login_bot' => 'Logging in as a bot...',
  'login_code_sending' => 'Sending code...',
  'login_code_sent' => 'Code sent successfully! Once you receive the code you should use the completePhoneLogin function.',
  'login_code_uncalled' => 'I\'m not waiting for the code! Please call the phoneLogin method first',
  'login_2fa_enabled' => '2FA enabled, you will have to call the complete2falogin function...',
  'login_need_signup' => 'An account has not been created for this number, you will have to call the completeSignup function...',
  'login_auth_key' => 'Logging in using auth key...',
  'not_loggedIn' => 'I\'m not logged in!',
  'signup_uncalled' => 'I\'m not waiting to signup! Please call the phoneLogin and the completePhoneLogin methods first!',
  'signing_up' => 'Signing up as a normal user...',
  'signup_ok' => 'Signed up in successfully!',
  '2fa_uncalled' => 'I\'m not waiting for the password! Please call the phoneLogin and the completePhoneLogin methods first!',
  'getting_dialogs' => 'Getting dialogs...',
  'libtgvoip_required' => 'The php-libtgvoip extension is required to accept and manage calls. See daniil.it/MadelineProto for more info.',
  'peer_not_in_db' => 'This peer is not present in the internal peer database',
  'calling_user' => 'Calling %s...',
  'generating_a' => 'Generating a...',
  'generating_g_a' => 'Generating g_a...',
  'call_error_1' => 'Could not find and accept call %s',
  'accepting_call' => 'Accepting call from %s...',
  'generating_b' => 'Generating b...',
  'call_already_accepted' => 'Call %s already accepted',
  'call_already_declined' => 'Call %s already declined',
  'call_error_2' => 'Could not find and confirm call %s',
  'call_confirming' => 'Confirming call from %s...',
  'call_error_3' => 'Could not find and complete call %s',
  'call_completing' => 'Completing call from %s...',
  'invalid_g_a' => 'Invalid g_a!',
  'fingerprint_invalid' => 'Invalid key fingerprint!',
  'call_discarding' => 'Discarding call %s...',
  'call_set_rating' => 'Setting rating for call %s...',
  'call_debug_saving' => 'Saving debug data for call %s...',
  'TL_loading' => 'Loading TL schemes...',
  'file_parsing' => 'Parsing %s...',
  'crc32_mismatch' => 'CRC32 mismatch (%s, %s) for %s',
  'src_file_invalid' => 'Invalid source file was provided: ',
  'translating_obj' => 'Translating objects...',
  'translating_methods' => 'Translating methods...',
  'bool_error' => 'Could not extract boolean',
  'not_numeric' => 'Given value isn\'t numeric',
  'long_not_16' => 'Given value is not 16 bytes long',
  'long_not_32' => 'Given value is not 32 bytes long',
  'long_not_64' => 'Given value is not 64 bytes long',
  'array_invalid' => 'You didn\'t provide a valid array',
  'predicate_not_set' => 'Predicate (value under _) was not set!',
  'type_extract_error' => 'Could not extract type "%s"',
  'method_not_found' => 'Could not find method: ',
  'params_missing' => 'Missing required parameter',
  'sec_peer_not_in_db' => 'This secret peer is not present in the internal peer database',
  'stream_handle_invalid' => 'An invalid stream handle was provided.',
  'length_too_big' => 'Length is too big',
  'deserialize_not_str' => 'Deserialize: Generated value isn\'t a string',
  'type_extract_error_id' => 'Could not extract type: %s with id %s',
  'vector_invalid' => 'Invalid vector constructor: ',
  'constructor_not_found' => 'Constructor not found for type: ',
  'rand_bytes_too_small' => 'Random_bytes is too small!',
  'botapi_conversion_error' => 'Can\'t convert %s to a bot API object',
  'non_text_conversion' => 'Can\'t convert non text messages yet!',
  'last_byte_invalid' => 'Invalid last byte',
  'file_type_invalid' => 'Invalid file type detected (%s)',
  'recreate_temp_auth_key' => 'I had to recreate the temporary authorization key',
  'resetting_auth_key' => 'WARNING: Resetting auth key...',
  'shutting_down_reader_pool' => 'Shutting down reader pool ',
  'shutting_down_handler_pool' => 'Shutting down handler pool for dc %s, %d jobs left',
  'secret_chat_skipping' => 'I do not have the secret chat %s in the database, skipping message...',
  'fingerprint_mismatch' => 'Key fingerprint mismatch',
  'msg_data_length_too_big' => 'Message_data_length is too big',
  'length_not_divisible_16' => 'Length of decrypted data is not divisible by 16',
  'msg_key_mismatch' => 'Msg_key mismatch',
  'rand_bytes_too_short' => 'Random_bytes is too short!',
  'resending_unsupported' => 'Resending of messages is not yet supported',
  'unrecognized_dec_msg' => 'Unrecognized decrypted message received: ',
  'method_req_pq' => 'Requests PQ for factorization',
  'method_req_pq_param_nonce_type_int128' => 'Random number for cryptographic security',
  'method_req_pq_multi' => 'Requests PQ for factorization (new version)',
  'method_req_pq_multi_param_nonce_type_int128' => 'Random number for cryptographic security',
  'method_req_DH_params' => 'Requests Diffie-hellman parameters for key exchange',
  'method_req_DH_params_param_nonce_type_int128' => 'Random number for cryptographic security',
  'method_req_DH_params_param_server_nonce_type_int128' => 'Random number for cryptographic security, given by server',
  'method_req_DH_params_param_p_type_bytes' => 'Factorized p from pq',
  'method_req_DH_params_param_q_type_bytes' => 'Factorized q from pq',
  'method_req_DH_params_param_public_key_fingerprint_type_long' => 'Server RSA fingerprint',
  'method_req_DH_params_param_encrypted_data_type_bytes' => 'Encrypted key exchange message',
  'method_set_client_DH_params' => 'Sets client diffie-hellman parameters',
  'method_set_client_DH_params_param_nonce_type_int128' => 'Random number for cryptographic security',
  'method_set_client_DH_params_param_server_nonce_type_int128' => 'Random number for cryptographic security, given by server',
  'method_set_client_DH_params_param_encrypted_data_type_bytes' => 'Encrypted key exchange message',
  'method_rpc_drop_answer' => 'Do not send answer to provided request',
  'method_rpc_drop_answer_param_req_msg_id_type_long' => 'The message ID of the request',
  'method_get_future_salts' => 'Get future salts',
  'method_get_future_salts_param_num_type_int' => 'How many salts should be fetched',
  'method_ping' => 'Pings the server',
  'method_ping_param_ping_id_type_long' => 'Ping ID',
  'method_ping_delay_disconnect' => 'Pings the server and causes disconection if the same method is not called within ping_disconnect_delay',
  'method_ping_delay_disconnect_param_ping_id_type_long' => 'Ping ID',
  'method_ping_delay_disconnect_param_disconnect_delay_type_int' => 'Disconection delay',
  'method_destroy_session' => 'Destroy the current MTProto session',
  'method_destroy_session_param_session_id_type_long' => 'The session to destroy',
  'method_http_wait' => 'Makes the server send messages waiting in the buffer',
  'method_http_wait_param_max_delay_type_int' => 'Denotes the maximum number of milliseconds that has elapsed between the first message for this session and the transmission of an HTTP response',
  'method_http_wait_param_wait_after_type_int' => 'After the receipt of the latest message for a particular session, the server waits another wait_after milliseconds in case there are more messages. If there are no additional messages, the result is transmitted (a container with all the messages).',
  'method_http_wait_param_max_wait_type_int' => 'If more messages appear, the wait_after timer is reset.',
  'method_invokeAfterMsg' => 'Invokes a query after successfull completion of one of the previous queries.',
  'method_invokeAfterMsg_param_msg_id_type_long' => 'Message identifier on which a current query depends',
  'method_invokeAfterMsg_param_query_type_!X' => 'The query itself',
  'method_invokeAfterMsgs' => 'Invokes a query after a successfull completion of previous queries',
  'method_invokeAfterMsgs_param_msg_ids_type_Vector t' => 'List of messages on which a current query depends',
  'method_invokeAfterMsgs_param_query_type_!X' => 'The query itself',
  'method_initConnection' => 'Initialize connection',
  'method_initConnection_param_api_id_type_int' => 'Application identifier (see. [App configuration](https://core.telegram.org/myapp))',
  'method_initConnection_param_device_model_type_string' => 'Device model',
  'method_initConnection_param_system_version_type_string' => 'Operation system version',
  'method_initConnection_param_app_version_type_string' => 'Application version',
  'method_initConnection_param_system_lang_code_type_string' => 'Code for the language used on the device\'s OS, ISO 639-1 standard',
  'method_initConnection_param_lang_pack_type_string' => 'Language pack to use',
  'method_initConnection_param_lang_code_type_string' => 'Code for the language used on the client, ISO 639-1 standard',
  'method_initConnection_param_query_type_!X' => 'The query itself',
  'method_invokeWithLayer' => 'Invoke the specified query using the specified API [layer](https://core.telegram.org/api/invoking#layers)',
  'method_invokeWithLayer_param_layer_type_int' => 'The layer to use',
  'method_invokeWithLayer_param_query_type_!X' => 'The query',
  'method_invokeWithoutUpdates' => 'Invoke a request without subscribing the used connection for [updates](https://core.telegram.org/api/updates) (this is enabled by default for [file queries](https://core.telegram.org/api/files)).',
  'method_invokeWithoutUpdates_param_query_type_!X' => 'The query',
  'method_auth.checkPhone' => 'Check if this phone number is registered on telegram',
  'method_auth.checkPhone_param_phone_number_type_string' => 'The phone number to check',
  'method_auth.sendCode' => 'You cannot use this method directly, use the phoneLogin method instead (see https://docs.madelineproto.xyz for more info)',
  'method_auth.sendCode_param_allow_flashcall_type_true' => 'You cannot use this method directly, use the phoneLogin method instead (see https://docs.madelineproto.xyz for more info)',
  'method_auth.sendCode_param_phone_number_type_string' => 'You cannot use this method directly, use the phoneLogin method instead (see https://docs.madelineproto.xyz for more info)',
  'method_auth.sendCode_param_current_number_type_Bool' => 'You cannot use this method directly, use the phoneLogin method instead (see https://docs.madelineproto.xyz for more info)',
  'method_auth.sendCode_param_api_id_type_int' => 'You cannot use this method directly, use the phoneLogin method instead (see https://docs.madelineproto.xyz for more info)',
  'method_auth.sendCode_param_api_hash_type_string' => 'You cannot use this method directly, use the phoneLogin method instead (see https://docs.madelineproto.xyz for more info)',
  'method_auth.signUp' => 'You cannot use this method directly, use the completeSignup method instead (see https://docs.madelineproto.xyz for more info)',
  'method_auth.signUp_param_phone_number_type_string' => 'You cannot use this method directly, use the completeSignup method instead (see https://docs.madelineproto.xyz for more info)',
  'method_auth.signUp_param_phone_code_hash_type_string' => 'You cannot use this method directly, use the completeSignup method instead (see https://docs.madelineproto.xyz for more info)',
  'method_auth.signUp_param_phone_code_type_string' => 'You cannot use this method directly, use the completeSignup method instead (see https://docs.madelineproto.xyz for more info)',
  'method_auth.signUp_param_first_name_type_string' => 'You cannot use this method directly, use the completeSignup method instead (see https://docs.madelineproto.xyz for more info)',
  'method_auth.signUp_param_last_name_type_string' => 'You cannot use this method directly, use the completeSignup method instead (see https://docs.madelineproto.xyz for more info)',
  'method_auth.signIn' => 'You cannot use this method directly, use the completePhoneLogin method instead (see https://docs.madelineproto.xyz for more info)',
  'method_auth.signIn_param_phone_number_type_string' => 'You cannot use this method directly, use the completePhoneLogin method instead (see https://docs.madelineproto.xyz for more info)',
  'method_auth.signIn_param_phone_code_hash_type_string' => 'You cannot use this method directly, use the completePhoneLogin method instead (see https://docs.madelineproto.xyz for more info)',
  'method_auth.signIn_param_phone_code_type_string' => 'You cannot use this method directly, use the completePhoneLogin method instead (see https://docs.madelineproto.xyz for more info)',
  'method_auth.logOut' => 'You cannot use this method directly, use the logout method instead (see https://docs.madelineproto.xyz for more info)',
  'method_auth.resetAuthorizations' => 'Terminates all user\'s authorized sessions except for the current one.

After calling this method it is necessary to reregister the current device using the method [account.registerDevice](../methods/account.registerDevice.md)',
  'method_auth.sendInvites' => 'Invite friends to telegram!',
  'method_auth.sendInvites_param_phone_numbers_type_Vector t' => 'Phone numbers to invite',
  'method_auth.sendInvites_param_message_type_string' => 'The message to send',
  'method_auth.exportAuthorization' => 'You cannot use this method directly, use $MadelineProto->exportAuthorization() instead, see https://docs.madelineproto.xyz/docs/LOGIN.html',
  'method_auth.exportAuthorization_param_dc_id_type_int' => 'You cannot use this method directly, use $MadelineProto->exportAuthorization() instead, see https://docs.madelineproto.xyz/docs/LOGIN.html',
  'method_auth.importAuthorization' => 'You cannot use this method directly, use $MadelineProto->importAuthorization($authorization) instead, see https://docs.madelineproto.xyz/docs/LOGIN.html',
  'method_auth.importAuthorization_param_id_type_int' => 'You cannot use this method directly, use $MadelineProto->importAuthorization($authorization) instead, see https://docs.madelineproto.xyz/docs/LOGIN.html',
  'method_auth.importAuthorization_param_bytes_type_bytes' => 'You cannot use this method directly, use $MadelineProto->importAuthorization($authorization) instead, see https://docs.madelineproto.xyz/docs/LOGIN.html',
  'method_auth.bindTempAuthKey' => 'You cannot use this method directly, instead modify the PFS and default_temp_auth_key_expires_in settings, see https://docs.madelineproto.xyz/docs/SETTINGS.html for more info',
  'method_auth.bindTempAuthKey_param_perm_auth_key_id_type_long' => 'You cannot use this method directly, instead modify the PFS and default_temp_auth_key_expires_in settings, see https://docs.madelineproto.xyz/docs/SETTINGS.html for more info',
  'method_auth.bindTempAuthKey_param_nonce_type_long' => 'You cannot use this method directly, instead modify the PFS and default_temp_auth_key_expires_in settings, see https://docs.madelineproto.xyz/docs/SETTINGS.html for more info',
  'method_auth.bindTempAuthKey_param_expires_at_type_int' => 'You cannot use this method directly, instead modify the PFS and default_temp_auth_key_expires_in settings, see https://docs.madelineproto.xyz/docs/SETTINGS.html for more info',
  'method_auth.bindTempAuthKey_param_encrypted_message_type_bytes' => 'You cannot use this method directly, instead modify the PFS and default_temp_auth_key_expires_in settings, see https://docs.madelineproto.xyz/docs/SETTINGS.html for more info',
  'method_auth.importBotAuthorization' => 'You cannot use this method directly, use the botLogin method instead (see https://docs.madelineproto.xyz for more info)',
  'method_auth.importBotAuthorization_param_api_id_type_int' => 'You cannot use this method directly, use the botLogin method instead (see https://docs.madelineproto.xyz for more info)',
  'method_auth.importBotAuthorization_param_api_hash_type_string' => 'You cannot use this method directly, use the botLogin method instead (see https://docs.madelineproto.xyz for more info)',
  'method_auth.importBotAuthorization_param_bot_auth_token_type_string' => 'You cannot use this method directly, use the botLogin method instead (see https://docs.madelineproto.xyz for more info)',
  'method_auth.checkPassword' => 'You cannot use this method directly, use the complete2falogin method instead (see https://docs.madelineproto.xyz for more info)',
  'method_auth.checkPassword_param_password_hash_type_bytes' => 'You cannot use this method directly, use the complete2falogin method instead (see https://docs.madelineproto.xyz for more info)',
  'method_auth.requestPasswordRecovery' => 'Request recovery code of a [2FA password](https://core.telegram.org/api/srp), only for accounts with a [recovery email configured](https://core.telegram.org/api/srp#email-verification).',
  'method_auth.recoverPassword' => 'Reset the [2FA password](https://core.telegram.org/api/srp) using the recovery code sent using [auth.requestPasswordRecovery](../methods/auth.requestPasswordRecovery.md).',
  'method_auth.recoverPassword_param_code_type_string' => 'Code received via email',
  'method_auth.resendCode' => 'Resend the login code via another medium, the phone code type is determined by the return value of the previous auth.sendCode/auth.resendCode: see [login](https://core.telegram.org/api/auth) for more info.',
  'method_auth.resendCode_param_phone_number_type_string' => 'The phone number',
  'method_auth.resendCode_param_phone_code_hash_type_string' => 'The phone code hash obtained from [auth.sendCode](../methods/auth.sendCode.md)',
  'method_auth.cancelCode' => 'Cancel the login verification code',
  'method_auth.cancelCode_param_phone_number_type_string' => 'Phone number',
  'method_auth.cancelCode_param_phone_code_hash_type_string' => 'Phone code hash from [auth.sendCode](../methods/auth.sendCode.md)',
  'method_auth.dropTempAuthKeys' => 'Delete all temporary authorization keys **except for** the ones specified',
  'method_auth.dropTempAuthKeys_param_except_auth_keys_type_Vector t' => 'The temporary authorization keys to keep',
  'method_account.registerDevice' => 'Register device to receive [PUSH notifications](https://core.telegram.org/api/push-updates)',
  'method_account.registerDevice_param_token_type_type_int' => 'Device token type.<br>**Possible values**:<br>`1` \\- APNS (device token for apple push)<br>`2` \\- FCM (firebase token for google firebase)<br>`3` \\- MPNS (channel URI for microsoft push)<br>`4` \\- Simple push (endpoint for firefox\'s simple push API)<br>`5` \\- Ubuntu phone (token for ubuntu push)<br>`6` \\- Blackberry (token for blackberry push)<br>`7` \\- Unused<br>`8` \\- WNS (windows push)<br>`9` \\- APNS VoIP (token for apple push VoIP)<br>`10` \\- Web push (web push, see below)<br>`11` \\- MPNS VoIP (token for microsoft push VoIP)<br>`12` \\- Tizen (token for tizen push)<br><br>For `10` web push, the token must be a JSON-encoded object containing the keys described in [PUSH updates](https://core.telegram.org/api/push-updates)',
  'method_account.registerDevice_param_token_type_string' => 'Device token',
  'method_account.registerDevice_param_app_sandbox_type_Bool' => 'If [(boolTrue)](../constructors/boolTrue.md) is transmitted, a sandbox-certificate will be used during transmission.',
  'method_account.registerDevice_param_other_uids_type_Vector t' => 'Other UIDs',
  'method_account.unregisterDevice' => 'Deletes a device by its token, stops sending PUSH-notifications to it.',
  'method_account.unregisterDevice_param_token_type_type_int' => 'Device token type.<br>**Possible values**:<br>`1` \\- APNS (device token for apple push)<br>`2` \\- FCM (firebase token for google firebase)<br>`3` \\- MPNS (channel URI for microsoft push)<br>`4` \\- Simple push (endpoint for firefox\'s simple push API)<br>`5` \\- Ubuntu phone (token for ubuntu push)<br>`6` \\- Blackberry (token for blackberry push)<br>`7` \\- Unused<br>`8` \\- WNS (windows push)<br>`9` \\- APNS VoIP (token for apple push VoIP)<br>`10` \\- Web push (web push, see below)<br>`11` \\- MPNS VoIP (token for microsoft push VoIP)<br>`12` \\- Tizen (token for tizen push)<br><br>For `10` web push, the token must be a JSON-encoded object containing the keys described in [PUSH updates](https://core.telegram.org/api/push-updates)',
  'method_account.unregisterDevice_param_token_type_string' => 'Device token',
  'method_account.unregisterDevice_param_other_uids_type_Vector t' => 'Other UIDs',
  'method_account.updateNotifySettings' => 'Edits notification settings from a given user/group, from all users/all groups.',
  'method_account.updateNotifySettings_param_peer_type_InputNotifyPeer' => 'Notification source',
  'method_account.updateNotifySettings_param_settings_type_InputPeerNotifySettings' => 'Notification settings',
  'method_account.getNotifySettings' => 'Gets current notification settings for a given user/group, from all users/all groups.',
  'method_account.getNotifySettings_param_peer_type_InputNotifyPeer' => 'Notification source',
  'method_account.resetNotifySettings' => 'Resets all notification settings from users and groups.',
  'method_account.updateProfile' => 'Updates user profile.',
  'method_account.updateProfile_param_first_name_type_string' => 'New user first name',
  'method_account.updateProfile_param_last_name_type_string' => 'New user last name',
  'method_account.updateProfile_param_about_type_string' => 'New bio',
  'method_account.updateStatus' => 'Updates online user status.',
  'method_account.updateStatus_param_offline_type_Bool' => 'If [(boolTrue)](../constructors/boolTrue.md) is transmitted, user status will change to [(userStatusOffline)](../constructors/userStatusOffline.md).',
  'method_account.getWallPapers' => 'Returns a list of available wallpapers.',
  'method_account.reportPeer' => 'Report a peer for violation of telegram\'s Terms of Service',
  'method_account.reportPeer_param_peer_type_InputPeer' => 'The peer to report',
  'method_account.reportPeer_param_reason_type_ReportReason' => 'The reason why this peer is being reported',
  'method_account.checkUsername' => 'Validates a username and checks availability.',
  'method_account.checkUsername_param_username_type_string' => 'Username<br>Accepted characters: A-z (case-insensitive), 0-9 and underscores.<br>Length: 5-32 characters.',
  'method_account.updateUsername' => 'Changes username for the current user.',
  'method_account.updateUsername_param_username_type_string' => 'Username or empty string if username is to be removed<br>Accepted characters: a-z (case-insensitive), 0-9 and underscores.<br>Length: 5-32 characters.',
  'method_account.getPrivacy' => 'Get privacy settings of current account',
  'method_account.getPrivacy_param_key_type_InputPrivacyKey' => 'Peer category whose privacy settings should be fetched',
  'method_account.setPrivacy' => 'Change privacy settings of current account',
  'method_account.setPrivacy_param_key_type_InputPrivacyKey' => 'Peers to which the privacy rules apply',
  'method_account.setPrivacy_param_rules_type_Vector t' => 'Privacy settings',
  'method_account.deleteAccount' => 'Delete the user\'s account from the telegram servers. Can be used, for example, to delete the account of a user that provided the login code, but forgot the [2FA password and no recovery method is configured](https://core.telegram.org/api/srp).',
  'method_account.deleteAccount_param_reason_type_string' => 'Why is the account being deleted, can be empty',
  'method_account.getAccountTTL' => 'Get days to live of account',
  'method_account.setAccountTTL' => 'Set account self-destruction period',
  'method_account.setAccountTTL_param_ttl_type_AccountDaysTTL' => 'Time to live in days',
  'method_account.sendChangePhoneCode' => 'Verify a new phone number to associate to the current account',
  'method_account.sendChangePhoneCode_param_allow_flashcall_type_true' => 'Can the code be sent using a flash call instead of an SMS?',
  'method_account.sendChangePhoneCode_param_phone_number_type_string' => 'New phone number',
  'method_account.sendChangePhoneCode_param_current_number_type_Bool' => 'Current phone number',
  'method_account.changePhone' => 'Change the phone number of the current account',
  'method_account.changePhone_param_phone_number_type_string' => 'New phone number',
  'method_account.changePhone_param_phone_code_hash_type_string' => 'Phone code hash received when calling [account.sendChangePhoneCode](../methods/account.sendChangePhoneCode.md)',
  'method_account.changePhone_param_phone_code_type_string' => 'Phone code received when calling [account.sendChangePhoneCode](../methods/account.sendChangePhoneCode.md)',
  'method_account.updateDeviceLocked' => 'When client-side passcode lock feature is enabled, will not show message texts in incoming [PUSH notifications](https://core.telegram.org/api/push-updates).',
  'method_account.updateDeviceLocked_param_period_type_int' => 'Inactivity period after which to start hiding message texts in [PUSH notifications](https://core.telegram.org/api/push-updates).',
  'method_account.getAuthorizations' => 'Get logged-in sessions',
  'method_account.resetAuthorization' => 'Log out an active [authorized session](https://core.telegram.org/api/auth) by its hash',
  'method_account.resetAuthorization_param_hash_type_long' => 'Session hash',
  'method_account.getPassword' => 'Obtain configuration for two-factor authorization with password',
  'method_account.getPasswordSettings' => 'You cannot use this method directly; use $MadelineProto->update2fa($params), instead (see https://docs.madelineproto.xyz for more info)',
  'method_account.getPasswordSettings_param_current_password_hash_type_bytes' => 'You cannot use this method directly; use $MadelineProto->update2fa($params), instead (see https://docs.madelineproto.xyz for more info)',
  'method_account.updatePasswordSettings' => 'You cannot use this method directly; use $MadelineProto->update2fa($params), instead (see https://docs.madelineproto.xyz for more info)',
  'method_account.updatePasswordSettings_param_current_password_hash_type_bytes' => 'You cannot use this method directly; use $MadelineProto->update2fa($params), instead (see https://docs.madelineproto.xyz for more info)',
  'method_account.updatePasswordSettings_param_new_settings_type_account.PasswordInputSettings' => 'You cannot use this method directly; use $MadelineProto->update2fa($params), instead (see https://docs.madelineproto.xyz for more info)',
  'method_account.sendConfirmPhoneCode' => 'Send confirmation code to cancel account deletion, for more info [click here »](https://core.telegram.org/api/account-deletion)',
  'method_account.sendConfirmPhoneCode_param_allow_flashcall_type_true' => 'Can telegram call you instead of sending an SMS?',
  'method_account.sendConfirmPhoneCode_param_hash_type_string' => 'The hash from the service notification, for more info [click here »](https://core.telegram.org/api/account-deletion)',
  'method_account.sendConfirmPhoneCode_param_current_number_type_Bool' => 'The current phone number',
  'method_account.confirmPhone' => 'Confirm a phone number to cancel account deletion, for more info [click here »](https://core.telegram.org/api/account-deletion)',
  'method_account.confirmPhone_param_phone_code_hash_type_string' => 'Phone code hash, for more info [click here »](https://core.telegram.org/api/account-deletion)',
  'method_account.confirmPhone_param_phone_code_type_string' => 'SMS code, for more info [click here »](https://core.telegram.org/api/account-deletion)',
  'method_account.getTmpPassword' => 'Get temporary payment password',
  'method_account.getTmpPassword_param_password_hash_type_bytes' => 'The password hash',
  'method_account.getTmpPassword_param_period_type_int' => 'Time during which the temporary password will be valid, in seconds; should be between 60 and 86400',
  'method_account.getWebAuthorizations' => 'Get web [login widget](https://core.telegram.org/widgets/login) authorizations',
  'method_account.resetWebAuthorization' => 'Log out an active web [telegram login](https://core.telegram.org/widgets/login) session',
  'method_account.resetWebAuthorization_param_hash_type_long' => '[Session](../constructors/webAuthorization.md) hash',
  'method_account.resetWebAuthorizations' => 'Reset all active web [telegram login](https://core.telegram.org/widgets/login) sessions',
  'method_users.getUsers' => 'Returns basic user info according to their identifiers.',
  'method_users.getUsers_param_id_type_Vector t' => 'The ids of the users',
  'method_users.getFullUser' => 'You cannot use this method directly, use the getPwrChat, getInfo, getFullInfo methods instead (see https://docs.madelineproto.xyz for more info)',
  'method_users.getFullUser_param_id_type_InputUser' => 'You cannot use this method directly, use the getPwrChat, getInfo, getFullInfo methods instead (see https://docs.madelineproto.xyz for more info)',
  'method_contacts.getStatuses' => 'Returns the list of contact statuses.',
  'method_contacts.getContacts' => 'Returns the current user\'s contact list.',
  'method_contacts.getContacts_param_hash_type_int' => 'If there already is a full contact list on the client, a [hash](https://core.telegram.org/api/offsets#hash-generation) of a the list of contact IDs in ascending order may be passed in this parameter. If the contact set was not changed, [(contacts.contactsNotModified)](../constructors/contacts.contactsNotModified.md) will be returned.',
  'method_contacts.importContacts' => 'Imports contacts: saves a full list on the server, adds already registered contacts to the contact list, returns added contacts and their info.',
  'method_contacts.importContacts_param_contacts_type_Vector t' => 'The numbers to import',
  'method_contacts.deleteContact' => 'Delete a contact',
  'method_contacts.deleteContact_param_id_type_InputUser' => 'The contact to delete',
  'method_contacts.deleteContacts' => 'Deletes several contacts from the list.',
  'method_contacts.deleteContacts_param_id_type_Vector t' => 'The contacts to delete',
  'method_contacts.block' => 'Adds the user to the blacklist.',
  'method_contacts.block_param_id_type_InputUser' => 'User ID',
  'method_contacts.unblock' => 'Deletes the user from the blacklist.',
  'method_contacts.unblock_param_id_type_InputUser' => 'User ID',
  'method_contacts.getBlocked' => 'Returns the list of blocked users.',
  'method_contacts.getBlocked_param_offset_type_int' => 'The number of list elements to be skipped',
  'method_contacts.getBlocked_param_limit_type_int' => 'The number of list elements to be returned',
  'method_contacts.exportCard' => 'Export contact as card',
  'method_contacts.importCard' => 'Import card as contact',
  'method_contacts.importCard_param_export_card_type_Vector t' => 'The card',
  'method_contacts.search' => 'Returns users found by username substring.',
  'method_contacts.search_param_q_type_string' => 'Target substring',
  'method_contacts.search_param_limit_type_int' => 'Maximum number of users to be returned',
  'method_contacts.resolveUsername' => 'You cannot use this method directly, use the resolveUsername, getPwrChat, getInfo, getFullInfo methods instead (see https://docs.madelineproto.xyz for more info)',
  'method_contacts.resolveUsername_param_username_type_string' => 'You cannot use this method directly, use the resolveUsername, getPwrChat, getInfo, getFullInfo methods instead (see https://docs.madelineproto.xyz for more info)',
  'method_contacts.getTopPeers' => 'Get most used peers',
  'method_contacts.getTopPeers_param_correspondents_type_true' => 'Users we\'ve chatted most frequently with',
  'method_contacts.getTopPeers_param_bots_pm_type_true' => 'Most used bots',
  'method_contacts.getTopPeers_param_bots_inline_type_true' => 'Most used inline bots',
  'method_contacts.getTopPeers_param_phone_calls_type_true' => 'Most frequently called users',
  'method_contacts.getTopPeers_param_groups_type_true' => 'Often-opened groups and supergroups',
  'method_contacts.getTopPeers_param_channels_type_true' => 'Most frequently visited channels',
  'method_contacts.getTopPeers_param_offset_type_int' => 'Offset for [pagination](https://core.telegram.org/api/offsets)',
  'method_contacts.getTopPeers_param_limit_type_int' => 'Maximum number of results to return, [see pagination](https://core.telegram.org/api/offsets)',
  'method_contacts.getTopPeers_param_hash_type_int' => '[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)',
  'method_contacts.resetTopPeerRating' => 'Reset [rating](https://core.telegram.org/api/top-rating) of top peer',
  'method_contacts.resetTopPeerRating_param_category_type_TopPeerCategory' => 'Top peer category',
  'method_contacts.resetTopPeerRating_param_peer_type_InputPeer' => 'Peer whose rating should be reset',
  'method_contacts.resetSaved' => 'Delete saved contacts',
  'method_messages.getMessages' => 'Returns the list of messages by their IDs.',
  'method_messages.getMessages_param_id_type_Vector t' => 'The IDs of messages to fetch (only for users and normal groups)',
  'method_messages.getDialogs' => 'Returns the current user dialog list.',
  'method_messages.getDialogs_param_exclude_pinned_type_true' => 'Exclude pinned dialogs',
  'method_messages.getDialogs_param_offset_date_type_int' => '[Offsets for pagination, for more info click here](https://core.telegram.org/api/offsets)',
  'method_messages.getDialogs_param_offset_id_type_int' => '[Offsets for pagination, for more info click here](https://core.telegram.org/api/offsets)',
  'method_messages.getDialogs_param_offset_peer_type_InputPeer' => '[Offset peer for pagination](https://core.telegram.org/api/offsets)',
  'method_messages.getDialogs_param_limit_type_int' => 'Number of list elements to be returned',
  'method_messages.getHistory' => 'Gets back the conversation history with one interlocutor / within a chat',
  'method_messages.getHistory_param_peer_type_InputPeer' => 'Target peer',
  'method_messages.getHistory_param_offset_id_type_int' => 'Only return messages starting from the specified message ID',
  'method_messages.getHistory_param_offset_date_type_int' => 'Only return messages sent after the specified date',
  'method_messages.getHistory_param_add_offset_type_int' => 'Number of list elements to be skipped, negative values are also accepted.',
  'method_messages.getHistory_param_limit_type_int' => 'Number of results to return',
  'method_messages.getHistory_param_max_id_type_int' => 'If a positive value was transferred, the method will return only messages with IDs less than **max\\_id**',
  'method_messages.getHistory_param_min_id_type_int' => 'If a positive value was transferred, the method will return only messages with IDs more than **min\\_id**',
  'method_messages.getHistory_param_hash_type_int' => '[Result hash](https://core.telegram.org/api/offsets)',
  'method_messages.search' => 'Gets back found messages',
  'method_messages.search_param_peer_type_InputPeer' => 'User or chat, histories with which are searched, or [(inputPeerEmpty)](../constructors/inputPeerEmpty.md) constructor for global search',
  'method_messages.search_param_q_type_string' => 'Text search request',
  'method_messages.search_param_from_id_type_InputUser' => 'Only return messages sent by the specified user ID',
  'method_messages.search_param_filter_type_MessagesFilter' => 'Filter to return only specified message types',
  'method_messages.search_param_min_date_type_int' => 'If a positive value was transferred, only messages with a sending date bigger than the transferred one will be returned',
  'method_messages.search_param_max_date_type_int' => 'If a positive value was transferred, only messages with a sending date smaller than the transferred one will be returned',
  'method_messages.search_param_offset_id_type_int' => 'Only return messages starting from the specified message ID',
  'method_messages.search_param_add_offset_type_int' => '[Additional offset](https://core.telegram.org/api/offsets)',
  'method_messages.search_param_limit_type_int' => '[Number of results to return](https://core.telegram.org/api/offsets)',
  'method_messages.search_param_max_id_type_int' => '[Maximum message ID to return](https://core.telegram.org/api/offsets)',
  'method_messages.search_param_min_id_type_int' => '[Minimum message ID to return](https://core.telegram.org/api/offsets)',
  'method_messages.readHistory' => 'Marks message history as read.',
  'method_messages.readHistory_param_peer_type_InputPeer' => 'Target user or group',
  'method_messages.readHistory_param_max_id_type_int' => 'If a positive value is passed, only messages with identifiers less or equal than the given one will be read',
  'method_messages.deleteHistory' => 'Deletes communication history.',
  'method_messages.deleteHistory_param_just_clear_type_true' => 'Just clear history for the current user, without actually removing messages for every chat user',
  'method_messages.deleteHistory_param_peer_type_InputPeer' => 'User or chat, communication history of which will be deleted',
  'method_messages.deleteHistory_param_max_id_type_int' => 'Maximum ID of message to delete',
  'method_messages.deleteMessages' => 'Deletes messages by their identifiers.',
  'method_messages.deleteMessages_param_revoke_type_true' => 'Whether to delete messages for all participants of the chat',
  'method_messages.deleteMessages_param_id_type_Vector t' => 'IDs of messages to delete, use channels->deleteMessages for supergroups',
  'method_messages.receivedMessages' => 'Confirms receipt of messages by a client, cancels PUSH-notification sending.',
  'method_messages.receivedMessages_param_max_id_type_int' => 'Maximum message ID available in a client.',
  'method_messages.setTyping' => 'Sends a current user typing event (see [SendMessageAction](../types/SendMessageAction.md) for all event types) to a conversation partner or group.',
  'method_messages.setTyping_param_peer_type_InputPeer' => 'Target user or group',
  'method_messages.setTyping_param_action_type_SendMessageAction' => 'Type of action<br>Parameter added in [Layer 17](https://core.telegram.org/api/layers#layer-17).',
  'method_messages.sendMessage' => 'Sends a message to a chat',
  'method_messages.sendMessage_param_no_webpage_type_true' => 'Set this flag to disable generation of the webpage preview',
  'method_messages.sendMessage_param_silent_type_true' => 'Send this message silently (no notifications for the receivers)',
  'method_messages.sendMessage_param_background_type_true' => 'Send this message as background message',
  'method_messages.sendMessage_param_clear_draft_type_true' => 'Clear the draft field',
  'method_messages.sendMessage_param_peer_type_InputPeer' => 'The destination where the message will be sent',
  'method_messages.sendMessage_param_reply_to_msg_id_type_int' => 'The message ID to which this message will reply to',
  'method_messages.sendMessage_param_message_type_string' => 'The message',
  'method_messages.sendMessage_param_reply_markup_type_ReplyMarkup' => 'Reply markup for sending bot buttons',
  'method_messages.sendMessage_param_entities_type_Vector t' => 'Entities to send (for styled text)',
  'method_messages.sendMedia' => 'Send a media',
  'method_messages.sendMedia_param_silent_type_true' => 'Send message silently (no notification should be triggered)',
  'method_messages.sendMedia_param_background_type_true' => 'Send message in background',
  'method_messages.sendMedia_param_clear_draft_type_true' => 'Clear the draft',
  'method_messages.sendMedia_param_peer_type_InputPeer' => 'Destination',
  'method_messages.sendMedia_param_reply_to_msg_id_type_int' => 'Message ID to which this message should reply to',
  'method_messages.sendMedia_param_media_type_InputMedia' => 'Attached media',
  'method_messages.sendMedia_param_message_type_string' => 'Caption',
  'method_messages.sendMedia_param_reply_markup_type_ReplyMarkup' => 'Reply markup for bot keyboards',
  'method_messages.sendMedia_param_entities_type_Vector t' => 'Entities for styled text',
  'method_messages.forwardMessages' => 'Forwards messages by their IDs.',
  'method_messages.forwardMessages_param_silent_type_true' => 'Whether to send messages silently (no notification will be triggered on the destination clients)',
  'method_messages.forwardMessages_param_background_type_true' => 'Whether to send the message in background',
  'method_messages.forwardMessages_param_with_my_score_type_true' => 'When forwarding games, whether to include your score in the game',
  'method_messages.forwardMessages_param_grouped_type_true' => 'Whether the specified messages represent an album (grouped media)',
  'method_messages.forwardMessages_param_from_peer_type_InputPeer' => 'Source of messages',
  'method_messages.forwardMessages_param_id_type_Vector t' => 'The message IDs',
  'method_messages.forwardMessages_param_to_peer_type_InputPeer' => 'Destination peer',
  'method_messages.reportSpam' => 'Report a new incoming chat for spam, if the [peer settings](../constructors/peerSettings.md) of the chat allow us to do that',
  'method_messages.reportSpam_param_peer_type_InputPeer' => 'Peer to report',
  'method_messages.hideReportSpam' => 'Hide report spam popup',
  'method_messages.hideReportSpam_param_peer_type_InputPeer' => 'Where to hide the popup',
  'method_messages.getPeerSettings' => 'Get peer settings',
  'method_messages.getPeerSettings_param_peer_type_InputPeer' => 'The peer',
  'method_messages.getChats' => 'Returns chat basic info on their IDs.',
  'method_messages.getChats_param_id_type_Vector t' => 'The MTProto IDs of chats to fetch info about',
  'method_messages.getFullChat' => 'You cannot use this method directly, use the getPwrChat, getInfo, getFullInfo methods instead (see https://docs.madelineproto.xyz for more info)',
  'method_messages.getFullChat_param_chat_id_type_InputPeer' => 'You cannot use this method directly, use the getPwrChat, getInfo, getFullInfo methods instead (see https://docs.madelineproto.xyz for more info)',
  'method_messages.editChatTitle' => 'Chanages chat name and sends a service message on it.',
  'method_messages.editChatTitle_param_chat_id_type_InputPeer' => 'The ID of the chat',
  'method_messages.editChatTitle_param_title_type_string' => 'New chat name, different from the old one',
  'method_messages.editChatPhoto' => 'Changes chat photo and sends a service message on it',
  'method_messages.editChatPhoto_param_chat_id_type_InputPeer' => 'The ID of the chat',
  'method_messages.editChatPhoto_param_photo_type_InputChatPhoto' => 'Photo to be set',
  'method_messages.addChatUser' => 'Adds a user to a chat and sends a service message on it.',
  'method_messages.addChatUser_param_chat_id_type_InputPeer' => 'The chat where to invite users',
  'method_messages.addChatUser_param_user_id_type_InputUser' => 'User ID to be added',
  'method_messages.addChatUser_param_fwd_limit_type_int' => 'Number of last messages to be forwarded',
  'method_messages.deleteChatUser' => 'Deletes a user from a chat and sends a service message on it.',
  'method_messages.deleteChatUser_param_chat_id_type_InputPeer' => 'The ID of the chat',
  'method_messages.deleteChatUser_param_user_id_type_InputUser' => 'User ID to be deleted',
  'method_messages.createChat' => 'Creates a new chat.',
  'method_messages.createChat_param_users_type_Vector t' => 'The users to add to the chat',
  'method_messages.createChat_param_title_type_string' => 'Chat name',
  'method_messages.getDhConfig' => 'You cannot use this method directly, instead use $MadelineProto->getDhConfig();',
  'method_messages.getDhConfig_param_version_type_int' => 'You cannot use this method directly, instead use $MadelineProto->getDhConfig();',
  'method_messages.getDhConfig_param_random_length_type_int' => 'You cannot use this method directly, instead use $MadelineProto->getDhConfig();',
  'method_messages.requestEncryption' => 'You cannot use this method directly, see https://docs.madelineproto.xyz for more info on handling secret chats',
  'method_messages.requestEncryption_param_user_id_type_InputUser' => 'You cannot use this method directly, see https://docs.madelineproto.xyz for more info on handling secret chats',
  'method_messages.requestEncryption_param_g_a_type_bytes' => 'You cannot use this method directly, see https://docs.madelineproto.xyz for more info on handling secret chats',
  'method_messages.acceptEncryption' => 'You cannot use this method directly, see https://docs.madelineproto.xyz for more info on handling secret chats',
  'method_messages.acceptEncryption_param_peer_type_InputEncryptedChat' => 'You cannot use this method directly, see https://docs.madelineproto.xyz for more info on handling secret chats',
  'method_messages.acceptEncryption_param_g_b_type_bytes' => 'You cannot use this method directly, see https://docs.madelineproto.xyz for more info on handling secret chats',
  'method_messages.acceptEncryption_param_key_fingerprint_type_long' => 'You cannot use this method directly, see https://docs.madelineproto.xyz for more info on handling secret chats',
  'method_messages.discardEncryption' => 'You cannot use this method directly, see https://docs.madelineproto.xyz for more info on handling secret chats',
  'method_messages.discardEncryption_param_chat_id_type_int' => 'You cannot use this method directly, see https://docs.madelineproto.xyz for more info on handling secret chats',
  'method_messages.setEncryptedTyping' => 'Send typing event by the current user to a secret chat.',
  'method_messages.setEncryptedTyping_param_peer_type_InputEncryptedChat' => 'Secret chat ID',
  'method_messages.setEncryptedTyping_param_typing_type_Bool' => 'Typing.<br>**Possible values**:<br>[(boolTrue)](../constructors/boolTrue.md), if the user started typing and more than **5 seconds** have passed since the last request<br>[(boolFalse)](../constructors/boolFalse.md), if the user stopped typing',
  'method_messages.readEncryptedHistory' => 'Marks message history within a secret chat as read.',
  'method_messages.readEncryptedHistory_param_peer_type_InputEncryptedChat' => 'Secret chat ID',
  'method_messages.readEncryptedHistory_param_max_date_type_int' => 'Maximum date value for received messages in history',
  'method_messages.sendEncrypted' => 'Sends a text message to a secret chat.',
  'method_messages.sendEncrypted_param_peer_type_InputEncryptedChat' => 'Secret chat ID',
  'method_messages.sendEncrypted_param_message_type_DecryptedMessage' => 'The message to send',
  'method_messages.sendEncryptedFile' => 'Sends a message with a file attachment to a secret chat',
  'method_messages.sendEncryptedFile_param_peer_type_InputEncryptedChat' => 'Secret chat ID',
  'method_messages.sendEncryptedFile_param_message_type_DecryptedMessage' => 'The message with the file',
  'method_messages.sendEncryptedFile_param_file_type_InputEncryptedFile' => 'File attachment for the secret chat',
  'method_messages.sendEncryptedService' => 'Sends a service message to a secret chat.',
  'method_messages.sendEncryptedService_param_peer_type_InputEncryptedChat' => 'Secret chat ID',
  'method_messages.sendEncryptedService_param_message_type_DecryptedMessage' => 'The service message',
  'method_messages.receivedQueue' => 'You cannot use this method directly',
  'method_messages.receivedQueue_param_max_qts_type_int' => 'You cannot use this method directly',
  'method_messages.reportEncryptedSpam' => 'Report a secret chat for spam',
  'method_messages.reportEncryptedSpam_param_peer_type_InputEncryptedChat' => 'The secret chat to report',
  'method_messages.readMessageContents' => 'Notifies the sender about the recipient having listened a voice message or watched a video.',
  'method_messages.readMessageContents_param_id_type_Vector t' => 'The messages to mark as read (only users and normal chats, not supergroups)',
  'method_messages.getStickers' => 'Get stickers by emoji',
  'method_messages.getStickers_param_emoticon_type_string' => 'The emoji',
  'method_messages.getStickers_param_hash_type_string' => 'Previously fetched sticker IDs',
  'method_messages.getAllStickers' => 'Get all installed stickers',
  'method_messages.getAllStickers_param_hash_type_int' => '[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)',
  'method_messages.getWebPagePreview' => 'Get preview of webpage',
  'method_messages.getWebPagePreview_param_message_type_string' => 'Message from which to extract the preview',
  'method_messages.getWebPagePreview_param_entities_type_Vector t' => 'Entities for styled text',
  'method_messages.exportChatInvite' => 'Export an invite link for a chat',
  'method_messages.exportChatInvite_param_chat_id_type_InputPeer' => 'The chat id ',
  'method_messages.checkChatInvite' => 'Check the validity of a chat invite link and get basic info about it',
  'method_messages.checkChatInvite_param_hash_type_string' => 'Invite hash in `t.me/joinchat/hash`',
  'method_messages.importChatInvite' => 'Import a chat invite and join a private chat/supergroup/channel',
  'method_messages.importChatInvite_param_hash_type_string' => '`hash` from `t.me/joinchat/hash`',
  'method_messages.getStickerSet' => 'Get info about a stickerset',
  'method_messages.getStickerSet_param_stickerset_type_InputStickerSet' => 'Stickerset',
  'method_messages.installStickerSet' => 'Install a stickerset',
  'method_messages.installStickerSet_param_stickerset_type_InputStickerSet' => 'Stickerset to install',
  'method_messages.installStickerSet_param_archived_type_Bool' => 'Whether to archive stickerset',
  'method_messages.uninstallStickerSet' => 'Uninstall a stickerset',
  'method_messages.uninstallStickerSet_param_stickerset_type_InputStickerSet' => 'The stickerset to uninstall',
  'method_messages.startBot' => 'Start a conversation with a bot using a [deep linking parameter](https://core.telegram.org/bots#deep-linking)',
  'method_messages.startBot_param_bot_type_InputUser' => 'The bot',
  'method_messages.startBot_param_peer_type_InputPeer' => 'The chat where to start the bot, can be the bot\'s private chat or a group',
  'method_messages.startBot_param_start_param_type_string' => '[Deep linking parameter](https://core.telegram.org/bots#deep-linking)',
  'method_messages.getMessagesViews' => 'Get and increase the view counter of a message sent or forwarded from a [channel](https://core.telegram.org/api/channel)',
  'method_messages.getMessagesViews_param_peer_type_InputPeer' => 'Peer where the message was found',
  'method_messages.getMessagesViews_param_id_type_Vector t' => 'The IDs messages to get',
  'method_messages.getMessagesViews_param_increment_type_Bool' => 'Whether to mark the message as viewed and increment the view counter',
  'method_messages.toggleChatAdmins' => 'Enable all users are admins in normal groups (not supergroups)',
  'method_messages.toggleChatAdmins_param_chat_id_type_InputPeer' => 'Group ID',
  'method_messages.toggleChatAdmins_param_enabled_type_Bool' => 'Enable all users are admins',
  'method_messages.editChatAdmin' => 'Make a user admin in a [legacy group](https://core.telegram.org/api/channel).',
  'method_messages.editChatAdmin_param_chat_id_type_InputPeer' => 'The chat ID (no supergroups)',
  'method_messages.editChatAdmin_param_user_id_type_InputUser' => 'The user to make admin',
  'method_messages.editChatAdmin_param_is_admin_type_Bool' => 'Whether to make him admin',
  'method_messages.migrateChat' => 'Turn a [legacy group into a supergroup](https://core.telegram.org/api/channel)',
  'method_messages.migrateChat_param_chat_id_type_InputPeer' => 'The chat to convert',
  'method_messages.searchGlobal' => 'Search for messages and peers globally',
  'method_messages.searchGlobal_param_q_type_string' => 'Query',
  'method_messages.searchGlobal_param_offset_date_type_int' => '0 or the date offset',
  'method_messages.searchGlobal_param_offset_peer_type_InputPeer' => '[Offsets for pagination, for more info click here](https://core.telegram.org/api/offsets)',
  'method_messages.searchGlobal_param_offset_id_type_int' => '[Offsets for pagination, for more info click here](https://core.telegram.org/api/offsets)',
  'method_messages.searchGlobal_param_limit_type_int' => '[Offsets for pagination, for more info click here](https://core.telegram.org/api/offsets)',
  'method_messages.reorderStickerSets' => 'Reorder installed stickersets',
  'method_messages.reorderStickerSets_param_masks_type_true' => 'Reorder mask stickersets',
  'method_messages.reorderStickerSets_param_order_type_Vector t' => 'The order',
  'method_messages.getDocumentByHash' => 'Get a document by its SHA256 hash, mainly used for gifs',
  'method_messages.getDocumentByHash_param_sha256_type_bytes' => 'SHA256 of file',
  'method_messages.getDocumentByHash_param_size_type_int' => 'Size of the file in bytes',
  'method_messages.getDocumentByHash_param_mime_type_type_string' => 'Mime type',
  'method_messages.searchGifs' => 'Search for GIFs',
  'method_messages.searchGifs_param_q_type_string' => 'Text query',
  'method_messages.searchGifs_param_offset_type_int' => 'Offset for [pagination »](https://core.telegram.org/api/offsets)',
  'method_messages.getSavedGifs' => 'Get saved GIFs',
  'method_messages.getSavedGifs_param_hash_type_int' => '[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)',
  'method_messages.saveGif' => 'Add GIF to saved gifs list',
  'method_messages.saveGif_param_id_type_InputDocument' => 'GIF to save',
  'method_messages.saveGif_param_unsave_type_Bool' => 'Whether to remove GIF from saved gifs list',
  'method_messages.getInlineBotResults' => 'Query an inline bot',
  'method_messages.getInlineBotResults_param_bot_type_InputUser' => 'The bot to query',
  'method_messages.getInlineBotResults_param_peer_type_InputPeer' => 'The currently opened chat',
  'method_messages.getInlineBotResults_param_geo_point_type_InputGeoPoint' => 'The geolocation, if requested',
  'method_messages.getInlineBotResults_param_query_type_string' => 'The query',
  'method_messages.getInlineBotResults_param_offset_type_string' => 'The offset within the results, will be passed directly as-is to the bot.',
  'method_messages.setInlineBotResults' => 'Answer an inline query, for bots only',
  'method_messages.setInlineBotResults_param_gallery_type_true' => 'Set this flag if the results are composed of media files',
  'method_messages.setInlineBotResults_param_private_type_true' => 'Set this flag if results may be cached on the server side only for the user that sent the query. By default, results may be returned to any user who sends the same query',
  'method_messages.setInlineBotResults_param_query_id_type_long' => 'Unique identifier for the answered query',
  'method_messages.setInlineBotResults_param_results_type_Vector t' => 'Results',
  'method_messages.setInlineBotResults_param_cache_time_type_int' => 'The maximum amount of time in seconds that the result of the inline query may be cached on the server. Defaults to 300.',
  'method_messages.setInlineBotResults_param_next_offset_type_string' => 'Pass the offset that a client should send in the next query with the same text to receive more results. Pass an empty string if there are no more results or if you don‘t support pagination. Offset length can’t exceed 64 bytes.',
  'method_messages.setInlineBotResults_param_switch_pm_type_InlineBotSwitchPM' => 'If passed, clients will display a button with specified text that switches the user to a private chat with the bot and sends the bot a start message with a certain parameter.',
  'method_messages.sendInlineBotResult' => 'Send a result obtained using [messages.getInlineBotResults](../methods/messages.getInlineBotResults.md).',
  'method_messages.sendInlineBotResult_param_silent_type_true' => 'Whether to send the message silently (no notification will be triggered on the other client)',
  'method_messages.sendInlineBotResult_param_background_type_true' => 'Whether to send the message in background',
  'method_messages.sendInlineBotResult_param_clear_draft_type_true' => 'Whether to clear the [draft](https://core.telegram.org/api/drafts)',
  'method_messages.sendInlineBotResult_param_peer_type_InputPeer' => 'Destination',
  'method_messages.sendInlineBotResult_param_reply_to_msg_id_type_int' => 'ID of the message this message should reply to',
  'method_messages.sendInlineBotResult_param_query_id_type_long' => 'Query ID from [messages.getInlineBotResults](../methods/messages.getInlineBotResults.md)',
  'method_messages.sendInlineBotResult_param_id_type_string' => 'Result ID from [messages.getInlineBotResults](../methods/messages.getInlineBotResults.md)',
  'method_messages.getMessageEditData' => 'Find out if a media message\'s caption can be edited',
  'method_messages.getMessageEditData_param_peer_type_InputPeer' => 'Peer where the media was sent',
  'method_messages.getMessageEditData_param_id_type_int' => 'ID of message',
  'method_messages.editMessage' => 'Edit message',
  'method_messages.editMessage_param_no_webpage_type_true' => 'Disable webpage preview',
  'method_messages.editMessage_param_stop_geo_live_type_true' => 'Stop live location',
  'method_messages.editMessage_param_peer_type_InputPeer' => 'Where was the message sent',
  'method_messages.editMessage_param_id_type_int' => 'ID of the message to edit',
  'method_messages.editMessage_param_message_type_string' => 'New message',
  'method_messages.editMessage_param_reply_markup_type_ReplyMarkup' => 'Reply markup for inline keyboards',
  'method_messages.editMessage_param_entities_type_Vector t' => 'The new entities (for styled text)',
  'method_messages.editMessage_param_geo_point_type_InputGeoPoint' => 'The new location',
  'method_messages.editInlineBotMessage' => 'Edit an inline bot message',
  'method_messages.editInlineBotMessage_param_no_webpage_type_true' => 'Disable webpage preview',
  'method_messages.editInlineBotMessage_param_stop_geo_live_type_true' => 'Stop live location',
  'method_messages.editInlineBotMessage_param_id_type_InputBotInlineMessageID' => 'Sent inline message ID',
  'method_messages.editInlineBotMessage_param_message_type_string' => 'Message',
  'method_messages.editInlineBotMessage_param_reply_markup_type_ReplyMarkup' => 'Reply markup for inline keyboards',
  'method_messages.editInlineBotMessage_param_entities_type_Vector t' => 'The new entities (for styled text)',
  'method_messages.editInlineBotMessage_param_geo_point_type_InputGeoPoint' => 'The new location',
  'method_messages.getBotCallbackAnswer' => 'Press an inline callback button and get a callback answer from the bot',
  'method_messages.getBotCallbackAnswer_param_game_type_true' => 'Whether this is a "play game" button',
  'method_messages.getBotCallbackAnswer_param_peer_type_InputPeer' => 'Where was the inline keyboard sent',
  'method_messages.getBotCallbackAnswer_param_msg_id_type_int' => 'ID of the Message with the inline keyboard',
  'method_messages.getBotCallbackAnswer_param_data_type_bytes' => 'Callback data',
  'method_messages.setBotCallbackAnswer' => 'Set the callback answer to a user button press (bots only)',
  'method_messages.setBotCallbackAnswer_param_alert_type_true' => 'Whether to show the message as a popup instead of a toast notification',
  'method_messages.setBotCallbackAnswer_param_query_id_type_long' => 'Query ID',
  'method_messages.setBotCallbackAnswer_param_message_type_string' => 'Popup to show',
  'method_messages.setBotCallbackAnswer_param_url_type_string' => 'URL to open',
  'method_messages.setBotCallbackAnswer_param_cache_time_type_int' => 'Cache validity',
  'method_messages.getPeerDialogs' => 'Get dialog info of specified peers',
  'method_messages.getPeerDialogs_param_peers_type_Vector t' => 'The peers',
  'method_messages.saveDraft' => 'Save a message [draft](https://core.telegram.org/api/drafts) associated to a chat.',
  'method_messages.saveDraft_param_no_webpage_type_true' => 'Disable generation of the webpage preview',
  'method_messages.saveDraft_param_reply_to_msg_id_type_int' => 'Message ID the message should reply to',
  'method_messages.saveDraft_param_peer_type_InputPeer' => 'Destination of the message that should be sent',
  'method_messages.saveDraft_param_message_type_string' => 'The draft',
  'method_messages.saveDraft_param_entities_type_Vector t' => 'The entities (for styled text)',
  'method_messages.getAllDrafts' => 'Save get all message [drafts](https://core.telegram.org/api/drafts).',
  'method_messages.getFeaturedStickers' => 'Get featured stickers',
  'method_messages.getFeaturedStickers_param_hash_type_int' => '[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)',
  'method_messages.readFeaturedStickers' => 'Mark new featured stickers as read',
  'method_messages.readFeaturedStickers_param_id_type_Vector t' => 'The stickers to mark as read',
  'method_messages.getRecentStickers' => 'Get recent stickers',
  'method_messages.getRecentStickers_param_attached_type_true' => 'Get stickers recently attached to photo or video files',
  'method_messages.getRecentStickers_param_hash_type_int' => '[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)',
  'method_messages.saveRecentSticker' => 'Add/remove sticker from recent stickers list',
  'method_messages.saveRecentSticker_param_attached_type_true' => 'Whether to add/remove stickers recently attached to photo or video files',
  'method_messages.saveRecentSticker_param_id_type_InputDocument' => 'Sticker',
  'method_messages.saveRecentSticker_param_unsave_type_Bool' => 'Whether to save or unsave the sticker',
  'method_messages.clearRecentStickers' => 'Clear recent stickers',
  'method_messages.clearRecentStickers_param_attached_type_true' => 'Set this flag to clear the list of stickers recently attached to photo or video files',
  'method_messages.getArchivedStickers' => 'Get all archived stickers',
  'method_messages.getArchivedStickers_param_masks_type_true' => 'Get mask stickers',
  'method_messages.getArchivedStickers_param_offset_id_type_long' => '[Offsets for pagination, for more info click here](https://core.telegram.org/api/offsets)',
  'method_messages.getArchivedStickers_param_limit_type_int' => 'Maximum number of results to return, [see pagination](https://core.telegram.org/api/offsets)',
  'method_messages.getMaskStickers' => 'Get installed mask stickers',
  'method_messages.getMaskStickers_param_hash_type_int' => '[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)',
  'method_messages.getAttachedStickers' => 'Get stickers attached to a photo or video',
  'method_messages.getAttachedStickers_param_media_type_InputStickeredMedia' => 'Stickered media',
  'method_messages.setGameScore' => 'Use this method to set the score of the specified user in a game sent as a normal message (bots only).',
  'method_messages.setGameScore_param_edit_message_type_true' => 'Set this flag if the game message should be automatically edited to include the current scoreboard',
  'method_messages.setGameScore_param_force_type_true' => 'Set this flag if the high score is allowed to decrease. This can be useful when fixing mistakes or banning cheaters',
  'method_messages.setGameScore_param_peer_type_InputPeer' => 'Unique identifier of target chat',
  'method_messages.setGameScore_param_id_type_int' => 'Identifier of the sent message',
  'method_messages.setGameScore_param_user_id_type_InputUser' => 'User identifier',
  'method_messages.setGameScore_param_score_type_int' => 'New score',
  'method_messages.setInlineGameScore' => 'Use this method to set the score of the specified user in a game sent as an inline message (bots only).',
  'method_messages.setInlineGameScore_param_edit_message_type_true' => 'Set this flag if the game message should be automatically edited to include the current scoreboard',
  'method_messages.setInlineGameScore_param_force_type_true' => 'Set this flag if the high score is allowed to decrease. This can be useful when fixing mistakes or banning cheaters',
  'method_messages.setInlineGameScore_param_id_type_InputBotInlineMessageID' => 'ID of the inline message',
  'method_messages.setInlineGameScore_param_user_id_type_InputUser' => 'User identifier',
  'method_messages.setInlineGameScore_param_score_type_int' => 'New score',
  'method_messages.getGameHighScores' => 'Get highscores of a game',
  'method_messages.getGameHighScores_param_peer_type_InputPeer' => 'Where was the game sent',
  'method_messages.getGameHighScores_param_id_type_int' => 'ID of message with game media attachment',
  'method_messages.getGameHighScores_param_user_id_type_InputUser' => 'Get high scores made by a certain user',
  'method_messages.getInlineGameHighScores' => 'Get highscores of a game sent using an inline bot',
  'method_messages.getInlineGameHighScores_param_id_type_InputBotInlineMessageID' => 'ID of inline message',
  'method_messages.getInlineGameHighScores_param_user_id_type_InputUser' => 'Get high scores of a certain user',
  'method_messages.getCommonChats' => 'Get chats in common with a user',
  'method_messages.getCommonChats_param_user_id_type_InputUser' => 'User ID',
  'method_messages.getCommonChats_param_max_id_type_int' => 'Maximum ID of chat to return (see [pagination](https://core.telegram.org/api/offsets))',
  'method_messages.getCommonChats_param_limit_type_int' => 'Maximum number of results to return, [see pagination](https://core.telegram.org/api/offsets)',
  'method_messages.getAllChats' => 'Get all chats, channels and supergroups',
  'method_messages.getAllChats_param_except_ids_type_Vector t' => 'Do not fetch these chats (MTProto id)',
  'method_messages.getWebPage' => 'Get [instant view](https://instantview.telegram.org) page',
  'method_messages.getWebPage_param_url_type_string' => 'URL of IV page to fetch',
  'method_messages.getWebPage_param_hash_type_int' => '[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)',
  'method_messages.toggleDialogPin' => 'Pin/unpin a dialog',
  'method_messages.toggleDialogPin_param_pinned_type_true' => 'Whether to pin or unpin the dialog',
  'method_messages.toggleDialogPin_param_peer_type_InputPeer' => 'The peer to pin',
  'method_messages.reorderPinnedDialogs' => 'Reorder pinned dialogs',
  'method_messages.reorderPinnedDialogs_param_force_type_true' => 'If set, dialogs pinned server-side but not present in the `order` field will be unpinned.',
  'method_messages.reorderPinnedDialogs_param_order_type_Vector t' => 'New order',
  'method_messages.getPinnedDialogs' => 'Get pinned dialogs',
  'method_messages.setBotShippingResults' => 'If you sent an invoice requesting a shipping address and the parameter is\\_flexible was specified, the bot will receive an [updateBotShippingQuery](../constructors/updateBotShippingQuery.md) update. Use this method to reply to shipping queries.',
  'method_messages.setBotShippingResults_param_query_id_type_long' => 'Unique identifier for the query to be answered',
  'method_messages.setBotShippingResults_param_error_type_string' => 'Error message in human readable form that explains why it is impossible to complete the order (e.g. "Sorry, delivery to your desired address is unavailable\'). Telegram will display this message to the user.',
  'method_messages.setBotShippingResults_param_shipping_options_type_Vector t' => 'Shipping options',
  'method_messages.setBotPrecheckoutResults' => 'Once the user has confirmed their payment and shipping details, the bot receives an [updateBotPrecheckoutQuery](../constructors/updateBotPrecheckoutQuery.md) update.  
Use this method to respond to such pre-checkout queries.  
**Note**: Telegram must receive an answer within 10 seconds after the pre-checkout query was sent.',
  'method_messages.setBotPrecheckoutResults_param_success_type_true' => 'Set this flag if everything is alright (goods are available, etc.) and the bot is ready to proceed with the order, otherwise do not set it, and set the `error` field, instead',
  'method_messages.setBotPrecheckoutResults_param_query_id_type_long' => 'Unique identifier for the query to be answered',
  'method_messages.setBotPrecheckoutResults_param_error_type_string' => 'Required if the `success` isn\'t set. Error message in human readable form that explains the reason for failure to proceed with the checkout (e.g. "Sorry, somebody just bought the last of our amazing black T-shirts while you were busy filling out your payment details. Please choose a different color or garment!"). Telegram will display this message to the user.',
  'method_messages.uploadMedia' => 'Upload a file and associate it to a chat (without actually sending it to the chat)',
  'method_messages.uploadMedia_param_peer_type_InputPeer' => 'The chat, can be an [inputPeerEmpty](../constructors/inputPeerEmpty.md) for bots',
  'method_messages.uploadMedia_param_media_type_InputMedia' => 'File uploaded in chunks as described in [files »](https://core.telegram.org/api/files)',
  'method_messages.sendScreenshotNotification' => 'Notify the other user in a private chat that a screenshot of the chat was taken',
  'method_messages.sendScreenshotNotification_param_peer_type_InputPeer' => 'Other user',
  'method_messages.sendScreenshotNotification_param_reply_to_msg_id_type_int' => 'ID of message that was screenshotted, can be 0',
  'method_messages.getFavedStickers' => 'Get faved stickers',
  'method_messages.getFavedStickers_param_hash_type_int' => '[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)',
  'method_messages.faveSticker' => 'Mark a sticker as favorite',
  'method_messages.faveSticker_param_id_type_InputDocument' => 'Sticker to mark as favorite',
  'method_messages.faveSticker_param_unfave_type_Bool' => 'Unfavorite',
  'method_messages.getUnreadMentions' => 'Get unread messages where we were mentioned',
  'method_messages.getUnreadMentions_param_peer_type_InputPeer' => 'Peer where to look for mentions',
  'method_messages.getUnreadMentions_param_offset_id_type_int' => '[Offsets for pagination, for more info click here](https://core.telegram.org/api/offsets)',
  'method_messages.getUnreadMentions_param_add_offset_type_int' => '[Offsets for pagination, for more info click here](https://core.telegram.org/api/offsets)',
  'method_messages.getUnreadMentions_param_limit_type_int' => 'Maximum number of results to return, [see pagination](https://core.telegram.org/api/offsets)',
  'method_messages.getUnreadMentions_param_max_id_type_int' => 'Maximum message ID to return, [see pagination](https://core.telegram.org/api/offsets)',
  'method_messages.getUnreadMentions_param_min_id_type_int' => 'Minimum message ID to return, [see pagination](https://core.telegram.org/api/offsets)',
  'method_messages.readMentions' => 'Mark mentions as read',
  'method_messages.readMentions_param_peer_type_InputPeer' => 'Dialog',
  'method_messages.getRecentLocations' => 'Get live location history of a certain user',
  'method_messages.getRecentLocations_param_peer_type_InputPeer' => 'User',
  'method_messages.getRecentLocations_param_limit_type_int' => 'Maximum number of results to return, [see pagination](https://core.telegram.org/api/offsets)',
  'method_messages.sendMultiMedia' => 'Send an album of media',
  'method_messages.sendMultiMedia_param_silent_type_true' => 'Whether to send the album silently (no notification triggered)',
  'method_messages.sendMultiMedia_param_background_type_true' => 'Send in background?',
  'method_messages.sendMultiMedia_param_clear_draft_type_true' => 'Whether to clear [drafts](https://core.telegram.org/api/drafts)',
  'method_messages.sendMultiMedia_param_peer_type_InputPeer' => 'The destination chat',
  'method_messages.sendMultiMedia_param_reply_to_msg_id_type_int' => 'The message to reply to',
  'method_messages.sendMultiMedia_param_multi_media_type_Vector t' => 'The album',
  'method_messages.uploadEncryptedFile' => 'Upload encrypted file and associate it to a secret chat',
  'method_messages.uploadEncryptedFile_param_peer_type_InputEncryptedChat' => 'The secret chat to associate the file to',
  'method_messages.uploadEncryptedFile_param_file_type_InputEncryptedFile' => 'The file',
  'method_updates.getState' => 'You cannot use this method directly, see https://docs.madelineproto.xyz for more info on handling updates',
  'method_updates.getDifference' => 'You cannot use this method directly, see https://docs.madelineproto.xyz for more info on handling updates',
  'method_updates.getDifference_param_pts_type_int' => 'You cannot use this method directly, see https://docs.madelineproto.xyz for more info on handling updates',
  'method_updates.getDifference_param_pts_total_limit_type_int' => 'You cannot use this method directly, see https://docs.madelineproto.xyz for more info on handling updates',
  'method_updates.getDifference_param_date_type_int' => 'You cannot use this method directly, see https://docs.madelineproto.xyz for more info on handling updates',
  'method_updates.getDifference_param_qts_type_int' => 'You cannot use this method directly, see https://docs.madelineproto.xyz for more info on handling updates',
  'method_updates.getChannelDifference' => 'You cannot use this method directly, see https://docs.madelineproto.xyz for more info on handling updates',
  'method_updates.getChannelDifference_param_force_type_true' => 'You cannot use this method directly, see https://docs.madelineproto.xyz for more info on handling updates',
  'method_updates.getChannelDifference_param_channel_type_InputChannel' => 'You cannot use this method directly, see https://docs.madelineproto.xyz for more info on handling updates',
  'method_updates.getChannelDifference_param_filter_type_ChannelMessagesFilter' => 'You cannot use this method directly, see https://docs.madelineproto.xyz for more info on handling updates',
  'method_updates.getChannelDifference_param_pts_type_int' => 'You cannot use this method directly, see https://docs.madelineproto.xyz for more info on handling updates',
  'method_updates.getChannelDifference_param_limit_type_int' => 'You cannot use this method directly, see https://docs.madelineproto.xyz for more info on handling updates',
  'method_photos.updateProfilePhoto' => 'Installs a previously uploaded photo as a profile photo.',
  'method_photos.updateProfilePhoto_param_id_type_InputPhoto' => 'Input photo',
  'method_photos.uploadProfilePhoto' => 'Updates current user profile photo.',
  'method_photos.uploadProfilePhoto_param_file_type_InputFile' => 'File saved in parts by means of [upload.saveFilePart](../methods/upload.saveFilePart.md) method',
  'method_photos.deletePhotos' => 'Deletes profile photos.',
  'method_photos.deletePhotos_param_id_type_Vector t' => 'The profile photos to delete',
  'method_photos.getUserPhotos' => 'Returns the list of user photos.',
  'method_photos.getUserPhotos_param_user_id_type_InputUser' => 'User ID',
  'method_photos.getUserPhotos_param_offset_type_int' => 'Number of list elements to be skipped',
  'method_photos.getUserPhotos_param_max_id_type_long' => 'If a positive value was transferred, the method will return only photos with IDs less than the set one',
  'method_photos.getUserPhotos_param_limit_type_int' => 'Number of list elements to be returned',
  'method_upload.saveFilePart' => 'You cannot use this method directly, use the upload, downloadToStream, downloadToFile, downloadToDir methods instead; see https://docs.madelineproto.xyz for more info',
  'method_upload.saveFilePart_param_file_id_type_long' => 'You cannot use this method directly, use the upload, downloadToStream, downloadToFile, downloadToDir methods instead; see https://docs.madelineproto.xyz for more info',
  'method_upload.saveFilePart_param_file_part_type_int' => 'You cannot use this method directly, use the upload, downloadToStream, downloadToFile, downloadToDir methods instead; see https://docs.madelineproto.xyz for more info',
  'method_upload.saveFilePart_param_bytes_type_bytes' => 'You cannot use this method directly, use the upload, downloadToStream, downloadToFile, downloadToDir methods instead; see https://docs.madelineproto.xyz for more info',
  'method_upload.getFile' => 'You cannot use this method directly, use the upload, downloadToStream, downloadToFile, downloadToDir methods instead; see https://docs.madelineproto.xyz for more info',
  'method_upload.getFile_param_location_type_InputFileLocation' => 'You cannot use this method directly, use the upload, downloadToStream, downloadToFile, downloadToDir methods instead; see https://docs.madelineproto.xyz for more info',
  'method_upload.getFile_param_offset_type_int' => 'You cannot use this method directly, use the upload, downloadToStream, downloadToFile, downloadToDir methods instead; see https://docs.madelineproto.xyz for more info',
  'method_upload.getFile_param_limit_type_int' => 'You cannot use this method directly, use the upload, downloadToStream, downloadToFile, downloadToDir methods instead; see https://docs.madelineproto.xyz for more info',
  'method_upload.saveBigFilePart' => 'You cannot use this method directly, use the upload, downloadToStream, downloadToFile, downloadToDir methods instead; see https://docs.madelineproto.xyz for more info',
  'method_upload.saveBigFilePart_param_file_id_type_long' => 'You cannot use this method directly, use the upload, downloadToStream, downloadToFile, downloadToDir methods instead; see https://docs.madelineproto.xyz for more info',
  'method_upload.saveBigFilePart_param_file_part_type_int' => 'You cannot use this method directly, use the upload, downloadToStream, downloadToFile, downloadToDir methods instead; see https://docs.madelineproto.xyz for more info',
  'method_upload.saveBigFilePart_param_file_total_parts_type_int' => 'You cannot use this method directly, use the upload, downloadToStream, downloadToFile, downloadToDir methods instead; see https://docs.madelineproto.xyz for more info',
  'method_upload.saveBigFilePart_param_bytes_type_bytes' => 'You cannot use this method directly, use the upload, downloadToStream, downloadToFile, downloadToDir methods instead; see https://docs.madelineproto.xyz for more info',
  'method_upload.getWebFile' => 'Returns content of an HTTP file or a part, by proxying the request through telegram.',
  'method_upload.getWebFile_param_location_type_InputWebFileLocation' => 'The file to download',
  'method_upload.getWebFile_param_offset_type_int' => 'Number of bytes to be skipped',
  'method_upload.getWebFile_param_limit_type_int' => 'Number of bytes to be returned',
  'method_upload.getCdnFile' => 'You cannot use this method directly, use the upload, downloadToStream, downloadToFile, downloadToDir methods instead; see https://docs.madelineproto.xyz for more info',
  'method_upload.getCdnFile_param_file_token_type_bytes' => 'You cannot use this method directly, use the upload, downloadToStream, downloadToFile, downloadToDir methods instead; see https://docs.madelineproto.xyz for more info',
  'method_upload.getCdnFile_param_offset_type_int' => 'You cannot use this method directly, use the upload, downloadToStream, downloadToFile, downloadToDir methods instead; see https://docs.madelineproto.xyz for more info',
  'method_upload.getCdnFile_param_limit_type_int' => 'You cannot use this method directly, use the upload, downloadToStream, downloadToFile, downloadToDir methods instead; see https://docs.madelineproto.xyz for more info',
  'method_upload.reuploadCdnFile' => 'You cannot use this method directly, use the upload, downloadToStream, downloadToFile, downloadToDir methods instead; see https://docs.madelineproto.xyz for more info',
  'method_upload.reuploadCdnFile_param_file_token_type_bytes' => 'You cannot use this method directly, use the upload, downloadToStream, downloadToFile, downloadToDir methods instead; see https://docs.madelineproto.xyz for more info',
  'method_upload.reuploadCdnFile_param_request_token_type_bytes' => 'You cannot use this method directly, use the upload, downloadToStream, downloadToFile, downloadToDir methods instead; see https://docs.madelineproto.xyz for more info',
  'method_upload.getCdnFileHashes' => 'You cannot use this method directly, use the upload, downloadToStream, downloadToFile, downloadToDir methods instead; see https://docs.madelineproto.xyz for more info',
  'method_upload.getCdnFileHashes_param_file_token_type_bytes' => 'You cannot use this method directly, use the upload, downloadToStream, downloadToFile, downloadToDir methods instead; see https://docs.madelineproto.xyz for more info',
  'method_upload.getCdnFileHashes_param_offset_type_int' => 'You cannot use this method directly, use the upload, downloadToStream, downloadToFile, downloadToDir methods instead; see https://docs.madelineproto.xyz for more info',
  'method_help.getConfig' => 'Returns current configuration, icluding data center configuration.',
  'method_help.getNearestDc' => 'Returns info on data centre nearest to the user.',
  'method_help.getAppUpdate' => 'Returns information on update availability for the current application.',
  'method_help.saveAppLog' => 'Saves logs of application on the server.',
  'method_help.saveAppLog_param_events_type_Vector t' => 'Event list',
  'method_help.getInviteText' => 'Returns text of a text message with an invitation.',
  'method_help.getSupport' => 'Returns the support user for the \'ask a question\' feature.',
  'method_help.getAppChangelog' => 'Get changelog of current app',
  'method_help.getAppChangelog_param_prev_app_version_type_string' => 'Previous app version',
  'method_help.getTermsOfService' => 'Get terms of service',
  'method_help.setBotUpdatesStatus' => 'Informs the server about the number of pending bot updates if they haven\'t been processed for a long time; for bots only',
  'method_help.setBotUpdatesStatus_param_pending_updates_count_type_int' => 'Number of pending updates',
  'method_help.setBotUpdatesStatus_param_message_type_string' => 'Error message, if present',
  'method_help.getCdnConfig' => 'Get configuration for [CDN](https://core.telegram.org/cdn) file downloads.',
  'method_help.getRecentMeUrls' => 'Get recently used `t.me` links',
  'method_help.getRecentMeUrls_param_referer_type_string' => 'Referer',
  'method_channels.readHistory' => 'Mark [channel/supergroup](https://core.telegram.org/api/channel) history as read',
  'method_channels.readHistory_param_channel_type_InputChannel' => '[Channel/supergroup](https://core.telegram.org/api/channel)',
  'method_channels.readHistory_param_max_id_type_int' => 'ID of message up to which messages should be marked as read',
  'method_channels.deleteMessages' => 'Delete messages in a [channel/supergroup](https://core.telegram.org/api/channel)',
  'method_channels.deleteMessages_param_channel_type_InputChannel' => '[Channel/supergroup](https://core.telegram.org/api/channel)',
  'method_channels.deleteMessages_param_id_type_Vector t' => 'The IDs of messages to delete',
  'method_channels.deleteUserHistory' => 'Delete all messages sent by a certain user in a [supergroup](https://core.telegram.org/api/channel)',
  'method_channels.deleteUserHistory_param_channel_type_InputChannel' => '[Supergroup](https://core.telegram.org/api/channel)',
  'method_channels.deleteUserHistory_param_user_id_type_InputUser' => 'User whose messages should be deleted',
  'method_channels.reportSpam' => 'Reports some messages from a user in a supergroup as spam; requires administrator rights in the supergroup',
  'method_channels.reportSpam_param_channel_type_InputChannel' => 'Supergroup',
  'method_channels.reportSpam_param_user_id_type_InputUser' => 'ID of the user that sent the spam messages',
  'method_channels.reportSpam_param_id_type_Vector t' => 'The IDs of messages to report',
  'method_channels.getMessages' => 'Get [channel/supergroup](https://core.telegram.org/api/channel) messages',
  'method_channels.getMessages_param_channel_type_InputChannel' => 'Channel/supergroup',
  'method_channels.getMessages_param_id_type_Vector t' => 'The message IDs',
  'method_channels.getParticipants' => 'Get the participants of a channel',
  'method_channels.getParticipants_param_channel_type_InputChannel' => 'Channel',
  'method_channels.getParticipants_param_filter_type_ChannelParticipantsFilter' => 'Which participant types to fetch',
  'method_channels.getParticipants_param_offset_type_int' => '[Offset](https://core.telegram.org/api/offsets)',
  'method_channels.getParticipants_param_limit_type_int' => '[Limit](https://core.telegram.org/api/offsets)',
  'method_channels.getParticipants_param_hash_type_int' => '[Hash](https://core.telegram.org/api/offsets)',
  'method_channels.getParticipant' => 'Get info about a [channel/supergroup](https://core.telegram.org/api/channel) participant',
  'method_channels.getParticipant_param_channel_type_InputChannel' => 'Channel/supergroup',
  'method_channels.getParticipant_param_user_id_type_InputUser' => 'ID of participant to get info about',
  'method_channels.getChannels' => 'Get info about [channels/supergroups](https://core.telegram.org/api/channel)',
  'method_channels.getChannels_param_id_type_Vector t' => 'The channel/supergroup MTProto IDs',
  'method_channels.getFullChannel' => 'You cannot use this method directly, use the getPwrChat, getInfo, getFullInfo methods instead (see https://docs.madelineproto.xyz for more info)',
  'method_channels.getFullChannel_param_channel_type_InputChannel' => 'You cannot use this method directly, use the getPwrChat, getInfo, getFullInfo methods instead (see https://docs.madelineproto.xyz for more info)',
  'method_channels.createChannel' => 'Create a [supergroup/channel](https://core.telegram.org/api/channel).',
  'method_channels.createChannel_param_broadcast_type_true' => 'Whether to create a [channel](https://core.telegram.org/api/channel)',
  'method_channels.createChannel_param_megagroup_type_true' => 'Whether to create a [supergroup](https://core.telegram.org/api/channel)',
  'method_channels.createChannel_param_title_type_string' => 'Channel title',
  'method_channels.createChannel_param_about_type_string' => 'Channel description',
  'method_channels.editAbout' => 'Edit the about text of a channel/supergroup',
  'method_channels.editAbout_param_channel_type_InputChannel' => 'The channel',
  'method_channels.editAbout_param_about_type_string' => 'The new about text',
  'method_channels.editAdmin' => 'Modify the admin rights of a user in a [supergroup/channel](https://core.telegram.org/api/channel).',
  'method_channels.editAdmin_param_channel_type_InputChannel' => 'The [supergroup/channel](https://core.telegram.org/api/channel).',
  'method_channels.editAdmin_param_user_id_type_InputUser' => 'The ID of the user whose admin rights should be modified',
  'method_channels.editAdmin_param_admin_rights_type_ChannelAdminRights' => 'The new admin rights',
  'method_channels.editTitle' => 'Edit the name of a [channel/supergroup](https://core.telegram.org/api/channel)',
  'method_channels.editTitle_param_channel_type_InputChannel' => 'Channel/supergroup',
  'method_channels.editTitle_param_title_type_string' => 'New name',
  'method_channels.editPhoto' => 'Change the photo of a [channel/supergroup](https://core.telegram.org/api/channel)',
  'method_channels.editPhoto_param_channel_type_InputChannel' => 'Channel/supergroup whose photo should be edited',
  'method_channels.editPhoto_param_photo_type_InputChatPhoto' => 'New photo',
  'method_channels.checkUsername' => 'Check if a username is free and can be assigned to a channel/supergroup',
  'method_channels.checkUsername_param_channel_type_InputChannel' => 'The [channel/supergroup](https://core.telegram.org/api/channel) that will assigned the specified username',
  'method_channels.checkUsername_param_username_type_string' => 'The username to check',
  'method_channels.updateUsername' => 'Change the username of a supergroup/channel',
  'method_channels.updateUsername_param_channel_type_InputChannel' => 'Channel',
  'method_channels.updateUsername_param_username_type_string' => 'New username',
  'method_channels.joinChannel' => 'Join a channel/supergroup',
  'method_channels.joinChannel_param_channel_type_InputChannel' => 'Channel/supergroup to join',
  'method_channels.leaveChannel' => 'Leave a [channel/supergroup](https://core.telegram.org/api/channel)',
  'method_channels.leaveChannel_param_channel_type_InputChannel' => '[Channel/supergroup](https://core.telegram.org/api/channel) to leave',
  'method_channels.inviteToChannel' => 'Invite users to a channel/supergroup',
  'method_channels.inviteToChannel_param_channel_type_InputChannel' => 'Channel/supergroup',
  'method_channels.inviteToChannel_param_users_type_Vector t' => 'The users to add',
  'method_channels.exportInvite' => 'Export the invite link of a channel',
  'method_channels.exportInvite_param_channel_type_InputChannel' => 'The channel',
  'method_channels.deleteChannel' => 'Delete a [channel/supergroup](https://core.telegram.org/api/channel)',
  'method_channels.deleteChannel_param_channel_type_InputChannel' => '[Channel/supergroup](https://core.telegram.org/api/channel) to delete',
  'method_channels.toggleInvites' => 'Allow or disallow any user to invite users to this channel/supergroup',
  'method_channels.toggleInvites_param_channel_type_InputChannel' => 'The channel/supergroup',
  'method_channels.toggleInvites_param_enabled_type_Bool' => 'Allow or disallow',
  'method_channels.exportMessageLink' => 'Get link and embed info of a message in a [channel/supergroup](https://core.telegram.org/api/channel)',
  'method_channels.exportMessageLink_param_channel_type_InputChannel' => 'Channel',
  'method_channels.exportMessageLink_param_id_type_int' => 'Message ID',
  'method_channels.exportMessageLink_param_grouped_type_Bool' => 'Whether to include other grouped media (for albums)',
  'method_channels.toggleSignatures' => 'Enable/disable message signatures in channels',
  'method_channels.toggleSignatures_param_channel_type_InputChannel' => 'Channel',
  'method_channels.toggleSignatures_param_enabled_type_Bool' => 'Value',
  'method_channels.updatePinnedMessage' => 'Set the pinned message of a channel/supergroup',
  'method_channels.updatePinnedMessage_param_silent_type_true' => 'Pin silently',
  'method_channels.updatePinnedMessage_param_channel_type_InputChannel' => 'The channel/supergroup',
  'method_channels.updatePinnedMessage_param_id_type_int' => 'The ID of the message to pin',
  'method_channels.getAdminedPublicChannels' => 'Get [channels/supergroups/geogroups](https://core.telegram.org/api/channel) we\'re admin in. Usually called when the user exceeds the [limit](../constructors/config.md) for owned public [channels/supergroups/geogroups](https://core.telegram.org/api/channel), and the user is given the choice to remove one of his channels/supergroups/geogroups.',
  'method_channels.editBanned' => 'Ban/unban/kick a user in a [supergroup/channel](https://core.telegram.org/api/channel).',
  'method_channels.editBanned_param_channel_type_InputChannel' => 'The [supergroup/channel](https://core.telegram.org/api/channel).',
  'method_channels.editBanned_param_user_id_type_InputUser' => 'The ID of the user whose banned rights should be modified',
  'method_channels.editBanned_param_banned_rights_type_ChannelBannedRights' => 'Banned/kicked permissions',
  'method_channels.getAdminLog' => 'Get the admin log of a [channel/supergroup](https://core.telegram.org/api/channel)',
  'method_channels.getAdminLog_param_channel_type_InputChannel' => 'Channel',
  'method_channels.getAdminLog_param_q_type_string' => 'Search query, can be empty',
  'method_channels.getAdminLog_param_events_filter_type_ChannelAdminLogEventsFilter' => 'Event filter',
  'method_channels.getAdminLog_param_admins_type_Vector t' => 'Fetch only actions from these admins',
  'method_channels.getAdminLog_param_max_id_type_long' => 'Maximum ID of message to return (see [pagination](https://core.telegram.org/api/offsets))',
  'method_channels.getAdminLog_param_min_id_type_long' => 'Minimum ID of message to return (see [pagination](https://core.telegram.org/api/offsets))',
  'method_channels.getAdminLog_param_limit_type_int' => 'Maximum number of results to return, [see pagination](https://core.telegram.org/api/offsets)',
  'method_channels.setStickers' => 'Associate a stickerset to the supergroup',
  'method_channels.setStickers_param_channel_type_InputChannel' => 'Supergroup',
  'method_channels.setStickers_param_stickerset_type_InputStickerSet' => 'The stickerset to associate',
  'method_channels.readMessageContents' => 'Mark [channel/supergroup](https://core.telegram.org/api/channel) message contents as read',
  'method_channels.readMessageContents_param_channel_type_InputChannel' => '[Channel/supergroup](https://core.telegram.org/api/channel)',
  'method_channels.readMessageContents_param_id_type_Vector t' => 'List of message IDs',
  'method_channels.deleteHistory' => 'Delete the history of a [supergroup](https://core.telegram.org/api/channel)',
  'method_channels.deleteHistory_param_channel_type_InputChannel' => '[Supergroup](https://core.telegram.org/api/channel) whose history must be deleted',
  'method_channels.deleteHistory_param_max_id_type_int' => 'ID of message **up to which** the history must be deleted',
  'method_channels.togglePreHistoryHidden' => 'Hide/unhide message history for new channel/supergroup users',
  'method_channels.togglePreHistoryHidden_param_channel_type_InputChannel' => 'Channel/supergroup',
  'method_channels.togglePreHistoryHidden_param_enabled_type_Bool' => 'Hide/unhide',
  'method_bots.sendCustomRequest' => 'Sends a custom request; for bots only',
  'method_bots.sendCustomRequest_param_custom_method_type_string' => 'The method name',
  'method_bots.sendCustomRequest_param_params_type_DataJSON' => 'JSON-serialized method parameters',
  'method_bots.answerWebhookJSONQuery' => 'Answers a custom query; for bots only',
  'method_bots.answerWebhookJSONQuery_param_query_id_type_long' => 'Identifier of a custom query',
  'method_bots.answerWebhookJSONQuery_param_data_type_DataJSON' => 'JSON-serialized answer to the query',
  'method_payments.getPaymentForm' => 'Get a payment form',
  'method_payments.getPaymentForm_param_msg_id_type_int' => 'Message ID of payment form',
  'method_payments.getPaymentReceipt' => 'Get payment receipt',
  'method_payments.getPaymentReceipt_param_msg_id_type_int' => 'Message ID of receipt',
  'method_payments.validateRequestedInfo' => 'Submit requested order information for validation',
  'method_payments.validateRequestedInfo_param_save_type_true' => 'Save order information to re-use it for future orders',
  'method_payments.validateRequestedInfo_param_msg_id_type_int' => 'Message ID of payment form',
  'method_payments.validateRequestedInfo_param_info_type_PaymentRequestedInfo' => 'Requested order information',
  'method_payments.sendPaymentForm' => 'Send compiled payment form',
  'method_payments.sendPaymentForm_param_msg_id_type_int' => 'Message ID of form',
  'method_payments.sendPaymentForm_param_requested_info_id_type_string' => 'ID of saved and validated [order info](../constructors/payments.validatedRequestedInfo.md)',
  'method_payments.sendPaymentForm_param_shipping_option_id_type_string' => 'Chosen shipping option ID',
  'method_payments.sendPaymentForm_param_credentials_type_InputPaymentCredentials' => 'Payment credentials',
  'method_payments.getSavedInfo' => 'Get saved payment information',
  'method_payments.clearSavedInfo' => 'Clear saved payment information',
  'method_payments.clearSavedInfo_param_credentials_type_true' => 'Remove saved payment credentials',
  'method_payments.clearSavedInfo_param_info_type_true' => 'Clear the last order settings saved by the user',
  'method_stickers.createStickerSet' => 'Create a stickerset, bots only.',
  'method_stickers.createStickerSet_param_masks_type_true' => 'Whether this is a mask stickerset',
  'method_stickers.createStickerSet_param_user_id_type_InputUser' => 'Stickerset owner',
  'method_stickers.createStickerSet_param_title_type_string' => 'Stickerset name, `1-64` chars',
  'method_stickers.createStickerSet_param_short_name_type_string' => 'Sticker set name. Can contain only English letters, digits and underscores. Must end with *"*by*<bot username="">"</bot>* (*<bot_username></bot_username>* is case insensitive); 1-64 characters',
  'method_stickers.createStickerSet_param_stickers_type_Vector t' => 'The stickers to add',
  'method_stickers.removeStickerFromSet' => 'Remove a sticker from the set where it belongs, bots only. The sticker set must have been created by the bot.',
  'method_stickers.removeStickerFromSet_param_sticker_type_InputDocument' => 'The sticker to remove',
  'method_stickers.changeStickerPosition' => 'Changes the absolute position of a sticker in the set to which it belongs; for bots only. The sticker set must have been created by the bot',
  'method_stickers.changeStickerPosition_param_sticker_type_InputDocument' => 'The sticker',
  'method_stickers.changeStickerPosition_param_position_type_int' => 'The new position of the sticker, zero-based',
  'method_stickers.addStickerToSet' => 'Add a sticker to a stickerset, bots only. The sticker set must have been created by the bot.',
  'method_stickers.addStickerToSet_param_stickerset_type_InputStickerSet' => 'The stickerset',
  'method_stickers.addStickerToSet_param_sticker_type_InputStickerSetItem' => 'The sticker',
  'method_phone.getCallConfig' => 'Get phone call configuration to be passed to libtgvoip\'s shared config',
  'method_phone.requestCall' => 'You cannot use this method directly, see https://docs.madelineproto.xyz#calls for more info on handling calls',
  'method_phone.requestCall_param_user_id_type_InputUser' => 'You cannot use this method directly, see https://docs.madelineproto.xyz#calls for more info on handling calls',
  'method_phone.requestCall_param_g_a_hash_type_bytes' => 'You cannot use this method directly, see https://docs.madelineproto.xyz#calls for more info on handling calls',
  'method_phone.requestCall_param_protocol_type_PhoneCallProtocol' => 'You cannot use this method directly, see https://docs.madelineproto.xyz#calls for more info on handling calls',
  'method_phone.acceptCall' => 'You cannot use this method directly, see https://docs.madelineproto.xyz#calls for more info on handling calls',
  'method_phone.acceptCall_param_peer_type_InputPhoneCall' => 'You cannot use this method directly, see https://docs.madelineproto.xyz#calls for more info on handling calls',
  'method_phone.acceptCall_param_g_b_type_bytes' => 'You cannot use this method directly, see https://docs.madelineproto.xyz#calls for more info on handling calls',
  'method_phone.acceptCall_param_protocol_type_PhoneCallProtocol' => 'You cannot use this method directly, see https://docs.madelineproto.xyz#calls for more info on handling calls',
  'method_phone.confirmCall' => 'You cannot use this method directly, see https://docs.madelineproto.xyz#calls for more info on handling calls',
  'method_phone.confirmCall_param_peer_type_InputPhoneCall' => 'You cannot use this method directly, see https://docs.madelineproto.xyz#calls for more info on handling calls',
  'method_phone.confirmCall_param_g_a_type_bytes' => 'You cannot use this method directly, see https://docs.madelineproto.xyz#calls for more info on handling calls',
  'method_phone.confirmCall_param_key_fingerprint_type_long' => 'You cannot use this method directly, see https://docs.madelineproto.xyz#calls for more info on handling calls',
  'method_phone.confirmCall_param_protocol_type_PhoneCallProtocol' => 'You cannot use this method directly, see https://docs.madelineproto.xyz#calls for more info on handling calls',
  'method_phone.receivedCall' => 'Optional: notify the server that the user is currently busy in a call: this will automatically refuse all incoming phone calls until the current phone call is ended.',
  'method_phone.receivedCall_param_peer_type_InputPhoneCall' => 'The phone call we\'re currently in',
  'method_phone.discardCall' => 'You cannot use this method directly, see https://docs.madelineproto.xyz#calls for more info on handling calls',
  'method_phone.discardCall_param_peer_type_InputPhoneCall' => 'You cannot use this method directly, see https://docs.madelineproto.xyz#calls for more info on handling calls',
  'method_phone.discardCall_param_duration_type_int' => 'You cannot use this method directly, see https://docs.madelineproto.xyz#calls for more info on handling calls',
  'method_phone.discardCall_param_reason_type_PhoneCallDiscardReason' => 'You cannot use this method directly, see https://docs.madelineproto.xyz#calls for more info on handling calls',
  'method_phone.discardCall_param_connection_id_type_long' => 'You cannot use this method directly, see https://docs.madelineproto.xyz#calls for more info on handling calls',
  'method_phone.setCallRating' => 'Rate a call',
  'method_phone.setCallRating_param_peer_type_InputPhoneCall' => 'The call to rate',
  'method_phone.setCallRating_param_rating_type_int' => 'Rating in `1-5` stars',
  'method_phone.setCallRating_param_comment_type_string' => 'An additional comment',
  'method_phone.saveCallDebug' => 'Send phone call debug data to server',
  'method_phone.saveCallDebug_param_peer_type_InputPhoneCall' => 'Phone call',
  'method_phone.saveCallDebug_param_debug_type_DataJSON' => 'Debug statistics obtained from libtgvoip',
  'method_langpack.getLangPack' => 'Get localization pack strings',
  'method_langpack.getLangPack_param_lang_code_type_string' => 'Language code',
  'method_langpack.getStrings' => 'Get strings from a language pack',
  'method_langpack.getStrings_param_lang_code_type_string' => 'Language code',
  'method_langpack.getStrings_param_keys_type_Vector t' => 'Keys',
  'method_langpack.getDifference' => 'Get new strings in languagepack',
  'method_langpack.getDifference_param_from_version_type_int' => 'Previous localization pack version',
  'method_langpack.getLanguages' => 'Get information about all languages in a localization pack',
  'method_auth.sendCode_param_sms_type_type_int' => 'You cannot use this method directly, use the phoneLogin method instead (see https://docs.madelineproto.xyz for more info)',
  'method_auth.sendCode_param_lang_code_type_string' => 'You cannot use this method directly, use the phoneLogin method instead (see https://docs.madelineproto.xyz for more info)',
  'method_auth.sendCall' => 'Send verification phone call',
  'method_auth.sendCall_param_phone_number_type_string' => 'The phone number',
  'method_auth.sendCall_param_phone_code_hash_type_string' => 'The phone code hash',
  'method_account.registerDevice_param_device_model_type_string' => 'Device model',
  'method_account.registerDevice_param_system_version_type_string' => 'System version',
  'method_account.registerDevice_param_app_version_type_string' => 'App version',
  'method_account.registerDevice_param_lang_code_type_string' => 'Language code',
  'method_contacts.getContacts_param_hash_type_string' => 'List of contact user IDs you already cached',
  'method_contacts.importContacts_param_replace_type_Bool' => 'Replace contacts?',
  'method_contacts.getSuggested' => 'Get suggested contacts',
  'method_contacts.getSuggested_param_limit_type_int' => 'Number of results to return',
  'method_messages.getDialogs_param_offset_type_int' => 'Offset',
  'method_messages.getDialogs_param_max_id_type_int' => 'Maximum ID of result to return',
  'method_messages.getHistory_param_offset_type_int' => 'Message ID offset',
  'method_messages.search_param_offset_type_int' => 'Offset ',
  'method_messages.readHistory_param_offset_type_int' => 'Offset',
  'method_messages.readHistory_param_read_contents_type_Bool' => 'Mark messages as read?',
  'method_messages.deleteHistory_param_offset_type_int' => 'Offset',
  'method_messages.forwardMessages_param_peer_type_InputPeer' => 'Peer',
  'method_photos.updateProfilePhoto_param_crop_type_InputPhotoCrop' => 'Cropping info',
  'method_photos.uploadProfilePhoto_param_caption_type_string' => 'Caption type',
  'method_photos.uploadProfilePhoto_param_geo_point_type_InputGeoPoint' => 'Location',
  'method_photos.uploadProfilePhoto_param_crop_type_InputPhotoCrop' => 'Cropping info',
  'method_help.getAppUpdate_param_device_model_type_string' => 'Device model',
  'method_help.getAppUpdate_param_system_version_type_string' => 'System version',
  'method_help.getAppUpdate_param_app_version_type_string' => 'App version',
  'method_help.getAppUpdate_param_lang_code_type_string' => 'Langauge code',
  'method_help.getInviteText_param_lang_code_type_string' => 'Language',
  'method_photos.getUserPhotos_param_max_id_type_int' => 'Maximum ID of photo to return',
  'method_messages.forwardMessage' => 'Forward message',
  'method_messages.forwardMessage_param_peer_type_InputPeer' => 'From where to forward the message',
  'method_messages.forwardMessage_param_id_type_int' => 'The message ID',
  'method_messages.sendBroadcast' => 'Send a message to all users in the chat list',
  'method_messages.sendBroadcast_param_contacts_type_Vector t' => 'The users to which send the message',
  'method_messages.sendBroadcast_param_message_type_string' => 'The message',
  'method_messages.sendBroadcast_param_media_type_InputMedia' => 'The media',
  'method_auth.sendSms' => 'Send SMS verification code',
  'method_auth.sendSms_param_phone_number_type_string' => 'Phone number',
  'method_auth.sendSms_param_phone_code_hash_type_string' => 'Phone code ash',
  'method_invokeWithLayer18' => 'Invoke this method with layer 18',
  'method_invokeWithLayer18_param_query_type_!X' => 'The method call',
  'method_messages.getAllStickers_param_hash_type_string' => 'Previously fetched stickers',
  'method_geochats.getLocated' => 'Get nearby geochats',
  'method_geochats.getLocated_param_geo_point_type_InputGeoPoint' => 'Current location',
  'method_geochats.getLocated_param_radius_type_int' => 'Radius',
  'method_geochats.getLocated_param_limit_type_int' => 'Number of results to return',
  'method_geochats.getRecents' => 'Get recent geochats',
  'method_geochats.getRecents_param_offset_type_int' => 'Offset',
  'method_geochats.getRecents_param_limit_type_int' => 'Number of results to return',
  'method_geochats.checkin' => 'Join a geochat',
  'method_geochats.checkin_param_peer_type_InputGeoChat' => 'The geochat',
  'method_geochats.getFullChat' => 'Get full info about a geochat',
  'method_geochats.getFullChat_param_peer_type_InputGeoChat' => 'The geochat',
  'method_geochats.editChatTitle' => 'Edit geochat title',
  'method_geochats.editChatTitle_param_peer_type_InputGeoChat' => 'The geochat',
  'method_geochats.editChatTitle_param_title_type_string' => 'The new title',
  'method_geochats.editChatTitle_param_address_type_string' => 'The new address',
  'method_geochats.editChatPhoto' => 'Edit geochat photo',
  'method_geochats.editChatPhoto_param_peer_type_InputGeoChat' => 'The geochat',
  'method_geochats.editChatPhoto_param_photo_type_InputChatPhoto' => 'The new photo',
  'method_geochats.search' => 'Search messages in geocha',
  'method_geochats.search_param_peer_type_InputGeoChat' => 'The geochat',
  'method_geochats.search_param_q_type_string' => 'The search query',
  'method_geochats.search_param_filter_type_MessagesFilter' => 'Search filter',
  'method_geochats.search_param_min_date_type_int' => 'Minumum date',
  'method_geochats.search_param_max_date_type_int' => 'Maximum date',
  'method_geochats.search_param_offset_type_int' => 'Offset',
  'method_geochats.search_param_max_id_type_int' => 'Maximum message ID',
  'method_geochats.search_param_limit_type_int' => 'Number of results to return',
  'method_geochats.getHistory' => 'Get geochat history',
  'method_geochats.getHistory_param_peer_type_InputGeoChat' => 'The geochat',
  'method_geochats.getHistory_param_offset_type_int' => 'Offset',
  'method_geochats.getHistory_param_max_id_type_int' => 'Maximum message ID',
  'method_geochats.getHistory_param_limit_type_int' => 'Number of results to return',
  'method_geochats.setTyping' => 'Send typing notification to geochat',
  'method_geochats.setTyping_param_peer_type_InputGeoChat' => 'The geochat',
  'method_geochats.setTyping_param_typing_type_Bool' => 'Typing or not typing',
  'method_geochats.sendMessage' => 'Send message to geochat',
  'method_geochats.sendMessage_param_peer_type_InputGeoChat' => 'The geochat',
  'method_geochats.sendMessage_param_message_type_string' => 'The message',
  'method_geochats.sendMedia' => 'Send media to geochat',
  'method_geochats.sendMedia_param_peer_type_InputGeoChat' => 'The geochat',
  'method_geochats.sendMedia_param_media_type_InputMedia' => 'The media',
  'method_geochats.createGeoChat' => 'Create geochat',
  'method_geochats.createGeoChat_param_title_type_string' => 'Geochat title',
  'method_geochats.createGeoChat_param_geo_point_type_InputGeoPoint' => 'Geochat location',
  'method_geochats.createGeoChat_param_address_type_string' => 'Geochat address',
  'method_geochats.createGeoChat_param_venue_type_string' => 'Geochat venue ',
  'method_account.setPassword' => 'Set 2FA password',
  'method_account.setPassword_param_current_password_hash_type_bytes' => 'Use only if you have set a 2FA password: `$current_salt = $MadelineProto->account->getPassword()[\'current_salt\']; $current_password_hash = hash(\'sha256\', $current_salt.$password.$current_salt, true);`',
  'method_account.setPassword_param_new_salt_type_bytes' => 'New salt',
  'method_account.setPassword_param_new_password_hash_type_bytes' => '`hash(\'sha256\', $new_salt.$new_password.$new_salt, true)`',
  'method_account.setPassword_param_hint_type_string' => 'Hint',
  'method_messages.installStickerSet_param_disabled_type_Bool' => 'Disable stickerset?',
  'method_messages.startBot_param_chat_id_type_InputPeer' => 'Chat ID',
  'method_help.getAppChangelog_param_device_model_type_string' => 'Device model',
  'method_help.getAppChangelog_param_system_version_type_string' => 'System version',
  'method_help.getAppChangelog_param_app_version_type_string' => 'App version',
  'method_help.getAppChangelog_param_lang_code_type_string' => 'Language code',
  'method_channels.getDialogs' => 'Get channel dialogs',
  'method_channels.getDialogs_param_offset_type_int' => 'Offset',
  'method_channels.getDialogs_param_limit_type_int' => 'Number of results to return',
  'method_channels.getImportantHistory' => 'Get important channel/supergroup history',
  'method_channels.getImportantHistory_param_channel_type_InputChannel' => 'The supergroup/channel',
  'method_channels.getImportantHistory_param_offset_id_type_int' => 'Message ID offset',
  'method_channels.getImportantHistory_param_add_offset_type_int' => 'Additional offset',
  'method_channels.getImportantHistory_param_limit_type_int' => 'Number of results to return',
  'method_channels.getImportantHistory_param_max_id_type_int' => 'Maximum message ID',
  'method_channels.getImportantHistory_param_min_id_type_int' => 'Minumum message ID',
  'method_channels.createChannel_param_users_type_Vector t' => 'Users to add to channel',
  'method_channels.editAdmin_param_role_type_ChannelParticipantRole' => 'User role',
  'method_channels.toggleComments' => 'Enable channel comments',
  'method_channels.toggleComments_param_channel_type_InputChannel' => 'The channel ',
  'method_channels.toggleComments_param_enabled_type_Bool' => 'Enable or disable comments',
  'method_channels.kickFromChannel' => 'Kick user from channel',
  'method_channels.kickFromChannel_param_channel_type_InputChannel' => 'The channel',
  'method_channels.kickFromChannel_param_user_id_type_InputUser' => 'The user to kick',
  'method_channels.kickFromChannel_param_kicked_type_Bool' => 'Kick or unkick?',
  'method_messages.getChannelDialogs' => 'Get channel/supergruop dialogs',
  'method_messages.getChannelDialogs_param_offset_type_int' => 'Offset',
  'method_messages.getChannelDialogs_param_limit_type_int' => 'Number of results to return',
  'method_messages.getImportantHistory' => 'Get important message history',
  'method_messages.getImportantHistory_param_peer_type_InputPeer' => 'Peer',
  'method_messages.getImportantHistory_param_max_id_type_int' => 'Maximum message ID to fetch',
  'method_messages.getImportantHistory_param_min_id_type_int' => 'Minumum message ID to fetch',
  'method_messages.getImportantHistory_param_limit_type_int' => 'Number of results to fetch',
  'method_messages.readChannelHistory' => 'Mark channel/supergroup history as read',
  'method_messages.readChannelHistory_param_peer_type_InputPeer' => 'The channel/supergruop',
  'method_messages.readChannelHistory_param_max_id_type_int' => 'Maximum message ID to mark as read',
  'method_messages.createChannel' => 'Create channel',
  'method_messages.createChannel_param_title_type_string' => 'Channel/supergroup title',
  'method_messages.deleteChannelMessages' => 'Delete channel messages',
  'method_messages.deleteChannelMessages_param_peer_type_InputPeer' => 'The channel/supergroup',
  'method_messages.deleteChannelMessages_param_id_type_Vector t' => 'The IDs of messages to delete',
  'method_updates.getChannelDifference_param_peer_type_InputPeer' => 'You cannot use this method directly, see https://docs.madelineproto.xyz for more info on handling updates',
  'method_messages.search_param_important_only_type_true' => 'Show only important messages',
  'method_messages.sendMessage_param_broadcast_type_true' => 'Broadcast this message',
  'method_messages.sendMedia_param_broadcast_type_true' => 'Broadcast this message',
  'method_messages.forwardMessages_param_broadcast_type_true' => 'Broadcast this message',
  'method_messages.deactivateChat' => 'Deactivate chat',
  'method_messages.deactivateChat_param_chat_id_type_InputPeer' => 'The chat to deactivate',
  'method_messages.deactivateChat_param_enabled_type_Bool' => 'Activate or deactivate?',
  'method_help.getTermsOfService_param_lang_code_type_string' => 'Language code',
  'method_messages.sendInlineBotResult_param_broadcast_type_true' => 'Broadcast this message?',
  'method_channels.getImportantHistory_param_offset_date_type_int' => 'Date offset',
  'method_messages.getUnusedStickers' => 'Get unused stickers',
  'method_messages.getUnusedStickers_param_limit_type_int' => 'Number of results to return',
  'method_destroy_auth_key' => 'Destroy current authorization key',
  'method_phone.requestCall_param_g_a_type_bytes' => 'You cannot use this method directly, see https://docs.madelineproto.xyz#calls for more info on handling calls',
  'method_phone.acceptCall_param_key_fingerprint_type_long' => 'You cannot use this method directly, see https://docs.madelineproto.xyz#calls for more info on handling calls',
  'method_req_DH_params_param_p_type_string' => 'Factorized p from pq',
  'method_req_DH_params_param_q_type_string' => 'Factorized q from pq',
  'method_req_DH_params_param_encrypted_data_type_string' => 'Encrypted message',
  'method_set_client_DH_params_param_encrypted_data_type_string' => 'Encrypted message',
  'method_contest.saveDeveloperInfo' => 'Save developer info for telegram contest',
  'method_contest.saveDeveloperInfo_param_vk_id_type_int' => 'VK user ID',
  'method_contest.saveDeveloperInfo_param_name_type_string' => 'Name',
  'method_contest.saveDeveloperInfo_param_phone_number_type_string' => 'Phone number',
  'method_contest.saveDeveloperInfo_param_age_type_int' => 'Age',
  'method_contest.saveDeveloperInfo_param_city_type_string' => 'City',
  'method_auth.importBotAuthorization_param_a_type_true' => 'You cannot use this method directly, use the botLogin method instead (see https://docs.madelineproto.xyz for more info)',
  'method_auth.importBotAuthorization_param_b_type_true' => 'You cannot use this method directly, use the botLogin method instead (see https://docs.madelineproto.xyz for more info)',
  'method_auth.importBotAuthorization_param_c_type_true' => 'You cannot use this method directly, use the botLogin method instead (see https://docs.madelineproto.xyz for more info)',
  'method_auth.importBotAuthorization_param_d_type_true' => 'You cannot use this method directly, use the botLogin method instead (see https://docs.madelineproto.xyz for more info)',
  'object_vector' => 'A universal vector constructor.',
  'object_resPQ' => 'Contains pq to factorize',
  'object_resPQ_param_nonce_type_int128' => 'Nonce',
  'object_resPQ_param_server_nonce_type_int128' => 'Server nonce',
  'object_resPQ_param_pq_type_bytes' => 'PQ ',
  'object_resPQ_param_server_public_key_fingerprints_type_Vector t' => 'RSA key fingerprints',
  'object_p_q_inner_data' => 'PQ inner data',
  'object_p_q_inner_data_param_pq_type_bytes' => 'PQ',
  'object_p_q_inner_data_param_p_type_bytes' => 'P',
  'object_p_q_inner_data_param_q_type_bytes' => 'Q',
  'object_p_q_inner_data_param_nonce_type_int128' => 'Nonce',
  'object_p_q_inner_data_param_server_nonce_type_int128' => 'Nonce',
  'object_p_q_inner_data_param_new_nonce_type_int256' => 'Nonce',
  'object_p_q_inner_data_temp' => 'Inner data temp',
  'object_p_q_inner_data_temp_param_pq_type_bytes' => 'Pq',
  'object_p_q_inner_data_temp_param_p_type_bytes' => 'P',
  'object_p_q_inner_data_temp_param_q_type_bytes' => 'Q',
  'object_p_q_inner_data_temp_param_nonce_type_int128' => 'Random number for cryptographic security',
  'object_p_q_inner_data_temp_param_server_nonce_type_int128' => 'Random number for cryptographic security, given by server',
  'object_p_q_inner_data_temp_param_new_nonce_type_int256' => 'New nonce',
  'object_p_q_inner_data_temp_param_expires_in_type_int' => 'Expires in',
  'object_server_DH_params_fail' => 'Server params fail',
  'object_server_DH_params_fail_param_nonce_type_int128' => 'Random number for cryptographic security',
  'object_server_DH_params_fail_param_server_nonce_type_int128' => 'Random number for cryptographic security, given by server',
  'object_server_DH_params_fail_param_new_nonce_hash_type_int128' => 'New nonce hash',
  'object_server_DH_params_ok' => 'Server params ok',
  'object_server_DH_params_ok_param_nonce_type_int128' => 'Random number for cryptographic security',
  'object_server_DH_params_ok_param_server_nonce_type_int128' => 'Random number for cryptographic security, given by server',
  'object_server_DH_params_ok_param_encrypted_answer_type_bytes' => 'Encrypted answer',
  'object_server_DH_inner_data' => 'Server inner data',
  'object_server_DH_inner_data_param_nonce_type_int128' => 'Random number for cryptographic security',
  'object_server_DH_inner_data_param_server_nonce_type_int128' => 'Random number for cryptographic security, given by server',
  'object_server_DH_inner_data_param_g_type_int' => 'G',
  'object_server_DH_inner_data_param_dh_prime_type_bytes' => 'Dh prime',
  'object_server_DH_inner_data_param_g_a_type_bytes' => 'G a',
  'object_server_DH_inner_data_param_server_time_type_int' => 'Server time',
  'object_client_DH_inner_data' => 'Client inner data',
  'object_client_DH_inner_data_param_nonce_type_int128' => 'Random number for cryptographic security',
  'object_client_DH_inner_data_param_server_nonce_type_int128' => 'Random number for cryptographic security, given by server',
  'object_client_DH_inner_data_param_retry_id_type_long' => 'Retry ID',
  'object_client_DH_inner_data_param_g_b_type_bytes' => 'G b',
  'object_dh_gen_ok' => 'Dh gen ok',
  'object_dh_gen_ok_param_nonce_type_int128' => 'Random number for cryptographic security',
  'object_dh_gen_ok_param_server_nonce_type_int128' => 'Random number for cryptographic security, given by server',
  'object_dh_gen_ok_param_new_nonce_hash1_type_int128' => 'New nonce hash1',
  'object_dh_gen_retry' => 'Dh gen retry',
  'object_dh_gen_retry_param_nonce_type_int128' => 'Random number for cryptographic security',
  'object_dh_gen_retry_param_server_nonce_type_int128' => 'Random number for cryptographic security, given by server',
  'object_dh_gen_retry_param_new_nonce_hash2_type_int128' => 'New nonce hash2',
  'object_dh_gen_fail' => 'Dh gen fail',
  'object_dh_gen_fail_param_nonce_type_int128' => 'Random number for cryptographic security',
  'object_dh_gen_fail_param_server_nonce_type_int128' => 'Random number for cryptographic security, given by server',
  'object_dh_gen_fail_param_new_nonce_hash3_type_int128' => 'New nonce hash3',
  'object_rpc_result' => 'Rpc result',
  'object_rpc_result_param_req_msg_id_type_long' => 'Req msg ID',
  'object_rpc_result_param_result_type_Object' => 'Result',
  'object_rpc_error' => 'Rpc error',
  'object_rpc_error_param_error_code_type_int' => 'Error code',
  'object_rpc_error_param_error_message_type_string' => 'Error message',
  'object_rpc_answer_unknown' => 'Rpc answer unknown',
  'object_rpc_answer_dropped_running' => 'Rpc answer dropped running',
  'object_rpc_answer_dropped' => 'Rpc answer dropped',
  'object_rpc_answer_dropped_param_msg_id_type_long' => 'Msg ID',
  'object_rpc_answer_dropped_param_seq_no_type_int' => 'Seq no',
  'object_rpc_answer_dropped_param_bytes_type_int' => 'Bytes',
  'object_future_salt' => 'Future salt',
  'object_future_salt_param_valid_since_type_int' => 'Valid since',
  'object_future_salt_param_valid_until_type_int' => 'Valid until',
  'object_future_salt_param_salt_type_long' => 'Salt',
  'object_future_salts' => 'Future salts',
  'object_future_salts_param_req_msg_id_type_long' => 'Req msg ID',
  'object_future_salts_param_now_type_int' => 'Now',
  'object_future_salts_param_salts_type_vector' => 'Salts',
  'object_pong' => 'Pong',
  'object_pong_param_msg_id_type_long' => 'Msg ID',
  'object_pong_param_ping_id_type_long' => 'Ping ID',
  'object_destroy_session_ok' => 'Destroy session ok',
  'object_destroy_session_ok_param_session_id_type_long' => 'Session ID',
  'object_destroy_session_none' => 'Destroy session none',
  'object_destroy_session_none_param_session_id_type_long' => 'Session ID',
  'object_new_session_created' => 'New session created',
  'object_new_session_created_param_first_msg_id_type_long' => 'First msg ID',
  'object_new_session_created_param_unique_id_type_long' => 'Unique ID',
  'object_new_session_created_param_server_salt_type_long' => 'Server salt',
  'object_msg_container' => 'Msg container',
  'object_msg_container_param_messages_type_vector' => 'Messages',
  'object_MTmessage' => 'MTProto message',
  'object_MTmessage_param_msg_id_type_long' => 'Message ID',
  'object_MTmessage_param_seqno_type_int' => 'Seqno',
  'object_MTmessage_param_bytes_type_int' => 'Message body',
  'object_MTmessage_param_body_type_Object' => 'Message body',
  'object_msg_copy' => 'Msg copy',
  'object_msg_copy_param_orig_message_type_MTMessage' => 'Orig message',
  'object_gzip_packed' => 'Gzip packed',
  'object_gzip_packed_param_packed_data_type_bytes' => 'Packed data',
  'object_msgs_ack' => 'Msgs ack',
  'object_msgs_ack_param_msg_ids_type_Vector t' => 'Msg IDs',
  'object_bad_msg_notification' => 'Bad msg notification',
  'object_bad_msg_notification_param_bad_msg_id_type_long' => 'Bad msg ID',
  'object_bad_msg_notification_param_bad_msg_seqno_type_int' => 'Bad msg seqno',
  'object_bad_msg_notification_param_error_code_type_int' => 'Error code',
  'object_bad_server_salt' => 'Bad server salt',
  'object_bad_server_salt_param_bad_msg_id_type_long' => 'Bad msg ID',
  'object_bad_server_salt_param_bad_msg_seqno_type_int' => 'Bad msg seqno',
  'object_bad_server_salt_param_error_code_type_int' => 'Error code',
  'object_bad_server_salt_param_new_server_salt_type_long' => 'New server salt',
  'object_msg_resend_req' => 'Msg resend req',
  'object_msg_resend_req_param_msg_ids_type_Vector t' => 'Msg IDs',
  'object_msgs_state_req' => 'Msgs state req',
  'object_msgs_state_req_param_msg_ids_type_Vector t' => 'Msg IDs',
  'object_msgs_state_info' => 'Msgs state info',
  'object_msgs_state_info_param_req_msg_id_type_long' => 'Req msg ID',
  'object_msgs_state_info_param_info_type_bytes' => 'Info',
  'object_msgs_all_info' => 'Msgs all info',
  'object_msgs_all_info_param_msg_ids_type_Vector t' => 'Msg IDs',
  'object_msgs_all_info_param_info_type_bytes' => 'Info',
  'object_msg_detailed_info' => 'Msg detailed info',
  'object_msg_detailed_info_param_msg_id_type_long' => 'Msg ID',
  'object_msg_detailed_info_param_answer_msg_id_type_long' => 'Answer msg ID',
  'object_msg_detailed_info_param_bytes_type_int' => 'Bytes',
  'object_msg_detailed_info_param_status_type_int' => 'Status',
  'object_msg_new_detailed_info' => 'Msg new detailed info',
  'object_msg_new_detailed_info_param_answer_msg_id_type_long' => 'Answer msg ID',
  'object_msg_new_detailed_info_param_bytes_type_int' => 'Bytes',
  'object_msg_new_detailed_info_param_status_type_int' => 'Status',
  'object_bind_auth_key_inner' => 'Bind auth key inner',
  'object_bind_auth_key_inner_param_nonce_type_long' => 'Nonce',
  'object_bind_auth_key_inner_param_temp_auth_key_id_type_long' => 'Temp auth key ID',
  'object_bind_auth_key_inner_param_perm_auth_key_id_type_long' => 'Perm auth key ID',
  'object_bind_auth_key_inner_param_temp_session_id_type_long' => 'Temp session ID',
  'object_bind_auth_key_inner_param_expires_at_type_int' => 'Expires at',
  'object_boolFalse' => 'Constructor may be interpreted as a **boolean**`false` value.',
  'object_boolTrue' => 'The constructor can be interpreted as a **boolean**`true` value.',
  'object_true' => 'See [predefined identifiers](https://core.telegram.org/mtproto/TL-formal#predefined-identifiers).',
  'object_error' => 'Error.',
  'object_error_param_code_type_int' => 'Error code',
  'object_error_param_text_type_string' => 'Message',
  'object_null' => 'Corresponds to an arbitrary empty object.',
  'object_inputPeerEmpty' => 'An empty constructor, no user or chat is defined.',
  'object_inputPeerSelf' => 'Defines the current user.',
  'object_inputPeerChat' => 'Defines a chat for further interaction.',
  'object_inputPeerChat_param_chat_id_type_int' => 'Chat idientifier',
  'object_inputPeerUser' => 'Defines a user for further interaction.',
  'object_inputPeerUser_param_user_id_type_int' => 'User identifier',
  'object_inputPeerUser_param_access_hash_type_long' => '**access\\_hash** value from the [user](../constructors/user.md) constructor',
  'object_inputPeerChannel' => 'Defines a channel for further interaction.',
  'object_inputPeerChannel_param_channel_id_type_int' => 'Channel identifier',
  'object_inputPeerChannel_param_access_hash_type_long' => '**access\\_hash** value from the [channel](../constructors/channel.md) constructor',
  'object_inputUserEmpty' => 'Empty constructor, does not define a user.',
  'object_inputUserSelf' => 'Defines the current user.',
  'object_inputUser' => 'Defines a user for further interaction.',
  'object_inputUser_param_user_id_type_int' => 'User identifier',
  'object_inputUser_param_access_hash_type_long' => '**access\\_hash** value from the [user](../constructors/user.md) constructor',
  'object_inputPhoneContact' => 'Phone contact. The `client_id` is just an arbitrary contact ID: it should be set, for example, to an incremental number when using [contacts.importContacts](../methods/contacts.importContacts.md), in order to retry importing only the contacts that weren\'t imported successfully.',
  'object_inputPhoneContact_param_client_id_type_long' => 'User identifier on the client',
  'object_inputPhoneContact_param_phone_type_string' => 'Phone number',
  'object_inputPhoneContact_param_first_name_type_string' => 'Contact\'s first name',
  'object_inputPhoneContact_param_last_name_type_string' => 'Contact\'s last name',
  'object_inputFile' => 'Defines a file saved in parts using the method [upload.saveFilePart](../methods/upload.saveFilePart.md).',
  'object_inputFile_param_id_type_long' => 'Random file identifier created by the client',
  'object_inputFile_param_parts_type_int' => 'Number of parts saved',
  'object_inputFile_param_name_type_string' => 'Full name of the file',
  'object_inputFile_param_md5_checksum_type_string' => 'In case the file\'s [md5-hash](https://en.wikipedia.org/wiki/MD5#MD5_hashes) was passed, contents of the file will be checked prior to use',
  'object_inputFileBig' => 'Assigns a big file (over 10Mb in size), saved in part using the method [upload.saveBigFilePart](../methods/upload.saveBigFilePart.md).',
  'object_inputFileBig_param_id_type_long' => 'Random file id, created by the client',
  'object_inputFileBig_param_parts_type_int' => 'Number of parts saved',
  'object_inputFileBig_param_name_type_string' => 'Full file name',
  'object_inputMediaEmpty' => 'Empty media content of a message.',
  'object_inputMediaUploadedPhoto' => 'Photo',
  'object_inputMediaUploadedPhoto_param_file_type_InputFile' => 'The [uploaded file](https://core.telegram.org/api/files)',
  'object_inputMediaUploadedPhoto_param_stickers_type_Vector t' => 'Stickers',
  'object_inputMediaUploadedPhoto_param_ttl_seconds_type_int' => 'Time to live in seconds of self-destructing photo',
  'object_inputMediaPhoto' => 'Forwarded photo',
  'object_inputMediaPhoto_param_id_type_InputPhoto' => 'Photo to be forwarded',
  'object_inputMediaPhoto_param_ttl_seconds_type_int' => 'Time to live in seconds of self-destructing photo',
  'object_inputMediaGeoPoint' => 'Map.',
  'object_inputMediaGeoPoint_param_geo_point_type_InputGeoPoint' => 'GeoPoint',
  'object_inputMediaContact' => 'Phonebook contact',
  'object_inputMediaContact_param_phone_number_type_string' => 'Phone number',
  'object_inputMediaContact_param_first_name_type_string' => 'Contact\'s first name',
  'object_inputMediaContact_param_last_name_type_string' => 'Contact\'s last name',
  'object_inputMediaUploadedDocument' => 'New document',
  'object_inputMediaUploadedDocument_param_nosound_video_type_true' => 'Whether the specified document is a video file with no audio tracks (a GIF animation (even as MPEG4), for example)',
  'object_inputMediaUploadedDocument_param_file_type_InputFile' => 'The [uploaded file](https://core.telegram.org/api/files)',
  'object_inputMediaUploadedDocument_param_thumb_type_InputFile' => 'Thumbnail of the document, uploaded as for the file',
  'object_inputMediaUploadedDocument_param_mime_type_type_string' => 'MIME type of document',
  'object_inputMediaUploadedDocument_param_attributes_type_Vector t' => 'Attributes',
  'object_inputMediaUploadedDocument_param_stickers_type_Vector t' => 'Stickers',
  'object_inputMediaUploadedDocument_param_ttl_seconds_type_int' => 'Time to live in seconds of self-destructing document',
  'object_inputMediaDocument' => 'Forwarded document',
  'object_inputMediaDocument_param_id_type_InputDocument' => 'The document to be forwarded.',
  'object_inputMediaDocument_param_ttl_seconds_type_int' => 'Time to live of self-destructing document',
  'object_inputMediaVenue' => 'Can be used to send a venue geolocation.',
  'object_inputMediaVenue_param_geo_point_type_InputGeoPoint' => 'Geolocation',
  'object_inputMediaVenue_param_title_type_string' => 'Venue name',
  'object_inputMediaVenue_param_address_type_string' => 'Physical address of the venue',
  'object_inputMediaVenue_param_provider_type_string' => 'Venue provider: currently only "foursquare" needs to be supported',
  'object_inputMediaVenue_param_venue_id_type_string' => 'Venue ID in the provider\'s database',
  'object_inputMediaVenue_param_venue_type_type_string' => 'Venue type in the provider\'s database',
  'object_inputMediaGifExternal' => 'New GIF animation that will be uploaded by the server using the specified URL',
  'object_inputMediaGifExternal_param_url_type_string' => 'URL',
  'object_inputMediaGifExternal_param_q_type_string' => 'Query',
  'object_inputMediaPhotoExternal' => 'New photo that will be uploaded by the server using the specified URL',
  'object_inputMediaPhotoExternal_param_url_type_string' => 'URL of the photo',
  'object_inputMediaPhotoExternal_param_ttl_seconds_type_int' => 'Self-destruct time to live of photo',
  'object_inputMediaDocumentExternal' => 'Document that will be downloaded by the telegram servers',
  'object_inputMediaDocumentExternal_param_url_type_string' => 'URL of the document',
  'object_inputMediaDocumentExternal_param_ttl_seconds_type_int' => 'Self-destruct time to live of document',
  'object_inputMediaGame' => 'A game',
  'object_inputMediaGame_param_id_type_InputGame' => 'The game to forward',
  'object_inputMediaInvoice' => 'Generated invoice of a [bot payment](https://core.telegram.org/bots/payments)',
  'object_inputMediaInvoice_param_title_type_string' => 'Product name, 1-32 characters',
  'object_inputMediaInvoice_param_description_type_string' => 'Product description, 1-255 characters',
  'object_inputMediaInvoice_param_photo_type_InputWebDocument' => 'URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service. People like it better when they see what they are paying for.',
  'object_inputMediaInvoice_param_invoice_type_Invoice' => 'The actual invoice',
  'object_inputMediaInvoice_param_payload_type_bytes' => 'Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes.',
  'object_inputMediaInvoice_param_provider_type_string' => 'Payments provider token, obtained via [Botfather](https://t.me/botfather)',
  'object_inputMediaInvoice_param_provider_data_type_DataJSON' => 'JSON-encoded data about the invoice, which will be shared with the payment provider. A detailed description of required fields should be provided by the payment provider.',
  'object_inputMediaInvoice_param_start_param_type_string' => 'Start parameter',
  'object_inputMediaGeoLive' => 'Live geographical location',
  'object_inputMediaGeoLive_param_geo_point_type_InputGeoPoint' => 'Current geolocation',
  'object_inputMediaGeoLive_param_period_type_int' => 'Validity period of the current location',
  'object_inputChatPhotoEmpty' => 'Empty constructor, remove group photo.',
  'object_inputChatUploadedPhoto' => 'New photo to be set as group profile photo.',
  'object_inputChatUploadedPhoto_param_file_type_InputFile' => 'File saved in parts using the method [upload.saveFilePart](../methods/upload.saveFilePart.md)',
  'object_inputChatPhoto' => 'Existing photo to be set as a chat profile photo.',
  'object_inputChatPhoto_param_id_type_InputPhoto' => 'Existing photo',
  'object_inputGeoPointEmpty' => 'Empty GeoPoint constructor.',
  'object_inputGeoPoint' => 'Defines a GeoPoint by its coordinates.',
  'object_inputGeoPoint_param_lat_type_double' => 'Latitide',
  'object_inputGeoPoint_param_long_type_double' => 'Longtitude',
  'object_inputPhotoEmpty' => 'Empty constructor.',
  'object_inputPhoto' => 'Defines a photo for further interaction.',
  'object_inputPhoto_param_id_type_long' => 'Photo identifier',
  'object_inputPhoto_param_access_hash_type_long' => '**access\\_hash** value from the [photo](../constructors/photo.md) constructor',
  'object_inputFileLocation' => 'DEPRECATED location of a photo',
  'object_inputFileLocation_param_volume_id_type_long' => 'Server volume',
  'object_inputFileLocation_param_local_id_type_int' => 'File identifier',
  'object_inputFileLocation_param_secret_type_long' => 'Check sum to access the file',
  'object_inputEncryptedFileLocation' => 'Location of encrypted secret chat file.',
  'object_inputEncryptedFileLocation_param_id_type_long' => 'File ID, **id** parameter value from [encryptedFile](../constructors/encryptedFile.md)',
  'object_inputEncryptedFileLocation_param_access_hash_type_long' => 'Checksum, **access\\_hash** parameter value from [encryptedFile](../constructors/encryptedFile.md)',
  'object_inputDocumentFileLocation' => 'Document location (video, voice, audio, basically every type except photo)',
  'object_inputDocumentFileLocation_param_id_type_long' => 'Document ID',
  'object_inputDocumentFileLocation_param_access_hash_type_long' => '**access\\_hash** parameter from the [document](../constructors/document.md) constructor',
  'object_inputDocumentFileLocation_param_version_type_int' => 'Version',
  'object_inputAppEvent' => 'Event that occured in the application.',
  'object_inputAppEvent_param_time_type_double' => 'Client\'s exact timestamp for the event',
  'object_inputAppEvent_param_type_type_string' => 'Type of event',
  'object_inputAppEvent_param_peer_type_long' => 'Arbitrary numeric value for more convenient selection of certain event types, or events referring to a certain object',
  'object_inputAppEvent_param_data_type_string' => 'Data',
  'object_peerUser' => 'Chat partner',
  'object_peerUser_param_user_id_type_int' => 'User identifier',
  'object_peerChat' => 'Group.',
  'object_peerChat_param_chat_id_type_int' => 'Group identifier',
  'object_peerChannel' => 'Channel/supergroup',
  'object_peerChannel_param_channel_id_type_int' => 'Channel ID',
  'object_storage.fileUnknown' => 'Unknown type.',
  'object_storage.filePartial' => 'Part of a bigger file.',
  'object_storage.fileJpeg' => 'JPEG image. MIME type: `image/jpeg`.',
  'object_storage.fileGif' => 'GIF image. MIME type: `image/gif`.',
  'object_storage.filePng' => 'PNG image. MIME type: `image/png`.',
  'object_storage.filePdf' => 'PDF document image. MIME type: `application/pdf`.',
  'object_storage.fileMp3' => 'Mp3 audio. MIME type: `audio/mpeg`.',
  'object_storage.fileMov' => 'Quicktime video. MIME type: `video/quicktime`.',
  'object_storage.fileMp4' => 'MPEG-4 video. MIME type: `video/mp4`.',
  'object_storage.fileWebp' => 'WEBP image. MIME type: `image/webp`.',
  'object_fileLocationUnavailable' => 'File location unavailable',
  'object_fileLocationUnavailable_param_volume_id_type_long' => 'Volume ID',
  'object_fileLocationUnavailable_param_local_id_type_int' => 'Local ID',
  'object_fileLocationUnavailable_param_secret_type_long' => 'Secret',
  'object_fileLocation' => 'File location',
  'object_fileLocation_param_dc_id_type_int' => 'DC ID',
  'object_fileLocation_param_volume_id_type_long' => 'Volume ID',
  'object_fileLocation_param_local_id_type_int' => 'Local ID',
  'object_fileLocation_param_secret_type_long' => 'Secret',
  'object_userEmpty' => 'Empty constructor, non-existent user.',
  'object_userEmpty_param_id_type_int' => 'User identifier or `0`',
  'object_user' => 'Indicates info about a certain user',
  'object_user_param_self_type_true' => 'Whether this user indicates the currently logged in user',
  'object_user_param_contact_type_true' => 'Whether this user is a contact',
  'object_user_param_mutual_contact_type_true' => 'Whether this user is a mutual contact',
  'object_user_param_deleted_type_true' => 'Whether the account of this user was deleted',
  'object_user_param_bot_type_true' => 'Is this user a bot?',
  'object_user_param_bot_chat_history_type_true' => 'Can the bot see all messages in groups?',
  'object_user_param_bot_nochats_type_true' => 'Can the bot be added to groups?',
  'object_user_param_verified_type_true' => 'Whether this user is verified',
  'object_user_param_restricted_type_true' => 'Access to this user must be restricted for the reason specified in `restriction_reason`',
  'object_user_param_min_type_true' => 'See [min](https://core.telegram.org/api/min)',
  'object_user_param_bot_inline_geo_type_true' => 'Whether the bot can request our geolocation in inline mode',
  'object_user_param_id_type_int' => 'ID of the user',
  'object_user_param_access_hash_type_long' => 'Access hash of the user',
  'object_user_param_first_name_type_string' => 'First name',
  'object_user_param_last_name_type_string' => 'Last name',
  'object_user_param_username_type_string' => 'Username',
  'object_user_param_phone_type_string' => 'Phone number',
  'object_user_param_photo_type_UserProfilePhoto' => 'Profile picture of user',
  'object_user_param_status_type_UserStatus' => 'Online status of user',
  'object_user_param_bot_info_version_type_int' => 'Version of the [bot\\_info field in userFull](../constructors/userFull.md), incremented every time it changes',
  'object_user_param_restriction_reason_type_string' => 'Restriction reason',
  'object_user_param_bot_inline_placeholder_type_string' => 'Inline placeholder for this inline bot',
  'object_user_param_lang_code_type_string' => 'Language code of the user',
  'object_userProfilePhotoEmpty' => 'Profile photo has not been set, or was hidden.',
  'object_userProfilePhoto' => 'User profile photo.',
  'object_userProfilePhoto_param_photo_id_type_long' => 'Identifier of the respective photo<br>Parameter added in [Layer 2](https://core.telegram.org/api/layers#layer-2)',
  'object_userProfilePhoto_param_photo_small_type_FileLocation' => 'Location of the file, corresponding to the small profile photo thumbnail',
  'object_userProfilePhoto_param_photo_big_type_FileLocation' => 'Location of the file, corresponding to the big profile photo thumbnail',
  'object_chatEmpty' => 'Empty constructor, group doesn\'t exist',
  'object_chatEmpty_param_id_type_int' => 'Group identifier',
  'object_chat' => 'Info about a group',
  'object_chat_param_creator_type_true' => 'Whether the current user is the creator of the group',
  'object_chat_param_kicked_type_true' => 'Whether the current user was kicked from the group',
  'object_chat_param_left_type_true' => 'Whether the current user has left the group',
  'object_chat_param_admins_enabled_type_true' => 'Admins enabled?',
  'object_chat_param_admin_type_true' => 'Admin?',
  'object_chat_param_deactivated_type_true' => 'Whether the group was [migrated](https://core.telegram.org/api/channel)',
  'object_chat_param_id_type_int' => 'ID of the group',
  'object_chat_param_title_type_string' => 'Title',
  'object_chat_param_photo_type_ChatPhoto' => 'Chat photo',
  'object_chat_param_participants_count_type_int' => 'Participant count',
  'object_chat_param_date_type_int' => 'Date of creation of the group',
  'object_chat_param_version_type_int' => 'Used in basic groups to reorder updates and make sure that all of them were received.',
  'object_chat_param_migrated_to_type_InputChannel' => 'Means this chat was [upgraded](https://core.telegram.org/api/channel) to a supergroup',
  'object_chatForbidden' => 'A group to which the user has no access. E.g., because the user was kicked from the group.',
  'object_chatForbidden_param_id_type_int' => 'User identifier',
  'object_chatForbidden_param_title_type_string' => 'Group name',
  'object_channel' => 'Channel/supergroup info',
  'object_channel_param_creator_type_true' => 'Whether the current user is the creator of this channel',
  'object_channel_param_left_type_true' => 'Whether the current user has left this channel',
  'object_channel_param_editor_type_true' => 'Editor?',
  'object_channel_param_broadcast_type_true' => 'Is this a channel?',
  'object_channel_param_verified_type_true' => 'Is this channel verified by telegram?',
  'object_channel_param_megagroup_type_true' => 'Is this a supergroup?',
  'object_channel_param_restricted_type_true' => 'Whether viewing/writing in this channel for a reason (see `restriction_reason`',
  'object_channel_param_democracy_type_true' => 'Democracy?',
  'object_channel_param_signatures_type_true' => 'Whether signatures are enabled (channels)',
  'object_channel_param_min_type_true' => 'See [min](https://core.telegram.org/api/min)',
  'object_channel_param_id_type_int' => 'ID of the channel',
  'object_channel_param_access_hash_type_long' => 'Access hash',
  'object_channel_param_title_type_string' => 'Title',
  'object_channel_param_username_type_string' => 'Username',
  'object_channel_param_photo_type_ChatPhoto' => 'Profile photo',
  'object_channel_param_date_type_int' => 'Creation date',
  'object_channel_param_version_type_int' => 'Version of the channel (always `0`)',
  'object_channel_param_restriction_reason_type_string' => 'Restriction reason',
  'object_channel_param_admin_rights_type_ChannelAdminRights' => 'Admin rights',
  'object_channel_param_banned_rights_type_ChannelBannedRights' => 'Banned rights',
  'object_channel_param_participants_count_type_int' => 'Participant count',
  'object_channelForbidden' => 'Indicates a channel/supergroup we can\'t access because we were banned, or for some other reason.',
  'object_channelForbidden_param_broadcast_type_true' => 'Is this a channel',
  'object_channelForbidden_param_megagroup_type_true' => 'Is this a supergroup',
  'object_channelForbidden_param_id_type_int' => 'Channel ID',
  'object_channelForbidden_param_access_hash_type_long' => 'Access hash',
  'object_channelForbidden_param_title_type_string' => 'Title',
  'object_channelForbidden_param_until_date_type_int' => 'The ban is valid until the specified date',
  'object_chatFull' => 'Detailed chat info',
  'object_chatFull_param_id_type_int' => 'ID of the chat',
  'object_chatFull_param_participants_type_ChatParticipants' => 'Participant list',
  'object_chatFull_param_chat_photo_type_Photo' => 'Chat photo',
  'object_chatFull_param_notify_settings_type_PeerNotifySettings' => 'Notification settings',
  'object_chatFull_param_exported_invite_type_ExportedChatInvite' => 'Chat invite',
  'object_chatFull_param_bot_info_type_Vector t' => 'Bot info',
  'object_channelFull' => 'Full info about a [channel/supergroup](https://core.telegram.org/api/channel)',
  'object_channelFull_param_can_view_participants_type_true' => 'Can we vew the participant list?',
  'object_channelFull_param_can_set_username_type_true' => 'Can we set the channel\'s username?',
  'object_channelFull_param_can_set_stickers_type_true' => 'Can we [associate](../methods/channels.setStickers.md) a stickerpack to the supergroup?',
  'object_channelFull_param_hidden_prehistory_type_true' => 'Is the history before we joined hidden to us?',
  'object_channelFull_param_id_type_int' => 'ID of the channel',
  'object_channelFull_param_about_type_string' => 'Info about the channel',
  'object_channelFull_param_participants_count_type_int' => 'Number of participants of the channel',
  'object_channelFull_param_admins_count_type_int' => 'Number of channel admins',
  'object_channelFull_param_kicked_count_type_int' => 'Number of users [kicked](https://core.telegram.org/api/rights) from the channel',
  'object_channelFull_param_banned_count_type_int' => 'Number of users [banned](https://core.telegram.org/api/rights) from the channel',
  'object_channelFull_param_read_inbox_max_id_type_int' => 'Position up to which all incoming messages are read.',
  'object_channelFull_param_read_outbox_max_id_type_int' => 'Position up to which all outgoing messages are read.',
  'object_channelFull_param_unread_count_type_int' => 'Count of unread messages',
  'object_channelFull_param_chat_photo_type_Photo' => 'Channel picture',
  'object_channelFull_param_notify_settings_type_PeerNotifySettings' => 'Notification settings',
  'object_channelFull_param_exported_invite_type_ExportedChatInvite' => 'Invite link',
  'object_channelFull_param_bot_info_type_Vector t' => 'Bot info',
  'object_channelFull_param_migrated_from_chat_id_type_int' => 'The chat ID from which this group was [migrated](https://core.telegram.org/api/channel)',
  'object_channelFull_param_migrated_from_max_id_type_int' => 'The message ID in the original chat at which this group was [migrated](https://core.telegram.org/api/channel)',
  'object_channelFull_param_pinned_msg_id_type_int' => 'Message ID of the pinned message',
  'object_channelFull_param_stickerset_type_StickerSet' => 'Associated stickerset',
  'object_channelFull_param_available_min_id_type_int' => 'Identifier of a maximum unavailable message in a channel due to hidden history.',
  'object_chatParticipant' => 'Group member.',
  'object_chatParticipant_param_user_id_type_int' => 'Member user ID',
  'object_chatParticipant_param_inviter_id_type_int' => 'ID of the user that added the member to the group',
  'object_chatParticipant_param_date_type_int' => 'Date added to the group',
  'object_chatParticipantCreator' => 'Represents the creator of the group',
  'object_chatParticipantCreator_param_user_id_type_int' => 'ID of the user that created the group',
  'object_chatParticipantAdmin' => 'Chat admin',
  'object_chatParticipantAdmin_param_user_id_type_int' => 'ID of a group member that is admin',
  'object_chatParticipantAdmin_param_inviter_id_type_int' => 'ID of the user that added the member to the group',
  'object_chatParticipantAdmin_param_date_type_int' => 'Date when the user was added',
  'object_chatParticipantsForbidden' => 'Info on members is unavailable',
  'object_chatParticipantsForbidden_param_chat_id_type_int' => 'Group ID',
  'object_chatParticipantsForbidden_param_self_participant_type_ChatParticipant' => 'Info about the group membership of the current user',
  'object_chatParticipants' => 'Group members.',
  'object_chatParticipants_param_chat_id_type_int' => 'Group identifier',
  'object_chatParticipants_param_participants_type_Vector t' => 'Participants',
  'object_chatParticipants_param_version_type_int' => 'Group version number',
  'object_chatPhotoEmpty' => 'Group photo is not set.',
  'object_chatPhoto' => 'Group profile photo.',
  'object_chatPhoto_param_photo_small_type_FileLocation' => 'Location of the file corresponding to the small thumbnail for group profile photo',
  'object_chatPhoto_param_photo_big_type_FileLocation' => 'Location of the file corresponding to the small thumbnail for group profile photo',
  'object_messageEmpty' => 'Empty constructor, non-existent message.',
  'object_messageEmpty_param_id_type_int' => 'Message identifier',
  'object_message' => 'A message',
  'object_message_param_out_type_true' => 'Is this an outgoing message',
  'object_message_param_mentioned_type_true' => 'Whether we were mentioned in this message',
  'object_message_param_media_unread_type_true' => 'Whether there are unread media attachments in this message',
  'object_message_param_silent_type_true' => 'Whether this is a silent message (no notification triggered)',
  'object_message_param_post_type_true' => 'Whether this is a channel post',
  'object_message_param_id_type_int' => 'ID of the message',
  'object_message_param_from_id_type_int' => 'ID of the sender of the message',
  'object_message_param_to_id_type_Peer' => 'ID of the chat were the message was sent',
  'object_message_param_fwd_from_type_MessageFwdHeader' => 'Info about forwarded messages',
  'object_message_param_via_bot_id_type_int' => 'ID of the inline bot that generated the message',
  'object_message_param_reply_to_msg_id_type_int' => 'ID of the message this message replies to',
  'object_message_param_date_type_int' => 'Date of the message',
  'object_message_param_message_type_string' => 'The message',
  'object_message_param_media_type_MessageMedia' => 'Media attachment',
  'object_message_param_reply_markup_type_ReplyMarkup' => 'Reply markup (bot/inline keyboards)',
  'object_message_param_entities_type_Vector t' => 'Entities',
  'object_message_param_views_type_int' => 'View count for channel posts',
  'object_message_param_edit_date_type_int' => 'Last edit date of this message',
  'object_message_param_post_author_type_string' => 'Name of the author of this message for channel posts (with signatures enabled)',
  'object_message_param_grouped_id_type_long' => 'Multiple media messages sent using [messages.sendMultiMedia](../methods/messages.sendMultiMedia.md) with the same grouped ID indicate an album',
  'object_messageService' => 'Indicates a service message',
  'object_messageService_param_out_type_true' => 'Whether the message is outgoing',
  'object_messageService_param_mentioned_type_true' => 'Whether we were mentioned in the message',
  'object_messageService_param_media_unread_type_true' => 'Whether the message contains unread media',
  'object_messageService_param_silent_type_true' => 'Whether the message is silent',
  'object_messageService_param_post_type_true' => 'Whether it\'s a channel post',
  'object_messageService_param_id_type_int' => 'Message ID',
  'object_messageService_param_from_id_type_int' => 'Id of te sender of the message',
  'object_messageService_param_to_id_type_Peer' => 'ID of the destination of the message',
  'object_messageService_param_reply_to_msg_id_type_int' => 'ID of the message this message replies to',
  'object_messageService_param_date_type_int' => 'Message date',
  'object_messageService_param_action_type_MessageAction' => 'Event connected with the service message',
  'object_messageMediaEmpty' => 'Empty constructor.',
  'object_messageMediaPhoto' => 'Attached photo.',
  'object_messageMediaPhoto_param_photo_type_Photo' => 'Photo',
  'object_messageMediaPhoto_param_ttl_seconds_type_int' => 'Time to live in seconds of self-destructing photo',
  'object_messageMediaGeo' => 'Attached map.',
  'object_messageMediaGeo_param_geo_type_GeoPoint' => 'GeoPoint',
  'object_messageMediaContact' => 'Attached contact.',
  'object_messageMediaContact_param_phone_number_type_string' => 'Phone number',
  'object_messageMediaContact_param_first_name_type_string' => 'Contact\'s first name',
  'object_messageMediaContact_param_last_name_type_string' => 'Contact\'s last name',
  'object_messageMediaContact_param_user_id_type_int' => 'User identifier or `0`, if the user with the given phone number is not registered',
  'object_messageMediaUnsupported' => 'Current version of the client does not support this media type.',
  'object_messageMediaDocument' => 'Document (video, audio, voice, sticker, any media type except photo)',
  'object_messageMediaDocument_param_document_type_Document' => 'Attached document',
  'object_messageMediaDocument_param_ttl_seconds_type_int' => 'Time to live of self-destructing document',
  'object_messageMediaWebPage' => 'Preview of webpage',
  'object_messageMediaWebPage_param_webpage_type_WebPage' => 'Webpage preview',
  'object_messageMediaVenue' => 'Venue',
  'object_messageMediaVenue_param_geo_type_GeoPoint' => 'Geolocation of venue',
  'object_messageMediaVenue_param_title_type_string' => 'Venue name',
  'object_messageMediaVenue_param_address_type_string' => 'Address',
  'object_messageMediaVenue_param_provider_type_string' => 'Venue provider: currently only "foursquare" needs to be supported',
  'object_messageMediaVenue_param_venue_id_type_string' => 'Venue ID in the provider\'s database',
  'object_messageMediaVenue_param_venue_type_type_string' => 'Venue type in the provider\'s database',
  'object_messageMediaGame' => 'Telegram game',
  'object_messageMediaGame_param_game_type_Game' => 'Game',
  'object_messageMediaInvoice' => 'Invoice',
  'object_messageMediaInvoice_param_shipping_address_requested_type_true' => 'Whether the shipping address was requested',
  'object_messageMediaInvoice_param_test_type_true' => 'Whether this is an example invoice',
  'object_messageMediaInvoice_param_title_type_string' => 'Product name, 1-32 characters',
  'object_messageMediaInvoice_param_description_type_string' => 'Product description, 1-255 characters',
  'object_messageMediaInvoice_param_photo_type_WebDocument' => 'URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service. People like it better when they see what they are paying for.',
  'object_messageMediaInvoice_param_receipt_msg_id_type_int' => 'Message ID of receipt: if set, clients should change the text of the first [keyboardButtonBuy](../constructors/keyboardButtonBuy.md) button always attached to the [message](../constructors/message.md) to a localized version of the word `Receipt`',
  'object_messageMediaInvoice_param_currency_type_string' => 'Three-letter ISO 4217 [currency](https://core.telegram.org/bots/payments#supported-currencies) code',
  'object_messageMediaInvoice_param_total_amount_type_long' => 'Total price in the smallest units of the currency (integer, not float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).',
  'object_messageMediaInvoice_param_start_param_type_string' => 'Unique bot deep-linking parameter that can be used to generate this invoice',
  'object_messageMediaGeoLive' => 'Indicates a live geolocation',
  'object_messageMediaGeoLive_param_geo_type_GeoPoint' => 'Geolocation',
  'object_messageMediaGeoLive_param_period_type_int' => 'Validity period of provided geolocation',
  'object_messageActionEmpty' => 'Empty constructor.',
  'object_messageActionChatCreate' => 'Group created',
  'object_messageActionChatCreate_param_title_type_string' => 'Group name',
  'object_messageActionChatCreate_param_users_type_Vector t' => 'Users',
  'object_messageActionChatEditTitle' => 'Group name changed.',
  'object_messageActionChatEditTitle_param_title_type_string' => 'New group name',
  'object_messageActionChatEditPhoto' => 'Group profile changed',
  'object_messageActionChatEditPhoto_param_photo_type_Photo' => 'New group pofile photo',
  'object_messageActionChatDeletePhoto' => 'Group profile photo removed.',
  'object_messageActionChatAddUser' => 'New member in the group',
  'object_messageActionChatAddUser_param_users_type_Vector t' => 'Users',
  'object_messageActionChatDeleteUser' => 'User left the group.',
  'object_messageActionChatDeleteUser_param_user_id_type_int' => 'Leaving user ID',
  'object_messageActionChatJoinedByLink' => 'A user joined the chat via an invite link',
  'object_messageActionChatJoinedByLink_param_inviter_id_type_int' => 'ID of the user that created the invite link',
  'object_messageActionChannelCreate' => 'The channel was created',
  'object_messageActionChannelCreate_param_title_type_string' => 'Original channel/supergroup title',
  'object_messageActionChatMigrateTo' => 'Indicates the chat was [migrated](https://core.telegram.org/api/channel) to the specified supergroup',
  'object_messageActionChatMigrateTo_param_channel_id_type_int' => 'The supergroup it was migrated to',
  'object_messageActionChannelMigrateFrom' => 'Indicates the channel was [migrated](https://core.telegram.org/api/channel) from the specified chat',
  'object_messageActionChannelMigrateFrom_param_title_type_string' => 'The old chat tite',
  'object_messageActionChannelMigrateFrom_param_chat_id_type_int' => 'The old chat ID',
  'object_messageActionPinMessage' => 'A message was pinned',
  'object_messageActionHistoryClear' => 'Chat history was cleared',
  'object_messageActionGameScore' => 'Someone scored in a game',
  'object_messageActionGameScore_param_game_id_type_long' => 'Game ID',
  'object_messageActionGameScore_param_score_type_int' => 'Score',
  'object_messageActionPaymentSentMe' => 'A user just sent a payment to me (a bot)',
  'object_messageActionPaymentSentMe_param_currency_type_string' => 'Three-letter ISO 4217 [currency](https://core.telegram.org/bots/payments#supported-currencies) code',
  'object_messageActionPaymentSentMe_param_total_amount_type_long' => 'Price of the product in the smallest units of the currency (integer, not float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).',
  'object_messageActionPaymentSentMe_param_payload_type_bytes' => 'Bot specified invoice payload',
  'object_messageActionPaymentSentMe_param_info_type_PaymentRequestedInfo' => 'Order info provided by the user',
  'object_messageActionPaymentSentMe_param_shipping_option_id_type_string' => 'Identifier of the shipping option chosen by the user',
  'object_messageActionPaymentSentMe_param_charge_type_PaymentCharge' => 'Provider payment identifier',
  'object_messageActionPaymentSent' => 'A payment was sent',
  'object_messageActionPaymentSent_param_currency_type_string' => 'Three-letter ISO 4217 [currency](https://core.telegram.org/bots/payments#supported-currencies) code',
  'object_messageActionPaymentSent_param_total_amount_type_long' => 'Price of the product in the smallest units of the currency (integer, not float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).',
  'object_messageActionPhoneCall' => 'A phone call',
  'object_messageActionPhoneCall_param_call_id_type_long' => 'Call ID',
  'object_messageActionPhoneCall_param_reason_type_PhoneCallDiscardReason' => 'If the call has ended, the reason why it ended',
  'object_messageActionPhoneCall_param_duration_type_int' => 'Duration of the call in seconds',
  'object_messageActionScreenshotTaken' => 'A screenshot of the chat was taken',
  'object_messageActionCustomAction' => 'Custom action (most likely not supported by the current layer, an upgrade might be needed)',
  'object_messageActionCustomAction_param_message_type_string' => 'Action message',
  'object_dialog' => 'Chat',
  'object_dialog_param_pinned_type_true' => 'Is the dialog pinned',
  'object_dialog_param_peer_type_Peer' => 'The chat',
  'object_dialog_param_top_message_type_int' => 'The latest message ID',
  'object_dialog_param_read_inbox_max_id_type_int' => 'Position up to which all incoming messages are read.',
  'object_dialog_param_read_outbox_max_id_type_int' => 'Position up to which all outgoing messages are read.',
  'object_dialog_param_unread_count_type_int' => 'Number of unread messages',
  'object_dialog_param_unread_mentions_count_type_int' => 'Number of unread mentions',
  'object_dialog_param_notify_settings_type_PeerNotifySettings' => 'Notification settings',
  'object_dialog_param_pts_type_int' => '[PTS](https://core.telegram.org/api/updates)',
  'object_dialog_param_draft_type_DraftMessage' => 'Message draft',
  'object_photoEmpty' => 'Empty constructor, non-existent photo',
  'object_photoEmpty_param_id_type_long' => 'Photo identifier',
  'object_photo' => 'Photo',
  'object_photo_param_has_stickers_type_true' => 'Whether the photo has mask stickers attached to it',
  'object_photo_param_id_type_long' => 'ID',
  'object_photo_param_access_hash_type_long' => 'Access hash',
  'object_photo_param_date_type_int' => 'Date of upload',
  'object_photo_param_sizes_type_Vector t' => 'Sizes',
  'object_photoSizeEmpty' => 'Empty constructor. Image with this thumbnail is unavailable.',
  'object_photoSizeEmpty_param_type_type_string' => 'Thumbnail type (see. [photoSize](../constructors/photoSize.md))',
  'object_photoSize' => 'Image description.',
  'object_photoSize_param_type_type_string' => 'Thumbnail type',
  'object_photoSize_param_location_type_FileLocation' => 'File location',
  'object_photoSize_param_w_type_int' => 'Image width',
  'object_photoSize_param_h_type_int' => 'Image height',
  'object_photoSize_param_size_type_int' => 'File size',
  'object_photoCachedSize' => 'Description of an image and its content.',
  'object_photoCachedSize_param_type_type_string' => 'Thumbnail type',
  'object_photoCachedSize_param_location_type_FileLocation' => 'File location',
  'object_photoCachedSize_param_w_type_int' => 'Image width',
  'object_photoCachedSize_param_h_type_int' => 'Image height',
  'object_photoCachedSize_param_bytes_type_bytes' => 'Binary data, file content',
  'object_geoPointEmpty' => 'Empty constructor.',
  'object_geoPoint' => 'GeoPoint.',
  'object_geoPoint_param_long_type_double' => 'Longtitude',
  'object_geoPoint_param_lat_type_double' => 'Latitude',
  'object_auth.checkedPhone' => 'Checked phone',
  'object_auth.checkedPhone_param_phone_registered_type_Bool' => 'Phone registered?',
  'object_auth.sentCode' => 'Contains info about a sent verification code.',
  'object_auth.sentCode_param_phone_registered_type_true' => 'Phone registered?',
  'object_auth.sentCode_param_type_type_auth.SentCodeType' => 'Phone code type',
  'object_auth.sentCode_param_phone_code_hash_type_string' => 'Phone code hash, to be stored and later re-used with [auth.signIn](../methods/auth.signIn.md)',
  'object_auth.sentCode_param_next_type_type_auth.CodeType' => 'Phone code type that will be sent next, if the phone code is not received within `timeout` seconds: to send it use [auth.resendCode](../methods/auth.resendCode.md)',
  'object_auth.sentCode_param_timeout_type_int' => 'Timeout for reception of the phone code',
  'object_auth.authorization' => 'Contains user authorization info.',
  'object_auth.authorization_param_tmp_sessions_type_int' => 'Temporary [passport](https://core.telegram.org/passport) sessions',
  'object_auth.authorization_param_user_type_User' => 'Info on authorized user',
  'object_auth.exportedAuthorization' => 'Data for copying of authorization between data centres.',
  'object_auth.exportedAuthorization_param_id_type_int' => 'Current user identifier',
  'object_auth.exportedAuthorization_param_bytes_type_bytes' => 'Authorizes key',
  'object_inputNotifyPeer' => 'Notifications generated by a certain user or group.',
  'object_inputNotifyPeer_param_peer_type_InputPeer' => 'User or group',
  'object_inputNotifyUsers' => 'Notifications generated by all users.',
  'object_inputNotifyChats' => 'Notifications generated by all groups.',
  'object_inputNotifyAll' => 'Notify all',
  'object_inputPeerNotifyEventsEmpty' => 'Empty input peer notify events',
  'object_inputPeerNotifyEventsAll' => 'Peer notify events all',
  'object_inputPeerNotifySettings' => 'Notification settings.',
  'object_inputPeerNotifySettings_param_show_previews_type_true' => 'Show previews?',
  'object_inputPeerNotifySettings_param_silent_type_true' => 'Silent?',
  'object_inputPeerNotifySettings_param_mute_until_type_int' => 'Date until which all notifications shall be switched off',
  'object_inputPeerNotifySettings_param_sound_type_string' => 'Name of an audio file for notification',
  'object_peerNotifyEventsEmpty' => 'Empty peer notify events',
  'object_peerNotifyEventsAll' => 'Peer notify events all',
  'object_peerNotifySettingsEmpty' => 'Empty peer notify settings',
  'object_peerNotifySettings' => 'Notification settings.',
  'object_peerNotifySettings_param_show_previews_type_true' => 'Show previews?',
  'object_peerNotifySettings_param_silent_type_true' => 'Silent?',
  'object_peerNotifySettings_param_mute_until_type_int' => 'Mute all notifications until this date',
  'object_peerNotifySettings_param_sound_type_string' => 'Audio file name for notifications',
  'object_peerSettings' => 'Peer settings',
  'object_peerSettings_param_report_spam_type_true' => 'Whether we can still report the user for spam',
  'object_wallPaper' => 'Wallpaper settings.',
  'object_wallPaper_param_id_type_int' => 'ID',
  'object_wallPaper_param_title_type_string' => 'Title',
  'object_wallPaper_param_sizes_type_Vector t' => 'Sizes',
  'object_wallPaper_param_color_type_int' => 'Color',
  'object_wallPaperSolid' => 'Wall paper solid',
  'object_wallPaperSolid_param_id_type_int' => 'ID',
  'object_wallPaperSolid_param_title_type_string' => 'Title',
  'object_wallPaperSolid_param_bg_color_type_int' => 'Bg color',
  'object_wallPaperSolid_param_color_type_int' => 'Color',
  'object_inputReportReasonSpam' => 'Report for spam',
  'object_inputReportReasonViolence' => 'Report for violence',
  'object_inputReportReasonPornography' => 'Report for pornography',
  'object_inputReportReasonOther' => 'Other',
  'object_inputReportReasonOther_param_text_type_string' => 'Other report reason',
  'object_userFull' => 'Extended user info',
  'object_userFull_param_blocked_type_true' => 'Whether you have blocked this user',
  'object_userFull_param_phone_calls_available_type_true' => 'Whether this user can make VoIP calls',
  'object_userFull_param_phone_calls_private_type_true' => 'Whether this user\'s privacy settings allow you to call him',
  'object_userFull_param_user_type_User' => 'Remaining user info',
  'object_userFull_param_about_type_string' => 'Bio of the user',
  'object_userFull_param_link_type_contacts.Link' => 'Link',
  'object_userFull_param_profile_photo_type_Photo' => 'Profile photo',
  'object_userFull_param_notify_settings_type_PeerNotifySettings' => 'Notification settings',
  'object_userFull_param_bot_info_type_BotInfo' => 'For bots, info about the bot (bot commands, etc)',
  'object_userFull_param_common_chats_count_type_int' => 'Chats in common with this user',
  'object_contact' => 'A contact of the current user that is registered in the system.',
  'object_contact_param_user_id_type_int' => 'User identifier',
  'object_contact_param_mutual_type_Bool' => 'Current user is in the user\'s contact list',
  'object_importedContact' => 'Successfully imported contact.',
  'object_importedContact_param_user_id_type_int' => 'User identifier',
  'object_importedContact_param_client_id_type_long' => 'The contact\'s client identifier (passed to one of the [InputContact](../types/InputContact.md) constructors)',
  'object_contactBlocked' => 'A blocked user.',
  'object_contactBlocked_param_user_id_type_int' => 'User identifier',
  'object_contactBlocked_param_date_type_int' => 'Date blacklisted',
  'object_contactStatus' => 'Contact status: online / offline.',
  'object_contactStatus_param_user_id_type_int' => 'User identifier',
  'object_contactStatus_param_status_type_UserStatus' => 'Online status',
  'object_contacts.link' => 'Link',
  'object_contacts.link_param_my_link_type_ContactLink' => 'My link',
  'object_contacts.link_param_foreign_link_type_ContactLink' => 'Foreign link',
  'object_contacts.link_param_user_type_User' => 'User',
  'object_contacts.contactsNotModified' => 'Contact list on the server is the same as the list on the client.',
  'object_contacts.contacts' => 'The current user\'s contact list and info on users.',
  'object_contacts.contacts_param_contacts_type_Vector t' => 'Contacts',
  'object_contacts.contacts_param_saved_count_type_int' => 'Number of contacts that were saved successfully',
  'object_contacts.contacts_param_users_type_Vector t' => 'Users',
  'object_contacts.importedContacts' => 'Info on succesfully imported contacts.',
  'object_contacts.importedContacts_param_imported_type_Vector t' => 'Imported',
  'object_contacts.importedContacts_param_popular_invites_type_Vector t' => 'Popular invites',
  'object_contacts.importedContacts_param_retry_contacts_type_Vector t' => 'Retry importing contacts whose client IDs appear here',
  'object_contacts.importedContacts_param_users_type_Vector t' => 'Users',
  'object_contacts.blocked' => 'Full list of blocked users.',
  'object_contacts.blocked_param_blocked_type_Vector t' => 'Blocked',
  'object_contacts.blocked_param_users_type_Vector t' => 'Users',
  'object_contacts.blockedSlice' => 'Incomplete list of blocked users.',
  'object_contacts.blockedSlice_param_count_type_int' => 'Total number of elements in the list',
  'object_contacts.blockedSlice_param_blocked_type_Vector t' => 'Blocked',
  'object_contacts.blockedSlice_param_users_type_Vector t' => 'Users',
  'object_messages.dialogs' => 'Full list of chats with messages and auxiliary data.',
  'object_messages.dialogs_param_dialogs_type_Vector t' => 'Dialogs',
  'object_messages.dialogs_param_messages_type_Vector t' => 'Messages',
  'object_messages.dialogs_param_chats_type_Vector t' => 'Chats',
  'object_messages.dialogs_param_users_type_Vector t' => 'Users',
  'object_messages.dialogsSlice' => 'Incomplete list of dialogs with messages and auxiliary data.',
  'object_messages.dialogsSlice_param_count_type_int' => 'Total number of dialogs',
  'object_messages.dialogsSlice_param_dialogs_type_Vector t' => 'Dialogs',
  'object_messages.dialogsSlice_param_messages_type_Vector t' => 'Messages',
  'object_messages.dialogsSlice_param_chats_type_Vector t' => 'Chats',
  'object_messages.dialogsSlice_param_users_type_Vector t' => 'Users',
  'object_messages.messages' => 'Full list of messages with auxilary data.',
  'object_messages.messages_param_messages_type_Vector t' => 'Messages',
  'object_messages.messages_param_chats_type_Vector t' => 'Chats',
  'object_messages.messages_param_users_type_Vector t' => 'Users',
  'object_messages.messagesSlice' => 'Incomplete list of messages and auxiliary data.',
  'object_messages.messagesSlice_param_count_type_int' => 'Total number of messages in the list',
  'object_messages.messagesSlice_param_messages_type_Vector t' => 'Messages',
  'object_messages.messagesSlice_param_chats_type_Vector t' => 'Chats',
  'object_messages.messagesSlice_param_users_type_Vector t' => 'Users',
  'object_messages.channelMessages' => 'Channel messages',
  'object_messages.channelMessages_param_pts_type_int' => '[Event count after generation](https://core.telegram.org/api/updates)',
  'object_messages.channelMessages_param_count_type_int' => 'Total number of results were found server-side (may not be all included here)',
  'object_messages.channelMessages_param_messages_type_Vector t' => 'Messages',
  'object_messages.channelMessages_param_chats_type_Vector t' => 'Chats',
  'object_messages.channelMessages_param_users_type_Vector t' => 'Users',
  'object_messages.messagesNotModified' => 'No new messages matching the query were found',
  'object_messages.messagesNotModified_param_count_type_int' => 'Number of results found server-side by the given query',
  'object_messages.chats' => 'List of chats with auxiliary data.',
  'object_messages.chats_param_chats_type_Vector t' => 'Chats',
  'object_messages.chatsSlice' => 'Partial list of chats, more would have to be fetched with [pagination](https://core.telegram.org/api/offsets)',
  'object_messages.chatsSlice_param_count_type_int' => 'Total number of results that were found server-side (not all are included in `chats`)',
  'object_messages.chatsSlice_param_chats_type_Vector t' => 'Chats',
  'object_messages.chatFull' => 'Extended info on chat and auxiliary data.',
  'object_messages.chatFull_param_full_chat_type_ChatFull' => 'Extended info on a chat',
  'object_messages.chatFull_param_chats_type_Vector t' => 'Chats',
  'object_messages.chatFull_param_users_type_Vector t' => 'Users',
  'object_messages.affectedHistory' => 'Affected part of communication history with the user or in a chat.',
  'object_messages.affectedHistory_param_pts_type_int' => 'Number of events occured in a text box',
  'object_messages.affectedHistory_param_pts_count_type_int' => 'Number of affected events',
  'object_messages.affectedHistory_param_offset_type_int' => 'If a parameter contains positive value, it is necessary to repeat the method call using the given value; during the proceeding of all the history the value itself shall gradually decrease',
  'object_inputMessagesFilterEmpty' => 'Filter is absent.',
  'object_inputMessagesFilterPhotos' => 'Filter for messages containing photos.',
  'object_inputMessagesFilterVideo' => 'Filter for messages containing videos.',
  'object_inputMessagesFilterPhotoVideo' => 'Filter for messages containing photos or videos.',
  'object_inputMessagesFilterDocument' => 'Filter for messages containing documents.',
  'object_inputMessagesFilterUrl' => 'Return only messages containing URLs',
  'object_inputMessagesFilterGif' => 'Return only messages containing gifs',
  'object_inputMessagesFilterVoice' => 'Return only messages containing voice notes',
  'object_inputMessagesFilterMusic' => 'Return only messages containing audio files',
  'object_inputMessagesFilterChatPhotos' => 'Return only chat photo changes',
  'object_inputMessagesFilterPhoneCalls' => 'Return only phone calls',
  'object_inputMessagesFilterPhoneCalls_param_missed_type_true' => 'Return only missed phone calls',
  'object_inputMessagesFilterRoundVoice' => 'Return only round videos and voice notes',
  'object_inputMessagesFilterRoundVideo' => 'Return only round videos',
  'object_inputMessagesFilterMyMentions' => 'Return only messages where the current user was mentioned',
  'object_inputMessagesFilterGeo' => 'Return only messages containing geolocations',
  'object_inputMessagesFilterContacts' => 'Return only messages containing contacts',
  'object_updateNewMessage' => 'New message.',
  'object_updateNewMessage_param_message_type_Message' => 'Message',
  'object_updateNewMessage_param_pts_type_int' => 'New quantity of actions in a message box',
  'object_updateNewMessage_param_pts_count_type_int' => 'Number of generated events',
  'object_updateMessageID' => 'Sent message with **random\\_id** client identifier was assigned an identifier.',
  'object_updateMessageID_param_id_type_int' => '**id** identifier of a respective [Message](../types/Message.md)',
  'object_updateDeleteMessages' => 'Messages were deleted.',
  'object_updateDeleteMessages_param_messages_type_Vector t' => 'Messages',
  'object_updateDeleteMessages_param_pts_type_int' => 'New quality of actions in a message box',
  'object_updateDeleteMessages_param_pts_count_type_int' => 'Number of generated [events](https://core.telegram.org/api/updates)',
  'object_updateUserTyping' => 'The user is preparing a message; typing, recording, uploading, etc. This update is valid for 6 seconds. If no repeated update received after 6 seconds, it should be considered that the user stopped doing whatever he\'s been doing.',
  'object_updateUserTyping_param_user_id_type_int' => 'User id',
  'object_updateUserTyping_param_action_type_SendMessageAction' => 'Action type<br>Param added in [Layer 17](https://core.telegram.org/api/layers#layer-17).',
  'object_updateChatUserTyping' => 'The user is preparing a message in a group; typing, recording, uploading, etc. This update is valid for 6 seconds. If no repeated update received after 6 seconds, it should be considered that the user stopped doing whatever he\'s been doing.',
  'object_updateChatUserTyping_param_chat_id_type_int' => 'Group id',
  'object_updateChatUserTyping_param_user_id_type_int' => 'User id',
  'object_updateChatUserTyping_param_action_type_SendMessageAction' => 'Type of action<br>Parameter added in [Layer 17](https://core.telegram.org/api/layers#layer-17).',
  'object_updateChatParticipants' => 'Composition of chat participants changed.',
  'object_updateChatParticipants_param_participants_type_ChatParticipants' => 'Updated chat participants',
  'object_updateUserName' => 'Changes the user\'s first name, last name and username.',
  'object_updateUserName_param_user_id_type_int' => 'User identifier',
  'object_updateUserName_param_first_name_type_string' => 'New first name. Corresponds to the new value of **real\\_first\\_name** field of the [userFull](../constructors/userFull.md) constructor.',
  'object_updateUserName_param_last_name_type_string' => 'New last name. Corresponds to the new value of **real\\_last\\_name** field of the [userFull](../constructors/userFull.md) constructor.',
  'object_updateUserName_param_username_type_string' => 'New username.<br>Parameter added in [Layer 18](https://core.telegram.org/api/layers#layer-18).',
  'object_updateUserPhoto' => 'Change of contact\'s profile photo.',
  'object_updateUserPhoto_param_user_id_type_int' => 'User identifier',
  'object_updateUserPhoto_param_date_type_int' => 'Date of photo update.<br>Parameter was added in [second layer](?layer=2).',
  'object_updateUserPhoto_param_photo_type_UserProfilePhoto' => 'New profile photo',
  'object_updateUserPhoto_param_previous_type_Bool' => '([boolTrue](../constructors/boolTrue.md)), if one of the previously used photos is set a profile photo.<br>Parameter was added in [second layer](?layer=2).',
  'object_updateContactRegistered' => 'Update contact registered',
  'object_updateContactRegistered_param_user_id_type_int' => 'User ID',
  'object_updateContactRegistered_param_date_type_int' => 'Date',
  'object_updateContactLink' => 'Update contact link',
  'object_updateContactLink_param_user_id_type_int' => 'User ID',
  'object_updateContactLink_param_my_link_type_ContactLink' => 'My link',
  'object_updateContactLink_param_foreign_link_type_ContactLink' => 'Foreign link',
  'object_updateNewEncryptedMessage' => 'New encrypted message.',
  'object_updateNewEncryptedMessage_param_message_type_EncryptedMessage' => 'Message',
  'object_updateNewEncryptedMessage_param_qts_type_int' => 'New **qts** value',
  'object_updateEncryptedChatTyping' => 'Interlocutor is typing a message in an encrypted chat. Update period is 6 second. If upon this time there is no repeated update, it shall be considered that the interlocutor stopped typing.',
  'object_updateEncryptedChatTyping_param_chat_id_type_int' => 'Chat ID',
  'object_updateEncryption' => 'Change of state in an encrypted chat.',
  'object_updateEncryption_param_chat_type_EncryptedChat' => 'Encrypted chat',
  'object_updateEncryption_param_date_type_int' => 'Date of change',
  'object_updateEncryptedMessagesRead' => 'Communication history in an encrypted chat was marked as read.',
  'object_updateEncryptedMessagesRead_param_chat_id_type_int' => 'Chat ID',
  'object_updateEncryptedMessagesRead_param_max_date_type_int' => 'Maximum value of data for read messages',
  'object_updateEncryptedMessagesRead_param_date_type_int' => 'Time when messages were read',
  'object_updateChatParticipantAdd' => 'New group member.',
  'object_updateChatParticipantAdd_param_chat_id_type_int' => 'Group ID',
  'object_updateChatParticipantAdd_param_user_id_type_int' => 'ID of the new member',
  'object_updateChatParticipantAdd_param_inviter_id_type_int' => 'ID of the user, who added member to the group',
  'object_updateChatParticipantAdd_param_date_type_int' => 'When was the participant added',
  'object_updateChatParticipantAdd_param_version_type_int' => 'Chat version number',
  'object_updateChatParticipantDelete' => 'A member has left the group.',
  'object_updateChatParticipantDelete_param_chat_id_type_int' => 'Group ID',
  'object_updateChatParticipantDelete_param_user_id_type_int' => 'ID of the user',
  'object_updateChatParticipantDelete_param_version_type_int' => 'Used in basic groups to reorder updates and make sure that all of them was received.',
  'object_updateDcOptions' => 'Changes in the data center configuration options.',
  'object_updateDcOptions_param_dc_options_type_Vector t' => 'DC options',
  'object_updateUserBlocked' => 'User was added to the blacklist (method [contacts.block](../methods/contacts.block.md)) or removed from the blacklist (method [contacts.unblock](../methods/contacts.unblock.md)).',
  'object_updateUserBlocked_param_user_id_type_int' => 'User id',
  'object_updateUserBlocked_param_blocked_type_Bool' => '([boolTrue](../constructors/boolTrue.md)) if the the user is blocked',
  'object_updateNotifySettings' => 'Changes in notification settings.',
  'object_updateNotifySettings_param_peer_type_NotifyPeer' => 'Nofication source',
  'object_updateNotifySettings_param_notify_settings_type_PeerNotifySettings' => 'New notification settings',
  'object_updateServiceNotification' => 'A service message for the user.

The app must show the message to the user upon receiving this update. In case the **popup** parameter was passed, the text message must be displayed in a popup alert immediately upon receipt. It is recommended to handle the text as you would an ordinary message in terms of highlighting links, etc. The message must also be stored locally as part of the message history with the user id `777000` (Telegram Notifications).',
  'object_updateServiceNotification_param_popup_type_true' => '(boolTrue) if the message must be displayed in a popup.',
  'object_updateServiceNotification_param_inbox_date_type_int' => 'When was the notification received<br>The message must also be stored locally as part of the message history with the user id `777000` (Telegram Notifications).',
  'object_updateServiceNotification_param_type_type_string' => 'String, identical in format and contents to the [**type**](https://core.telegram.org/api/errors#error-type) field in API errors. Describes type of service message. It is acceptable to ignore repeated messages of the same **type** within a short period of time (15 minutes).',
  'object_updateServiceNotification_param_message_type_string' => 'Message text',
  'object_updateServiceNotification_param_media_type_MessageMedia' => 'Media content (optional)',
  'object_updateServiceNotification_param_entities_type_Vector t' => 'Entities',
  'object_updatePrivacy' => 'Privacy rules were changed',
  'object_updatePrivacy_param_key_type_PrivacyKey' => 'Peers to which the privacy rules apply',
  'object_updatePrivacy_param_rules_type_Vector t' => 'Rules',
  'object_updateUserPhone' => 'A user\'s phone number was changed',
  'object_updateUserPhone_param_user_id_type_int' => 'User ID',
  'object_updateUserPhone_param_phone_type_string' => 'New phone number',
  'object_updateReadHistoryInbox' => 'Incoming messages were read',
  'object_updateReadHistoryInbox_param_peer_type_Peer' => 'Peer',
  'object_updateReadHistoryInbox_param_max_id_type_int' => 'Maximum ID of messages read',
  'object_updateReadHistoryInbox_param_pts_type_int' => '[Event count after generation](https://core.telegram.org/api/updates)',
  'object_updateReadHistoryInbox_param_pts_count_type_int' => '[Number of events that were generated](https://core.telegram.org/api/updates)',
  'object_updateReadHistoryOutbox' => 'Outgoing messages were read',
  'object_updateReadHistoryOutbox_param_peer_type_Peer' => 'Peer',
  'object_updateReadHistoryOutbox_param_max_id_type_int' => 'Maximum ID of read outgoing messages',
  'object_updateReadHistoryOutbox_param_pts_type_int' => '[Event count after generation](https://core.telegram.org/api/updates)',
  'object_updateReadHistoryOutbox_param_pts_count_type_int' => '[Number of events that were generated](https://core.telegram.org/api/updates)',
  'object_updateWebPage' => 'An [instant view](https://instantview.telegram.org) webpage preview was generated',
  'object_updateWebPage_param_webpage_type_WebPage' => 'Webpage preview',
  'object_updateWebPage_param_pts_type_int' => '[Event count after generation](https://core.telegram.org/api/updates)',
  'object_updateWebPage_param_pts_count_type_int' => '[Number of events that were generated](https://core.telegram.org/api/updates)',
  'object_updateReadMessagesContents' => 'Contents of messages in the common [message box](https://core.telegram.org/api/updates) were read',
  'object_updateReadMessagesContents_param_messages_type_Vector t' => 'Messages',
  'object_updateReadMessagesContents_param_pts_type_int' => '[Event count after generation](https://core.telegram.org/api/updates)',
  'object_updateReadMessagesContents_param_pts_count_type_int' => '[Number of events that were generated](https://core.telegram.org/api/updates)',
  'object_updateChannelTooLong' => 'There are new updates in the specified channel, the client must fetch them, eventually starting the specified pts if the difference is too long or if the channel isn\'t currently in the states.',
  'object_updateChannelTooLong_param_channel_id_type_int' => 'The channel',
  'object_updateChannelTooLong_param_pts_type_int' => 'The [PTS](https://core.telegram.org/api/updates).',
  'object_updateChannel' => 'A new channel is available',
  'object_updateChannel_param_channel_id_type_int' => 'Channel ID',
  'object_updateNewChannelMessage' => 'A new message was sent in a [channel/supergroup](https://core.telegram.org/api/channel)',
  'object_updateNewChannelMessage_param_message_type_Message' => 'New message',
  'object_updateNewChannelMessage_param_pts_type_int' => '[Event count after generation](https://core.telegram.org/api/updates)',
  'object_updateNewChannelMessage_param_pts_count_type_int' => '[Number of events that were generated](https://core.telegram.org/api/updates)',
  'object_updateReadChannelInbox' => 'Incoming messages in a [channel/supergroup](https://core.telegram.org/api/channel) were read',
  'object_updateReadChannelInbox_param_channel_id_type_int' => 'Channel/supergroup ID',
  'object_updateReadChannelInbox_param_max_id_type_int' => 'Position up to which all incoming messages are read.',
  'object_updateDeleteChannelMessages' => 'Some messages in a [supergroup/channel](https://core.telegram.org/api/channel) were deleted',
  'object_updateDeleteChannelMessages_param_channel_id_type_int' => 'Channel ID',
  'object_updateDeleteChannelMessages_param_messages_type_Vector t' => 'Messages',
  'object_updateDeleteChannelMessages_param_pts_type_int' => '[Event count after generation](https://core.telegram.org/api/updates)',
  'object_updateDeleteChannelMessages_param_pts_count_type_int' => '[Number of events that were generated](https://core.telegram.org/api/updates)',
  'object_updateChannelMessageViews' => 'The view counter of a message in a channel has changed',
  'object_updateChannelMessageViews_param_channel_id_type_int' => 'Channel ID',
  'object_updateChannelMessageViews_param_id_type_int' => 'ID of the message',
  'object_updateChannelMessageViews_param_views_type_int' => 'New view counter',
  'object_updateChatAdmins' => 'Update chat admins',
  'object_updateChatAdmins_param_chat_id_type_int' => 'Chat ID',
  'object_updateChatAdmins_param_enabled_type_Bool' => 'Enabled?',
  'object_updateChatAdmins_param_version_type_int' => 'Version',
  'object_updateChatParticipantAdmin' => 'Admin permissions of a user in a [legacy group](https://core.telegram.org/api/channel) were changed',
  'object_updateChatParticipantAdmin_param_chat_id_type_int' => 'Chat ID',
  'object_updateChatParticipantAdmin_param_user_id_type_int' => 'ID of the (de)admined user',
  'object_updateChatParticipantAdmin_param_is_admin_type_Bool' => 'Whether the user was rendered admin',
  'object_updateChatParticipantAdmin_param_version_type_int' => 'Used in basic groups to reorder updates and make sure that all of them was received.',
  'object_updateNewStickerSet' => 'A new stickerset was installed',
  'object_updateNewStickerSet_param_stickerset_type_messages.StickerSet' => 'The installed stickerset',
  'object_updateStickerSetsOrder' => 'The order of stickersets was changed',
  'object_updateStickerSetsOrder_param_masks_type_true' => 'Whether the updated stickers are mask stickers',
  'object_updateStickerSetsOrder_param_order_type_Vector t' => 'Order',
  'object_updateStickerSets' => 'Installed stickersets have changed, the client should refetch them using [messages.getAllStickers](https://core.telegram.org/method/messages.getAllStickers)',
  'object_updateSavedGifs' => 'The saved gif list has changed, the client should refetch it using [messages.getSavedGifs](https://core.telegram.org/method/messages.getSavedGifs)',
  'object_updateBotInlineQuery' => 'An incoming inline query',
  'object_updateBotInlineQuery_param_query_id_type_long' => 'Query ID',
  'object_updateBotInlineQuery_param_user_id_type_int' => 'User that sent the query',
  'object_updateBotInlineQuery_param_query_type_string' => 'Text of query',
  'object_updateBotInlineQuery_param_geo_type_GeoPoint' => 'Attached geolocation',
  'object_updateBotInlineQuery_param_offset_type_string' => 'Offset to navigate through results',
  'object_updateBotInlineSend' => 'The result of an inline query that was chosen by a user and sent to their chat partner. Please see our documentation on the [feedback collecting](https://core.telegram.org/bots/inline#collecting-feedback) for details on how to enable these updates for your bot.',
  'object_updateBotInlineSend_param_user_id_type_int' => 'The user that chose the result',
  'object_updateBotInlineSend_param_query_type_string' => 'The query that was used to obtain the result',
  'object_updateBotInlineSend_param_geo_type_GeoPoint' => 'Optional. Sender location, only for bots that require user location',
  'object_updateBotInlineSend_param_id_type_string' => 'The unique identifier for the result that was chosen',
  'object_updateBotInlineSend_param_msg_id_type_InputBotInlineMessageID' => 'Identifier of the sent inline message. Available only if there is an inline keyboard attached to the message. Will be also received in callback queries and can be used to edit the message.',
  'object_updateEditChannelMessage' => 'A message was edited in a [channel/supergroup](https://core.telegram.org/api/channel)',
  'object_updateEditChannelMessage_param_message_type_Message' => 'The new message',
  'object_updateEditChannelMessage_param_pts_type_int' => '[Event count after generation](https://core.telegram.org/api/updates)',
  'object_updateEditChannelMessage_param_pts_count_type_int' => '[Number of events that were generated](https://core.telegram.org/api/updates)',
  'object_updateChannelPinnedMessage' => 'A message was pinned in a [channel/supergroup](https://core.telegram.org/api/channel).',
  'object_updateChannelPinnedMessage_param_channel_id_type_int' => 'Channel/supergroup ID',
  'object_updateChannelPinnedMessage_param_id_type_int' => 'ID of pinned message',
  'object_updateBotCallbackQuery' => 'A callback button was pressed, and the button data was sent to the bot that created the button',
  'object_updateBotCallbackQuery_param_query_id_type_long' => 'Query ID',
  'object_updateBotCallbackQuery_param_user_id_type_int' => 'ID of the user that pressed the button',
  'object_updateBotCallbackQuery_param_peer_type_Peer' => 'Chat where the inline keyboard was sent',
  'object_updateBotCallbackQuery_param_msg_id_type_int' => 'Message ID',
  'object_updateBotCallbackQuery_param_chat_instance_type_long' => 'Global identifier, uniquely corresponding to the chat to which the message with the callback button was sent. Useful for high scores in games.',
  'object_updateBotCallbackQuery_param_data_type_bytes' => 'Callback data',
  'object_updateBotCallbackQuery_param_game_short_name_type_string' => 'Short name of a Game to be returned, serves as the unique identifier for the game',
  'object_updateEditMessage' => 'A message was edited',
  'object_updateEditMessage_param_message_type_Message' => 'The new edited message',
  'object_updateEditMessage_param_pts_type_int' => '[PTS](https://core.telegram.org/api/updates)',
  'object_updateEditMessage_param_pts_count_type_int' => '[PTS count](https://core.telegram.org/api/updates)',
  'object_updateInlineBotCallbackQuery' => 'This notification is received by bots when a button is pressed',
  'object_updateInlineBotCallbackQuery_param_query_id_type_long' => 'Query ID',
  'object_updateInlineBotCallbackQuery_param_user_id_type_int' => 'ID of the user that pressed the button',
  'object_updateInlineBotCallbackQuery_param_msg_id_type_InputBotInlineMessageID' => 'ID of the inline message with the button',
  'object_updateInlineBotCallbackQuery_param_chat_instance_type_long' => 'Global identifier, uniquely corresponding to the chat to which the message with the callback button was sent. Useful for high scores in games.',
  'object_updateInlineBotCallbackQuery_param_data_type_bytes' => 'Data associated with the callback button. Be aware that a bad client can send arbitrary data in this field.',
  'object_updateInlineBotCallbackQuery_param_game_short_name_type_string' => 'Short name of a Game to be returned, serves as the unique identifier for the game',
  'object_updateReadChannelOutbox' => 'Outgoing messages in a [channel/supergroup](https://core.telegram.org/api/channel) were read',
  'object_updateReadChannelOutbox_param_channel_id_type_int' => 'Channel/supergroup ID',
  'object_updateReadChannelOutbox_param_max_id_type_int' => 'Position up to which all outgoing messages are read.',
  'object_updateDraftMessage' => 'Notifies a change of a message [draft](https://core.telegram.org/api/drafts).',
  'object_updateDraftMessage_param_peer_type_Peer' => 'The peer to which the draft is associated',
  'object_updateDraftMessage_param_draft_type_DraftMessage' => 'The draft',
  'object_updateReadFeaturedStickers' => 'Some featured stickers were marked as read',
  'object_updateRecentStickers' => 'The recent sticker list was updated',
  'object_updateConfig' => 'The server-side configuration has changed; the client should re-fetch the config using [help.getConfig](../methods/help.getConfig.md)',
  'object_updatePtsChanged' => '[Common message box sequence PTS](https://core.telegram.org/api/updates) has changed, [state has to be refetched using updates.getState](https://core.telegram.org/api/updates#fetching-state)',
  'object_updateChannelWebPage' => 'A webpage preview of a link in a [channel/supergroup](https://core.telegram.org/api/channel) message was generated',
  'object_updateChannelWebPage_param_channel_id_type_int' => '[Channel/supergroup](https://core.telegram.org/api/channel) ID',
  'object_updateChannelWebPage_param_webpage_type_WebPage' => 'Generated webpage preview',
  'object_updateChannelWebPage_param_pts_type_int' => '[Event count after generation](https://core.telegram.org/api/updates)',
  'object_updateChannelWebPage_param_pts_count_type_int' => '[Number of events that were generated](https://core.telegram.org/api/updates)',
  'object_updateDialogPinned' => 'A dialog was pinned/unpinned',
  'object_updateDialogPinned_param_pinned_type_true' => 'Whether the dialog was pinned',
  'object_updateDialogPinned_param_peer_type_Peer' => 'Peer',
  'object_updatePinnedDialogs' => 'Pinned dialogs were updated',
  'object_updatePinnedDialogs_param_order_type_Vector t' => 'Order',
  'object_updateBotWebhookJSON' => 'A new incoming event; for bots only',
  'object_updateBotWebhookJSON_param_data_type_DataJSON' => 'The event',
  'object_updateBotWebhookJSONQuery' => 'A new incoming query; for bots only',
  'object_updateBotWebhookJSONQuery_param_query_id_type_long' => 'Query identifier',
  'object_updateBotWebhookJSONQuery_param_data_type_DataJSON' => 'Query data',
  'object_updateBotWebhookJSONQuery_param_timeout_type_int' => 'Query timeout',
  'object_updateBotShippingQuery' => 'This object contains information about an incoming shipping query.',
  'object_updateBotShippingQuery_param_query_id_type_long' => 'Unique query identifier',
  'object_updateBotShippingQuery_param_user_id_type_int' => 'User who sent the query',
  'object_updateBotShippingQuery_param_payload_type_bytes' => 'Bot specified invoice payload',
  'object_updateBotShippingQuery_param_shipping_address_type_PostAddress' => 'User specified shipping address',
  'object_updateBotPrecheckoutQuery' => 'This object contains information about an incoming pre-checkout query.',
  'object_updateBotPrecheckoutQuery_param_query_id_type_long' => 'Unique query identifier',
  'object_updateBotPrecheckoutQuery_param_user_id_type_int' => 'User who sent the query',
  'object_updateBotPrecheckoutQuery_param_payload_type_bytes' => 'Bot specified invoice payload',
  'object_updateBotPrecheckoutQuery_param_info_type_PaymentRequestedInfo' => 'Order info provided by the user',
  'object_updateBotPrecheckoutQuery_param_shipping_option_id_type_string' => 'Identifier of the shipping option chosen by the user',
  'object_updateBotPrecheckoutQuery_param_currency_type_string' => 'Three-letter ISO 4217 [currency](https://core.telegram.org/bots/payments#supported-currencies) code',
  'object_updateBotPrecheckoutQuery_param_total_amount_type_long' => 'Total amount in the smallest units of the currency (integer, not float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).',
  'object_updatePhoneCall' => 'An incoming phone call',
  'object_updatePhoneCall_param_phone_call_type_PhoneCall' => 'Phone call',
  'object_updateLangPackTooLong' => 'A language pack has changed, the client should manually fetch the changed strings using [langpack.getDifference](../methods/langpack.getDifference.md)',
  'object_updateLangPack' => 'Language pack updated',
  'object_updateLangPack_param_difference_type_LangPackDifference' => 'Changed strings',
  'object_updateFavedStickers' => 'The list of favorited stickers was changed, the client should call [messages.getFavedStickers](../methods/messages.getFavedStickers.md) to refetch the new list',
  'object_updateChannelReadMessagesContents' => 'The specified [channel/supergroup](https://core.telegram.org/api/channel) messages were read',
  'object_updateChannelReadMessagesContents_param_channel_id_type_int' => '[Channel/supergroup](https://core.telegram.org/api/channel) ID',
  'object_updateChannelReadMessagesContents_param_messages_type_Vector t' => 'Messages',
  'object_updateContactsReset' => 'All contacts were deleted',
  'object_updateChannelAvailableMessages' => 'The history of a [channel/supergroup](https://core.telegram.org/api/channel) was hidden.',
  'object_updateChannelAvailableMessages_param_channel_id_type_int' => 'Channel/supergroup ID',
  'object_updateChannelAvailableMessages_param_available_min_id_type_int' => 'Identifier of a maximum unavailable message in a channel due to hidden history.',
  'object_updates.state' => 'Updates state.',
  'object_updates.state_param_pts_type_int' => 'Number of events occured in a text box',
  'object_updates.state_param_qts_type_int' => 'Position in a sequence of updates in secret chats. For further detailes refer to article [secret chats](https://core.telegram.org/api/end-to-end)<br>Parameter was added in [eigth layer](https://core.telegram.org/api/layers#layer-8).',
  'object_updates.state_param_date_type_int' => 'Date of condition',
  'object_updates.state_param_seq_type_int' => 'Number of sent updates',
  'object_updates.state_param_unread_count_type_int' => 'Number of unread messages',
  'object_updates.differenceEmpty' => 'No events.',
  'object_updates.differenceEmpty_param_date_type_int' => 'Current date',
  'object_updates.differenceEmpty_param_seq_type_int' => 'Number of sent updates',
  'object_updates.difference' => 'Full list of occurred events.',
  'object_updates.difference_param_new_messages_type_Vector t' => 'New messages',
  'object_updates.difference_param_new_encrypted_messages_type_Vector t' => 'New encrypted messages',
  'object_updates.difference_param_other_updates_type_Vector t' => 'Other updates',
  'object_updates.difference_param_chats_type_Vector t' => 'Chats',
  'object_updates.difference_param_users_type_Vector t' => 'Users',
  'object_updates.difference_param_state_type_updates.State' => 'Current state',
  'object_updates.differenceSlice' => 'Incomplete list of occurred events.',
  'object_updates.differenceSlice_param_new_messages_type_Vector t' => 'New messages',
  'object_updates.differenceSlice_param_new_encrypted_messages_type_Vector t' => 'New encrypted messages',
  'object_updates.differenceSlice_param_other_updates_type_Vector t' => 'Other updates',
  'object_updates.differenceSlice_param_chats_type_Vector t' => 'Chats',
  'object_updates.differenceSlice_param_users_type_Vector t' => 'Users',
  'object_updates.differenceSlice_param_intermediate_state_type_updates.State' => 'Intermediary state',
  'object_updates.differenceTooLong' => 'The difference is [too long](https://core.telegram.org/api/updates#recovering-gaps), and the specified state must be used to refetch updates.',
  'object_updates.differenceTooLong_param_pts_type_int' => 'The new state to use.',
  'object_updatesTooLong' => 'Too many updates, it is necessary to execute [updates.getDifference](../methods/updates.getDifference.md).',
  'object_updateShortMessage' => 'Info about a message sent to (received from) another user',
  'object_updateShortMessage_param_out_type_true' => 'Whether the message is outgoing',
  'object_updateShortMessage_param_mentioned_type_true' => 'Whether we were mentioned in the message',
  'object_updateShortMessage_param_media_unread_type_true' => 'Whether there are some **unread** mentions in this message',
  'object_updateShortMessage_param_silent_type_true' => 'If true, the message is a silent message, no notifications should be triggered',
  'object_updateShortMessage_param_id_type_int' => 'The message ID',
  'object_updateShortMessage_param_user_id_type_int' => 'The ID of the sender (if `outgoing` will be the ID of the destination) of the message',
  'object_updateShortMessage_param_message_type_string' => 'The message',
  'object_updateShortMessage_param_pts_type_int' => '[PTS](https://core.telegram.org/api/updates)',
  'object_updateShortMessage_param_pts_count_type_int' => '[PTS count](https://core.telegram.org/api/updates)',
  'object_updateShortMessage_param_date_type_int' => '[date](https://core.telegram.org/api/updates)',
  'object_updateShortMessage_param_fwd_from_type_MessageFwdHeader' => 'Info about a forwarded message',
  'object_updateShortMessage_param_via_bot_id_type_int' => 'Info about the inline bot used to generate this message',
  'object_updateShortMessage_param_reply_to_msg_id_type_int' => 'ID of the message this message replies to',
  'object_updateShortMessage_param_entities_type_Vector t' => 'Entities',
  'object_updateShortChatMessage' => 'Shortened constructor containing info on one new incoming text message from a chat',
  'object_updateShortChatMessage_param_out_type_true' => 'Whether the message is outgoing',
  'object_updateShortChatMessage_param_mentioned_type_true' => 'Whether we were mentioned in this message',
  'object_updateShortChatMessage_param_media_unread_type_true' => 'Whether the message contains some **unread** mentions',
  'object_updateShortChatMessage_param_silent_type_true' => 'If true, the message is a silent message, no notifications should be triggered',
  'object_updateShortChatMessage_param_id_type_int' => 'ID of the message',
  'object_updateShortChatMessage_param_from_id_type_int' => 'ID of the sender of the message',
  'object_updateShortChatMessage_param_chat_id_type_int' => 'ID of the chat where the message was sent',
  'object_updateShortChatMessage_param_message_type_string' => 'Message',
  'object_updateShortChatMessage_param_pts_type_int' => '[PTS](https://core.telegram.org/api/updates)',
  'object_updateShortChatMessage_param_pts_count_type_int' => '[PTS count](https://core.telegram.org/api/updates)',
  'object_updateShortChatMessage_param_date_type_int' => '[date](https://core.telegram.org/api/updates)',
  'object_updateShortChatMessage_param_fwd_from_type_MessageFwdHeader' => 'Info about a forwarded message',
  'object_updateShortChatMessage_param_via_bot_id_type_int' => 'Info about the inline bot used to generate this message',
  'object_updateShortChatMessage_param_reply_to_msg_id_type_int' => 'ID of the message this message replies to',
  'object_updateShortChatMessage_param_entities_type_Vector t' => 'Entities',
  'object_updateShort' => 'Shortened constructor containing info on one update not requiring auxiliary data',
  'object_updateShort_param_update_type_Update' => 'Update',
  'object_updateShort_param_date_type_int' => 'Date of event',
  'object_updatesCombined' => 'Constructor for a group of updates.',
  'object_updatesCombined_param_updates_type_Vector t' => 'Updates',
  'object_updatesCombined_param_users_type_Vector t' => 'Users',
  'object_updatesCombined_param_chats_type_Vector t' => 'Chats',
  'object_updatesCombined_param_date_type_int' => 'Current date',
  'object_updatesCombined_param_seq_start_type_int' => 'Value **seq** for the earliest update in a group',
  'object_updatesCombined_param_seq_type_int' => 'Value **seq** for the latest update in a group',
  'object_updates' => 'Full constructor of updates',
  'object_updates_param_updates_type_Vector t' => 'Updates',
  'object_updates_param_users_type_Vector t' => 'Users',
  'object_updates_param_chats_type_Vector t' => 'Chats',
  'object_updates_param_date_type_int' => 'Current date',
  'object_updates_param_seq_type_int' => 'Total number of sent updates',
  'object_updateShortSentMessage' => 'Shortened constructor containing info on one outgoing message to a contact (the destination chat has to be extracted from the method call that returned this object).',
  'object_updateShortSentMessage_param_out_type_true' => 'Whether the message is outgoing',
  'object_updateShortSentMessage_param_id_type_int' => 'ID of the sent message',
  'object_updateShortSentMessage_param_pts_type_int' => '[PTS](https://core.telegram.org/api/updates)',
  'object_updateShortSentMessage_param_pts_count_type_int' => '[PTS count](https://core.telegram.org/api/updates)',
  'object_updateShortSentMessage_param_date_type_int' => '[date](https://core.telegram.org/api/updates)',
  'object_updateShortSentMessage_param_media_type_MessageMedia' => 'Attached media',
  'object_updateShortSentMessage_param_entities_type_Vector t' => 'Entities',
  'object_photos.photos' => 'Full list of photos with auxiliary data.',
  'object_photos.photos_param_photos_type_Vector t' => 'Photos',
  'object_photos.photos_param_users_type_Vector t' => 'Users',
  'object_photos.photosSlice' => 'Incomplete list of photos with auxiliary data.',
  'object_photos.photosSlice_param_count_type_int' => 'Total number of photos',
  'object_photos.photosSlice_param_photos_type_Vector t' => 'Photos',
  'object_photos.photosSlice_param_users_type_Vector t' => 'Users',
  'object_photos.photo' => 'Photo with auxiliary data.',
  'object_photos.photo_param_photo_type_Photo' => 'Photo',
  'object_photos.photo_param_users_type_Vector t' => 'Users',
  'object_upload.file' => 'File content.',
  'object_upload.file_param_type_type_storage.FileType' => 'File type',
  'object_upload.file_param_mtime_type_int' => 'Modification type',
  'object_upload.file_param_bytes_type_bytes' => 'Binary data, file content',
  'object_upload.fileCdnRedirect' => 'The file must be downloaded from a [CDN DC](https://core.telegram.org/cdn).',
  'object_upload.fileCdnRedirect_param_dc_id_type_int' => '[CDN DC](https://core.telegram.org/cdn) ID',
  'object_upload.fileCdnRedirect_param_file_token_type_bytes' => 'File token (see [CDN files](https://core.telegram.org/cdn)',
  'object_upload.fileCdnRedirect_param_encryption_key_type_bytes' => 'Encryption key (see [CDN files](https://core.telegram.org/cdn)',
  'object_upload.fileCdnRedirect_param_encryption_iv_type_bytes' => 'Encryption IV (see [CDN files](https://core.telegram.org/cdn)',
  'object_upload.fileCdnRedirect_param_cdn_file_hashes_type_Vector t' => 'Cdn file hashes',
  'object_dcOption' => 'Data centre',
  'object_dcOption_param_ipv6_type_true' => 'Whether the specified IP is an IPv6 address',
  'object_dcOption_param_media_only_type_true' => 'Whether this DC should only be used to [download or upload files](https://core.telegram.org/api/files)',
  'object_dcOption_param_tcpo_only_type_true' => 'Whether this DC only supports connection with [transport obfuscation](https://core.telegram.org/mtproto/mtproto-transports#transport-obfuscation)',
  'object_dcOption_param_cdn_type_true' => 'Whether this is a [CDN DC](https://core.telegram.org/cdn).',
  'object_dcOption_param_static_type_true' => 'If set, this IP should be used when connecting through a proxy',
  'object_dcOption_param_id_type_int' => 'DC ID',
  'object_dcOption_param_ip_address_type_string' => 'IP address of DC',
  'object_dcOption_param_port_type_int' => 'Port',
  'object_config' => 'Current configuration',
  'object_config_param_phonecalls_enabled_type_true' => 'Whether phone calls can be used',
  'object_config_param_default_p2p_contacts_type_true' => 'Whether the client should use P2P by default for phone calls with contacts',
  'object_config_param_date_type_int' => 'Current date at the server',
  'object_config_param_expires_type_int' => 'Expiration date of this config: when it expires it\'ll have to be refetched using [help.getConfig](../methods/help.getConfig.md)',
  'object_config_param_test_mode_type_Bool' => 'Whether we\'re connected to the test DCs',
  'object_config_param_this_dc_type_int' => 'ID of the DC that returned the reply',
  'object_config_param_dc_options_type_Vector t' => 'DC options',
  'object_config_param_chat_size_max_type_int' => 'Maximum member count for normal [groups](https://core.telegram.org/api/channel)',
  'object_config_param_megagroup_size_max_type_int' => 'Maximum member count for [supergroups](https://core.telegram.org/api/channel)',
  'object_config_param_forwarded_count_max_type_int' => 'Maximum number of messages that can be forwarded at once using [messages.forwardMessages](../methods/messages.forwardMessages.md).',
  'object_config_param_online_update_period_ms_type_int' => 'The client should [update its online status](../methods/account.updateStatus.md) every N milliseconds',
  'object_config_param_offline_blur_timeout_ms_type_int' => 'Delay before offline status needs to be sent to the server',
  'object_config_param_offline_idle_timeout_ms_type_int' => 'Time without any user activity after which it should be treated offline',
  'object_config_param_online_cloud_timeout_ms_type_int' => 'If we are offline, but were online from some other client in last `online_cloud_timeout_ms` milliseconds after we had gone offline, then delay offline notification for `notify_cloud_delay_ms` milliseconds.',
  'object_config_param_notify_cloud_delay_ms_type_int' => 'If we are offline, but online from some other client then delay sending the offline notification for `notify_cloud_delay_ms` milliseconds.',
  'object_config_param_notify_default_delay_ms_type_int' => 'If some other client is online, then delay notification for `notification_default_delay_ms` milliseconds',
  'object_config_param_chat_big_size_type_int' => 'Chat big size',
  'object_config_param_push_chat_period_ms_type_int' => 'Not for client use',
  'object_config_param_push_chat_limit_type_int' => 'Not for client use',
  'object_config_param_saved_gifs_limit_type_int' => 'Maximum count of saved gifs',
  'object_config_param_edit_time_limit_type_int' => 'Only messages with age smaller than the one specified can be edited',
  'object_config_param_rating_e_decay_type_int' => 'Exponential decay rate for computing [top peer rating](https://core.telegram.org/api/top-rating)',
  'object_config_param_stickers_recent_limit_type_int' => 'Maximum number of recent stickers',
  'object_config_param_stickers_faved_limit_type_int' => 'Maximum number of faved stickers',
  'object_config_param_channels_read_media_period_type_int' => 'Indicates that round videos (video notes) and voice messages sent in channels and older than the specified period must be marked as read',
  'object_config_param_tmp_sessions_type_int' => 'Temporary [passport](https://core.telegram.org/passport) sessions',
  'object_config_param_pinned_dialogs_count_max_type_int' => 'Maximum count of pinned dialogs',
  'object_config_param_call_receive_timeout_ms_type_int' => 'Maximum allowed outgoing ring time in VoIP calls: if the user we\'re calling doesn\'t reply within the specified time (in milliseconds), we should hang up the call',
  'object_config_param_call_ring_timeout_ms_type_int' => 'Maximum allowed incoming ring time in VoIP calls: if the current user doesn\'t reply within the specified time (in milliseconds), the call will be automatically refused',
  'object_config_param_call_connect_timeout_ms_type_int' => 'VoIP connection timeout: if the instance of libtgvoip on the other side of the call doesn\'t connect to our instance of libtgvoip within the specified time (in milliseconds), the call must be aborted',
  'object_config_param_call_packet_timeout_ms_type_int' => 'If during a VoIP call a packet isn\'t received for the specified period of time, the call must be aborted',
  'object_config_param_me_url_prefix_type_string' => 'The domain to use to parse in-app links.<br>For example t.me indicates that t.me/username links should parsed to @username, t.me/addsticker/name should be parsed to the appropriate stickerset and so on...',
  'object_config_param_suggested_lang_code_type_string' => 'Suggested language code',
  'object_config_param_lang_pack_version_type_int' => 'Language pack version',
  'object_config_param_disabled_features_type_Vector t' => 'Disabled features',
  'object_nearestDc' => 'Nearest data centre, according to geo-ip.',
  'object_nearestDc_param_country_type_string' => 'Country code determined by geo-ip',
  'object_nearestDc_param_this_dc_type_int' => 'Number of current data centre',
  'object_nearestDc_param_nearest_dc_type_int' => 'Number of nearest data centre',
  'object_help.appUpdate' => 'An update is available for the application.',
  'object_help.appUpdate_param_id_type_int' => 'Update ID',
  'object_help.appUpdate_param_critical_type_Bool' => 'Critical?',
  'object_help.appUpdate_param_url_type_string' => 'Application download URL',
  'object_help.appUpdate_param_text_type_string' => 'Text description of the update',
  'object_help.noAppUpdate' => 'No updates are available for the application.',
  'object_help.inviteText' => 'Text of a text message with an invitation to install application.',
  'object_help.inviteText_param_message_type_string' => 'Text of a message',
  'object_encryptedChatEmpty' => 'Empty constructor.',
  'object_encryptedChatEmpty_param_id_type_int' => 'Chat ID',
  'object_encryptedChatWaiting' => 'Chat waiting for approval of second participant.',
  'object_encryptedChatWaiting_param_id_type_int' => 'Chat ID',
  'object_encryptedChatWaiting_param_access_hash_type_long' => 'Checking sum depending on user ID',
  'object_encryptedChatWaiting_param_date_type_int' => 'Date of chat creation',
  'object_encryptedChatWaiting_param_admin_id_type_int' => 'Chat creator ID',
  'object_encryptedChatWaiting_param_participant_id_type_int' => 'ID of second chat participant',
  'object_encryptedChatRequested' => 'Request to create an encrypted chat.',
  'object_encryptedChatRequested_param_id_type_int' => 'Chat ID',
  'object_encryptedChatRequested_param_access_hash_type_long' => 'Check sum depending on user ID',
  'object_encryptedChatRequested_param_date_type_int' => 'Chat creation date',
  'object_encryptedChatRequested_param_admin_id_type_int' => 'Chat creator ID',
  'object_encryptedChatRequested_param_participant_id_type_int' => 'ID of second chat participant',
  'object_encryptedChatRequested_param_g_a_type_bytes' => '`A = g ^ a mod p`, see [Wikipedia](https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange)',
  'object_encryptedChat' => 'Encrypted chat',
  'object_encryptedChat_param_id_type_int' => 'Chat ID',
  'object_encryptedChat_param_access_hash_type_long' => 'Check sum dependant on the user ID',
  'object_encryptedChat_param_date_type_int' => 'Date chat was created',
  'object_encryptedChat_param_admin_id_type_int' => 'Chat creator ID',
  'object_encryptedChat_param_participant_id_type_int' => 'ID of the second chat participant',
  'object_encryptedChat_param_g_a_or_b_type_bytes' => '`B = g ^ b mod p`, if the currently authorized user is the chat\'s creator,<br>or `A = g ^ a mod p` otherwise<br>See [Wikipedia](https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange) for more info',
  'object_encryptedChat_param_key_fingerprint_type_long' => '64-bit fingerprint of received key',
  'object_encryptedChatDiscarded' => 'Discarded or deleted chat.',
  'object_encryptedChatDiscarded_param_id_type_int' => 'Chat ID',
  'object_inputEncryptedChat' => 'Creates an encrypted chat.',
  'object_inputEncryptedChat_param_chat_id_type_int' => 'Chat ID',
  'object_inputEncryptedChat_param_access_hash_type_long' => 'Checking sum from constructor [encryptedChat](../constructors/encryptedChat.md), [encryptedChatWaiting](../constructors/encryptedChatWaiting.md) or [encryptedChatRequested](../constructors/encryptedChatRequested.md)',
  'object_encryptedFileEmpty' => 'Empty constructor, unexisitng file.',
  'object_encryptedFile' => 'Encrypted file.',
  'object_encryptedFile_param_id_type_long' => 'File ID',
  'object_encryptedFile_param_access_hash_type_long' => 'Checking sum depending on user ID',
  'object_encryptedFile_param_size_type_int' => 'File size in bytes',
  'object_encryptedFile_param_dc_id_type_int' => 'Number of data centre',
  'object_encryptedFile_param_key_fingerprint_type_int' => '32-bit fingerprint of key used for file encryption',
  'object_inputEncryptedFileEmpty' => 'Empty constructor.',
  'object_inputEncryptedFileUploaded' => 'Sets new encrypted file saved by parts using upload.saveFilePart method.',
  'object_inputEncryptedFileUploaded_param_id_type_long' => 'Random file ID created by clien',
  'object_inputEncryptedFileUploaded_param_parts_type_int' => 'Number of saved parts',
  'object_inputEncryptedFileUploaded_param_md5_checksum_type_string' => 'In case [md5-HASH](https://en.wikipedia.org/wiki/MD5) of the (already encrypted) file was transmitted, file content will be checked prior to use',
  'object_inputEncryptedFileUploaded_param_key_fingerprint_type_int' => '32-bit fingerprint of the key used to encrypt a file',
  'object_inputEncryptedFile' => 'Sets forwarded encrypted file for attachment.',
  'object_inputEncryptedFile_param_id_type_long' => 'File ID, value of **id** parameter from [encryptedFile](../constructors/encryptedFile.md)',
  'object_inputEncryptedFile_param_access_hash_type_long' => 'Checking sum, value of **access\\_hash** parameter from [encryptedFile](../constructors/encryptedFile.md)',
  'object_inputEncryptedFileBigUploaded' => 'Assigns a new big encrypted file (over 10Mb in size), saved in parts using the method [upload.saveBigFilePart](../methods/upload.saveBigFilePart.md).',
  'object_inputEncryptedFileBigUploaded_param_id_type_long' => 'Random file id, created by the client',
  'object_inputEncryptedFileBigUploaded_param_parts_type_int' => 'Number of saved parts',
  'object_inputEncryptedFileBigUploaded_param_key_fingerprint_type_int' => '32-bit imprint of the key used to encrypt the file',
  'object_encryptedMessage' => 'Encrypted message.',
  'object_encryptedMessage_param_chat_id_type_int' => 'ID of encrypted chat',
  'object_encryptedMessage_param_date_type_int' => 'Date of sending',
  'object_encryptedMessage_param_decrypted_message_type_DecryptedMessage' => 'Decrypted message',
  'object_encryptedMessage_param_file_type_EncryptedFile' => 'Attached encrypted file',
  'object_encryptedMessageService' => 'Encrypted service message',
  'object_encryptedMessageService_param_chat_id_type_int' => 'ID of encrypted chat',
  'object_encryptedMessageService_param_date_type_int' => 'Date of sending',
  'object_encryptedMessageService_param_decrypted_message_type_DecryptedMessage' => 'Decrypted message',
  'object_messages.dhConfigNotModified' => 'Configuring parameters did not change.',
  'object_messages.dhConfigNotModified_param_random_type_bytes' => 'Random sequence of bytes of assigned length',
  'object_messages.dhConfig' => 'New set of configuring parameters.',
  'object_messages.dhConfig_param_g_type_int' => 'New value **prime**, see [Wikipedia](https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange)',
  'object_messages.dhConfig_param_p_type_bytes' => 'New value **primitive root**, see [Wikipedia](https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange)',
  'object_messages.dhConfig_param_version_type_int' => 'Vestion of set of parameters',
  'object_messages.dhConfig_param_random_type_bytes' => 'Random sequence of bytes of assigned length',
  'object_messages.sentEncryptedMessage' => 'Message without file attachemts sent to an encrypted file.',
  'object_messages.sentEncryptedMessage_param_date_type_int' => 'Date of sending',
  'object_messages.sentEncryptedFile' => 'Message with a file enclosure sent to a protected chat',
  'object_messages.sentEncryptedFile_param_date_type_int' => 'Sending date',
  'object_messages.sentEncryptedFile_param_file_type_EncryptedFile' => 'Attached file',
  'object_inputDocumentEmpty' => 'Empty constructor.',
  'object_inputDocument' => 'Defines a video for subsequent interaction.',
  'object_inputDocument_param_id_type_long' => 'Document ID',
  'object_inputDocument_param_access_hash_type_long' => '**access\\_hash** parameter from the [document](../constructors/document.md) constructor',
  'object_documentEmpty' => 'Empty constructor, document doesn\'t exist.',
  'object_documentEmpty_param_id_type_long' => 'Document ID or `0`',
  'object_document' => 'Document',
  'object_document_param_id_type_long' => 'Document ID',
  'object_document_param_access_hash_type_long' => 'Check sum, dependant on document ID',
  'object_document_param_date_type_int' => 'Creation date',
  'object_document_param_mime_type_type_string' => 'MIME type',
  'object_document_param_size_type_int' => 'Size',
  'object_document_param_thumb_type_PhotoSize' => 'Thumbnail',
  'object_document_param_dc_id_type_int' => 'DC ID',
  'object_document_param_version_type_int' => 'Version',
  'object_document_param_attributes_type_Vector t' => 'Attributes',
  'object_help.support' => 'Info on support user.',
  'object_help.support_param_phone_number_type_string' => 'Phone number',
  'object_help.support_param_user_type_User' => 'User',
  'object_notifyPeer' => 'Notifications generated by a certain user or group.',
  'object_notifyPeer_param_peer_type_Peer' => 'User or group',
  'object_notifyUsers' => 'Notifications generated by all users.',
  'object_notifyChats' => 'Notifications generated by all groups.',
  'object_notifyAll' => 'Notify all',
  'object_sendMessageTypingAction' => 'User is typing.',
  'object_sendMessageCancelAction' => 'Invalidate all previous action updates. E.g. when user deletes entered text or aborts a video upload.',
  'object_sendMessageRecordVideoAction' => 'User is recording a video.',
  'object_sendMessageUploadVideoAction' => 'User is uploading a video.',
  'object_sendMessageUploadVideoAction_param_progress_type_int' => 'Progress percentage',
  'object_sendMessageRecordAudioAction' => 'User is recording a voice message.',
  'object_sendMessageUploadAudioAction' => 'User is uploading a voice message.',
  'object_sendMessageUploadAudioAction_param_progress_type_int' => 'Progress percentage',
  'object_sendMessageUploadPhotoAction' => 'User is uploading a photo.',
  'object_sendMessageUploadPhotoAction_param_progress_type_int' => 'Progress percentage',
  'object_sendMessageUploadDocumentAction' => 'User is uploading a file.',
  'object_sendMessageUploadDocumentAction_param_progress_type_int' => 'Progress percentage',
  'object_sendMessageGeoLocationAction' => 'User is selecting a location to share.',
  'object_sendMessageChooseContactAction' => 'User is selecting a contact to share.',
  'object_sendMessageGamePlayAction' => 'User is playing a game',
  'object_sendMessageRecordRoundAction' => 'User is recording a round video to share',
  'object_sendMessageUploadRoundAction' => 'User is uploading a round video',
  'object_sendMessageUploadRoundAction_param_progress_type_int' => 'Progress percentage',
  'object_contacts.found' => 'Users found by name substring and auxiliary data.',
  'object_contacts.found_param_my_results_type_Vector t' => 'My results',
  'object_contacts.found_param_results_type_Vector t' => 'Results',
  'object_contacts.found_param_chats_type_Vector t' => 'Chats',
  'object_contacts.found_param_users_type_Vector t' => 'Users',
  'object_inputPrivacyKeyStatusTimestamp' => 'Whether we can see the exact last online timestamp of the user',
  'object_inputPrivacyKeyChatInvite' => 'Whether the user can be invited to chats',
  'object_inputPrivacyKeyPhoneCall' => 'Whether the user will accept phone calls',
  'object_privacyKeyStatusTimestamp' => 'Whether we can see the last online timestamp',
  'object_privacyKeyPhoneCall' => 'Whether the user accepts phone calls',
  'object_inputPrivacyValueAllowContacts' => 'Allow only contacts',
  'object_inputPrivacyValueAllowAll' => 'Allow all users',
  'object_inputPrivacyValueAllowUsers' => 'Allow only certain users',
  'object_inputPrivacyValueAllowUsers_param_users_type_Vector t' => 'Users',
  'object_inputPrivacyValueDisallowContacts' => 'Disallow only contacts',
  'object_inputPrivacyValueDisallowAll' => 'Disallow all',
  'object_inputPrivacyValueDisallowUsers' => 'Disallow only certain users',
  'object_inputPrivacyValueDisallowUsers_param_users_type_Vector t' => 'Users',
  'object_privacyValueAllowContacts' => 'Allow all contacts',
  'object_privacyValueAllowAll' => 'Allow all users',
  'object_privacyValueAllowUsers' => 'Allow only certain users',
  'object_privacyValueAllowUsers_param_users_type_Vector t' => 'Users',
  'object_privacyValueDisallowContacts' => 'Disallow only contacts',
  'object_privacyValueDisallowAll' => 'Disallow all users',
  'object_privacyValueDisallowUsers' => 'Disallow only certain users',
  'object_privacyValueDisallowUsers_param_users_type_Vector t' => 'Users',
  'object_account.privacyRules' => 'Privacy rules',
  'object_account.privacyRules_param_rules_type_Vector t' => 'Rules',
  'object_account.privacyRules_param_users_type_Vector t' => 'Users',
  'object_accountDaysTTL' => 'Time to live in days of the current account',
  'object_accountDaysTTL_param_days_type_int' => 'This account will self-destruct in the specified number of days',
  'object_documentAttributeImageSize' => 'Defines the width and height of an image uploaded as document',
  'object_documentAttributeImageSize_param_w_type_int' => 'Width of image',
  'object_documentAttributeImageSize_param_h_type_int' => 'Height of image',
  'object_documentAttributeAnimated' => 'Defines an animated GIF',
  'object_documentAttributeSticker' => 'Defines a sticker',
  'object_documentAttributeSticker_param_mask_type_true' => 'Whether this is a mask sticker',
  'object_documentAttributeSticker_param_alt_type_string' => 'Alternative emoji representation of sticker',
  'object_documentAttributeSticker_param_stickerset_type_InputStickerSet' => 'Associated stickerset',
  'object_documentAttributeSticker_param_mask_coords_type_MaskCoords' => 'Mask coordinates (if this is a mask sticker, attached to a photo)',
  'object_documentAttributeVideo' => 'Defines a video',
  'object_documentAttributeVideo_param_round_message_type_true' => 'Whether this is a round video',
  'object_documentAttributeVideo_param_supports_streaming_type_true' => 'Whether the video supports streaming',
  'object_documentAttributeVideo_param_duration_type_int' => 'Duration in seconds',
  'object_documentAttributeVideo_param_w_type_int' => 'Video width',
  'object_documentAttributeVideo_param_h_type_int' => 'Video height',
  'object_documentAttributeAudio' => 'Represents an audio file',
  'object_documentAttributeAudio_param_voice_type_true' => 'Whether this is a voice message',
  'object_documentAttributeAudio_param_duration_type_int' => 'Duration in seconds',
  'object_documentAttributeAudio_param_title_type_string' => 'Name of song',
  'object_documentAttributeAudio_param_performer_type_string' => 'Performer',
  'object_documentAttributeAudio_param_waveform_type_bytes' => 'Waveform',
  'object_documentAttributeFilename' => 'A simple document with a file name',
  'object_documentAttributeFilename_param_file_name_type_string' => 'The file name',
  'object_documentAttributeHasStickers' => 'Whether the current document has stickers attached',
  'object_messages.stickersNotModified' => 'No new stickers were found for the given query',
  'object_messages.stickers' => 'Found stickers',
  'object_messages.stickers_param_hash_type_string' => 'Hash',
  'object_messages.stickers_param_stickers_type_Vector t' => 'Stickers',
  'object_stickerPack' => 'A stickerpack is a group of stickers associated to the same emoji.  
It is **not** a sticker pack the way it is usually intended, you may be looking for a [StickerSet](../types/StickerSet.md).',
  'object_stickerPack_param_emoticon_type_string' => 'Emoji',
  'object_stickerPack_param_documents_type_Vector t' => 'Documents',
  'object_messages.allStickersNotModified' => 'Info about all installed stickers hasn\'t changed',
  'object_messages.allStickers' => 'Info about all installed stickers',
  'object_messages.allStickers_param_hash_type_int' => '[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)',
  'object_messages.allStickers_param_sets_type_Vector t' => 'Sets',
  'object_disabledFeature' => 'Disabled feature',
  'object_disabledFeature_param_feature_type_string' => 'Feature',
  'object_disabledFeature_param_description_type_string' => 'Description',
  'object_messages.affectedMessages' => 'Events affected by operation',
  'object_messages.affectedMessages_param_pts_type_int' => '[Event count after generation](https://core.telegram.org/api/updates)',
  'object_messages.affectedMessages_param_pts_count_type_int' => '[Number of events that were generated](https://core.telegram.org/api/updates)',
  'object_contactLinkUnknown' => 'Contact link unknown',
  'object_contactLinkNone' => 'Contact link none',
  'object_contactLinkHasPhone' => 'Contact link has phone',
  'object_contactLinkContact' => 'Contact link contact',
  'object_webPageEmpty' => 'No preview is available for the webpage',
  'object_webPageEmpty_param_id_type_long' => 'Preview ID',
  'object_webPagePending' => 'A preview of the webpage is currently being generated',
  'object_webPagePending_param_id_type_long' => 'ID of preview',
  'object_webPagePending_param_date_type_int' => 'When was the processing started',
  'object_webPage' => 'Webpage preview',
  'object_webPage_param_id_type_long' => 'Preview ID',
  'object_webPage_param_url_type_string' => 'URL of previewed webpage',
  'object_webPage_param_display_url_type_string' => 'Webpage URL to be displayed to the user',
  'object_webPage_param_hash_type_int' => '[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)',
  'object_webPage_param_type_type_string' => 'Type of the web page. Can be: article, photo, audio, video, document, profile, app, or something else',
  'object_webPage_param_site_name_type_string' => 'Short name of the site (e.g., Google Docs, App Store)',
  'object_webPage_param_title_type_string' => 'Title of the content',
  'object_webPage_param_description_type_string' => 'Content description',
  'object_webPage_param_photo_type_Photo' => 'Image representing the content',
  'object_webPage_param_embed_url_type_string' => 'URL to show in the embedded preview',
  'object_webPage_param_embed_type_type_string' => 'MIME type of the embedded preview, (e.g., text/html or video/mp4)',
  'object_webPage_param_embed_width_type_int' => 'Width of the embedded preview',
  'object_webPage_param_embed_height_type_int' => 'Height of the embedded preview',
  'object_webPage_param_duration_type_int' => 'Duration of the content, in seconds',
  'object_webPage_param_author_type_string' => 'Author of the content',
  'object_webPage_param_document_type_Document' => 'Preview of the content as a media file',
  'object_webPage_param_cached_page_type_Page' => 'Page contents in [instant view](https://instantview.telegram.org) format',
  'object_webPageNotModified' => 'The preview of the webpage hasn\'t changed',
  'object_authorization' => 'Logged-in session',
  'object_authorization_param_hash_type_long' => 'Identifier',
  'object_authorization_param_device_model_type_string' => 'Device model',
  'object_authorization_param_platform_type_string' => 'Platform',
  'object_authorization_param_system_version_type_string' => 'System version',
  'object_authorization_param_api_id_type_int' => '[API ID](https://core.telegram.org/api/obtaining_api_id)',
  'object_authorization_param_app_name_type_string' => 'App name',
  'object_authorization_param_app_version_type_string' => 'App version',
  'object_authorization_param_date_created_type_int' => 'When was the session created',
  'object_authorization_param_date_active_type_int' => 'When was the session last active',
  'object_authorization_param_ip_type_string' => 'Last known IP',
  'object_authorization_param_country_type_string' => 'Country determined from IP',
  'object_authorization_param_region_type_string' => 'Region determined from IP',
  'object_account.authorizations' => 'Logged-in sessions',
  'object_account.authorizations_param_authorizations_type_Vector t' => 'Authorizations',
  'object_account.noPassword' => 'No password',
  'object_account.noPassword_param_new_salt_type_bytes' => 'New salt',
  'object_account.noPassword_param_email_unconfirmed_pattern_type_string' => 'Email unconfirmed pattern',
  'object_account.password' => 'Configuration for two-factor authorization',
  'object_account.password_param_current_salt_type_bytes' => 'Current salt',
  'object_account.password_param_new_salt_type_bytes' => 'New salt',
  'object_account.password_param_hint_type_string' => 'Text hint for the password',
  'object_account.password_param_has_recovery_type_Bool' => 'Has recovery?',
  'object_account.password_param_email_unconfirmed_pattern_type_string' => 'A [password recovery email](https://core.telegram.org/api/srp#email-verification) with the specified [pattern](https://core.telegram.org/api/pattern) is still awaiting verification',
  'object_account.passwordSettings' => 'Private info associated to the password info (recovery email, telegram [passport](https://core.telegram.org/passport) info & so on)',
  'object_account.passwordSettings_param_email_type_string' => '[2FA Recovery email](https://core.telegram.org/api/srp#email-verification)',
  'object_account.passwordInputSettings' => 'Settings for setting up a new password',
  'object_account.passwordInputSettings_param_new_salt_type_bytes' => '`$new_salt = $MadelineProto->account->getPassword()[\'new_salt\'].$MadelineProto->random(8);`',
  'object_account.passwordInputSettings_param_new_password_hash_type_bytes' => 'The [computed password hash](https://core.telegram.org/api/srp)',
  'object_account.passwordInputSettings_param_hint_type_string' => 'Text hint for the password',
  'object_account.passwordInputSettings_param_email_type_string' => 'Password recovery email',
  'object_auth.passwordRecovery' => 'Recovery info of a [2FA password](https://core.telegram.org/api/srp), only for accounts with a [recovery email configured](https://core.telegram.org/api/srp#email-verification).',
  'object_auth.passwordRecovery_param_email_pattern_type_string' => 'The email to which the recovery code was sent must match this [pattern](https://core.telegram.org/api/pattern).',
  'object_receivedNotifyMessage' => 'Message ID, for which PUSH-notifications were cancelled.',
  'object_receivedNotifyMessage_param_id_type_int' => 'Message ID, for which PUSH-notifications were canceled',
  'object_chatInviteEmpty' => 'No info is associated to the chat invite',
  'object_chatInviteExported' => 'Exported chat invite',
  'object_chatInviteExported_param_link_type_string' => 'Chat invitation link',
  'object_chatInviteAlready' => 'The user has already joined this chat',
  'object_chatInviteAlready_param_chat_type_Chat' => 'The chat connected to the invite',
  'object_chatInvite' => 'Chat invite info',
  'object_chatInvite_param_channel_type_true' => 'Whether this is a [channel/supergroup](https://core.telegram.org/api/channel) or a [normal group](https://core.telegram.org/api/channel)',
  'object_chatInvite_param_broadcast_type_true' => 'Whether this is a [channel](https://core.telegram.org/api/channel)',
  'object_chatInvite_param_public_type_true' => 'Whether this is a public [channel/supergroup](https://core.telegram.org/api/channel)',
  'object_chatInvite_param_megagroup_type_true' => 'Whether this is a [supergroup](https://core.telegram.org/api/channel)',
  'object_chatInvite_param_title_type_string' => 'Chat/supergroup/channel title',
  'object_chatInvite_param_photo_type_ChatPhoto' => 'Photo',
  'object_chatInvite_param_participants_count_type_int' => 'Participant count',
  'object_chatInvite_param_participants_type_Vector t' => 'Participants',
  'object_inputStickerSetEmpty' => 'Empty constructor',
  'object_inputStickerSetID' => 'Stickerset by ID',
  'object_inputStickerSetID_param_id_type_long' => 'ID',
  'object_inputStickerSetID_param_access_hash_type_long' => 'Access hash',
  'object_inputStickerSetShortName' => 'Stickerset by short name, from `tg://addstickers?set=short_name`',
  'object_inputStickerSetShortName_param_short_name_type_string' => 'From `tg://addstickers?set=short_name`',
  'object_stickerSet' => 'Represents a stickerset (stickerpack)',
  'object_stickerSet_param_installed_type_true' => 'Installed?',
  'object_stickerSet_param_archived_type_true' => 'Whether this stickerset was archived (due to too many saved stickers in the current account)',
  'object_stickerSet_param_official_type_true' => 'Is this stickerset official',
  'object_stickerSet_param_masks_type_true' => 'Is this a mask stickerset',
  'object_stickerSet_param_id_type_long' => 'ID of the stickerset',
  'object_stickerSet_param_access_hash_type_long' => 'Access hash of stickerset',
  'object_stickerSet_param_title_type_string' => 'Title of stickerset',
  'object_stickerSet_param_short_name_type_string' => 'Short name of stickerset to use in `tg://addstickers?set=short_name`',
  'object_stickerSet_param_count_type_int' => 'Number of stickers in pack',
  'object_stickerSet_param_hash_type_int' => 'Hash',
  'object_messages.stickerSet' => 'Stickerset and stickers inside it',
  'object_messages.stickerSet_param_set_type_StickerSet' => 'The stickerset',
  'object_messages.stickerSet_param_packs_type_Vector t' => 'Packs',
  'object_messages.stickerSet_param_documents_type_Vector t' => 'Documents',
  'object_botInfo' => 'Info about bots (available bot commands, etc)',
  'object_botInfo_param_user_id_type_int' => 'ID of the bot',
  'object_botInfo_param_description_type_string' => 'Description of the bot',
  'object_botInfo_param_commands_type_Vector t' => 'Commands',
  'object_keyboardButton' => 'Bot keyboard button',
  'object_keyboardButton_param_text_type_string' => 'Button text',
  'object_keyboardButtonUrl' => 'URL button',
  'object_keyboardButtonUrl_param_text_type_string' => 'Button label',
  'object_keyboardButtonUrl_param_url_type_string' => 'URL',
  'object_keyboardButtonCallback' => 'Callback button',
  'object_keyboardButtonCallback_param_text_type_string' => 'Button text',
  'object_keyboardButtonCallback_param_data_type_bytes' => 'Callback data',
  'object_keyboardButtonRequestPhone' => 'Button to request a user\'s phone number',
  'object_keyboardButtonRequestPhone_param_text_type_string' => 'Button text',
  'object_keyboardButtonRequestGeoLocation' => 'Button to request a user\'s geolocation',
  'object_keyboardButtonRequestGeoLocation_param_text_type_string' => 'Button text',
  'object_keyboardButtonSwitchInline' => 'Button to force a user to switch to inline mode Pressing the button will prompt the user to select one of their chats, open that chat and insert the bot‘s username and the specified inline query in the input field.',
  'object_keyboardButtonSwitchInline_param_same_peer_type_true' => 'If set, pressing the button will insert the bot‘s username and the specified inline `query` in the current chat\'s input field.',
  'object_keyboardButtonSwitchInline_param_text_type_string' => 'Button label',
  'object_keyboardButtonSwitchInline_param_query_type_string' => 'The inline query to use',
  'object_keyboardButtonGame' => 'Button to start a game',
  'object_keyboardButtonGame_param_text_type_string' => 'Button text',
  'object_keyboardButtonBuy' => 'Button to buy a product',
  'object_keyboardButtonBuy_param_text_type_string' => 'Button text',
  'object_keyboardButtonRow' => 'Inline keyboard row',
  'object_keyboardButtonRow_param_buttons_type_Vector t' => 'Buttons',
  'object_replyKeyboardHide' => 'Hide sent bot keyboard',
  'object_replyKeyboardHide_param_selective_type_true' => 'Use this flag if you want to remove the keyboard for specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot\'s message is a reply (has reply\\_to\\_message\\_id), sender of the original message.<br><br>Example: A user votes in a poll, bot returns confirmation message in reply to the vote and removes the keyboard for that user, while still showing the keyboard with poll options to users who haven\'t voted yet',
  'object_replyKeyboardForceReply' => 'Force the user to send a reply',
  'object_replyKeyboardForceReply_param_single_use_type_true' => 'Requests clients to hide the keyboard as soon as it\'s been used. The keyboard will still be available, but clients will automatically display the usual letter-keyboard in the chat – the user can press a special button in the input field to see the custom keyboard again.',
  'object_replyKeyboardForceReply_param_selective_type_true' => 'Use this parameter if you want to show the keyboard to specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot\'s message is a reply (has reply\\_to\\_message\\_id), sender of the original message. <br>Example: A user requests to change the bot‘s language, bot replies to the request with a keyboard to select the new language. Other users in the group don’t see the keyboard.',
  'object_replyKeyboardMarkup' => 'Bot keyboard',
  'object_replyKeyboardMarkup_param_resize_type_true' => 'Requests clients to resize the keyboard vertically for optimal fit (e.g., make the keyboard smaller if there are just two rows of buttons). If not set, the custom keyboard is always of the same height as the app\'s standard keyboard.',
  'object_replyKeyboardMarkup_param_single_use_type_true' => 'Requests clients to hide the keyboard as soon as it\'s been used. The keyboard will still be available, but clients will automatically display the usual letter-keyboard in the chat – the user can press a special button in the input field to see the custom keyboard again.',
  'object_replyKeyboardMarkup_param_selective_type_true' => 'Use this parameter if you want to show the keyboard to specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot\'s message is a reply (has reply\\_to\\_message\\_id), sender of the original message.<br><br>Example: A user requests to change the bot‘s language, bot replies to the request with a keyboard to select the new language. Other users in the group don’t see the keyboard.',
  'object_replyKeyboardMarkup_param_rows_type_Vector t' => 'Rows',
  'object_replyInlineMarkup' => 'Bot or inline keyboard',
  'object_replyInlineMarkup_param_rows_type_Vector t' => 'Rows',
  'object_messageEntityUnknown' => 'Unknown message entity',
  'object_messageEntityUnknown_param_offset_type_int' => 'Offset of message entity within message (in UTF-8 codepoints)',
  'object_messageEntityUnknown_param_length_type_int' => 'Length of message entity within message (in UTF-8 codepoints)',
  'object_messageEntityMention' => 'Message entity mentioning the current user',
  'object_messageEntityMention_param_offset_type_int' => 'Offset of message entity within message (in UTF-8 codepoints)',
  'object_messageEntityMention_param_length_type_int' => 'Length of message entity within message (in UTF-8 codepoints)',
  'object_messageEntityHashtag' => '**\\#hashtag** message entity',
  'object_messageEntityHashtag_param_offset_type_int' => 'Offset of message entity within message (in UTF-8 codepoints)',
  'object_messageEntityHashtag_param_length_type_int' => 'Length of message entity within message (in UTF-8 codepoints)',
  'object_messageEntityBotCommand' => 'Message entity representing a bot /command',
  'object_messageEntityBotCommand_param_offset_type_int' => 'Offset of message entity within message (in UTF-8 codepoints)',
  'object_messageEntityBotCommand_param_length_type_int' => 'Length of message entity within message (in UTF-8 codepoints)',
  'object_messageEntityUrl' => 'Message entity representing an in-text url: <https://google.com>; for [text urls](https://google.com), use [messageEntityTextUrl](../constructors/messageEntityTextUrl.md).',
  'object_messageEntityUrl_param_offset_type_int' => 'Offset of message entity within message (in UTF-8 codepoints)',
  'object_messageEntityUrl_param_length_type_int' => 'Length of message entity within message (in UTF-8 codepoints)',
  'object_messageEntityEmail' => 'Message entity representing an <email@example.com>.',
  'object_messageEntityEmail_param_offset_type_int' => 'Offset of message entity within message (in UTF-8 codepoints)',
  'object_messageEntityEmail_param_length_type_int' => 'Length of message entity within message (in UTF-8 codepoints)',
  'object_messageEntityBold' => 'Message entity representing **bold text**.',
  'object_messageEntityBold_param_offset_type_int' => 'Offset of message entity within message (in UTF-8 codepoints)',
  'object_messageEntityBold_param_length_type_int' => 'Length of message entity within message (in UTF-8 codepoints)',
  'object_messageEntityItalic' => 'Message entity representing *italic text*.',
  'object_messageEntityItalic_param_offset_type_int' => 'Offset of message entity within message (in UTF-8 codepoints)',
  'object_messageEntityItalic_param_length_type_int' => 'Length of message entity within message (in UTF-8 codepoints)',
  'object_messageEntityCode' => 'Message entity representing a `codeblock`.',
  'object_messageEntityCode_param_offset_type_int' => 'Offset of message entity within message (in UTF-8 codepoints)',
  'object_messageEntityCode_param_length_type_int' => 'Length of message entity within message (in UTF-8 codepoints)',
  'object_messageEntityPre' => 'Message entity representing a preformatted `codeblock`, allowing the user to specify a programming language for the codeblock.',
  'object_messageEntityPre_param_offset_type_int' => 'Offset of message entity within message (in UTF-8 codepoints)',
  'object_messageEntityPre_param_length_type_int' => 'Length of message entity within message (in UTF-8 codepoints)',
  'object_messageEntityPre_param_language_type_string' => 'Programming language of the code',
  'object_messageEntityTextUrl' => 'Message entity representing a [text url](https://google.com): for in-text urls like <https://google.com> use [messageEntityUrl](../constructors/messageEntityUrl.md).',
  'object_messageEntityTextUrl_param_offset_type_int' => 'Offset of message entity within message (in UTF-8 codepoints)',
  'object_messageEntityTextUrl_param_length_type_int' => 'Length of message entity within message (in UTF-8 codepoints)',
  'object_messageEntityTextUrl_param_url_type_string' => 'The actual URL',
  'object_messageEntityMentionName' => 'Message entity representing a [user mention](https://t.me/test): for *creating* a mention use [inputMessageEntityMentionName](../constructors/inputMessageEntityMentionName.md).',
  'object_messageEntityMentionName_param_offset_type_int' => 'Offset of message entity within message (in UTF-8 codepoints)',
  'object_messageEntityMentionName_param_length_type_int' => 'Length of message entity within message (in UTF-8 codepoints)',
  'object_messageEntityMentionName_param_user_id_type_int' => 'Identifier of the user that was mentioned',
  'object_inputMessageEntityMentionName' => 'Message entity that can be used to create a user [user mention](https://t.me/test): received mentions use the [messageEntityMentionName](../constructors/messageEntityMentionName.md) constructor, instead.',
  'object_inputMessageEntityMentionName_param_offset_type_int' => 'Offset of message entity within message (in UTF-8 codepoints)',
  'object_inputMessageEntityMentionName_param_length_type_int' => 'Length of message entity within message (in UTF-8 codepoints)',
  'object_inputMessageEntityMentionName_param_user_id_type_InputUser' => 'Identifier of the user that was mentioned',
  'object_inputChannelEmpty' => 'Represents the absence of a channel',
  'object_inputChannel' => 'Represents a channel',
  'object_inputChannel_param_channel_id_type_int' => 'Channel ID',
  'object_inputChannel_param_access_hash_type_long' => 'Access hash taken from the [channel](../constructors/channel.md) constructor',
  'object_contacts.resolvedPeer' => 'Resolved peer',
  'object_contacts.resolvedPeer_param_peer_type_Peer' => 'The peer',
  'object_contacts.resolvedPeer_param_chats_type_Vector t' => 'Chats',
  'object_contacts.resolvedPeer_param_users_type_Vector t' => 'Users',
  'object_messageRange' => 'Indicates a range of chat messages',
  'object_messageRange_param_min_id_type_int' => 'Start of range (message ID)',
  'object_messageRange_param_max_id_type_int' => 'End of range (message ID)',
  'object_updates.channelDifferenceEmpty' => 'There are no new updates',
  'object_updates.channelDifferenceEmpty_param_final_type_true' => 'Whether there are more updates that must be fetched (always false)',
  'object_updates.channelDifferenceEmpty_param_pts_type_int' => 'The latest [PTS](https://core.telegram.org/api/updates)',
  'object_updates.channelDifferenceEmpty_param_timeout_type_int' => 'Clients are supposed to refetch the channel difference after timeout seconds have elapsed',
  'object_updates.channelDifferenceTooLong' => 'The provided `pts + limit < remote pts`. Simply, there are too many updates to be fetched (more than `limit`), the client has to resolve the update gap in one of the following ways:

1. Delete all known messages in the chat, begin from scratch by refetching all messages manually with [getHistory](../methods/messages.getHistory.md). It is easy to implement, but suddenly disappearing messages looks awful for the user.
2. Save all messages loaded in the memory until application restart, but delete all messages from database. Messages left in the memory must be lazily updated using calls to [getHistory](../methods/messages.getHistory.md). It looks much smoothly for the user, he will need to redownload messages only after client restart. Unsynchronized messages left in the memory shouldn\'t be saved to database, results of [getHistory](../methods/messages.getHistory.md) and [getMessages](../methods/messages.getMessages.md) must be used to update state of deleted and edited messages left in the memory.
3. Save all messages loaded in the memory and stored in the database without saving that some messages form continuous ranges. Messages in the database will be excluded from results of getChatHistory and searchChatMessages after application restart and will be available only through getMessage. Every message should still be checked using getHistory. It has more disadvantages over 2) than advantages.
4. Save all messages with saving all data about continuous message ranges. Messages from the database may be used as results of getChatHistory and (if implemented continuous ranges support for searching shared media) searchChatMessages. The messages should still be lazily checked using getHistory, but they are still available offline. It is the best way for gaps support, but it is pretty hard to implement correctly. It should be also noted that some messages like live location messages shouldn\'t be deleted.',
  'object_updates.channelDifferenceTooLong_param_final_type_true' => 'Whether there are more updates that must be fetched (always false)',
  'object_updates.channelDifferenceTooLong_param_pts_type_int' => 'Pts',
  'object_updates.channelDifferenceTooLong_param_timeout_type_int' => 'Clients are supposed to refetch the channel difference after timeout seconds have elapsed',
  'object_updates.channelDifferenceTooLong_param_top_message_type_int' => 'Top message',
  'object_updates.channelDifferenceTooLong_param_read_inbox_max_id_type_int' => 'Read inbox max ID',
  'object_updates.channelDifferenceTooLong_param_read_outbox_max_id_type_int' => 'Read outbox max ID',
  'object_updates.channelDifferenceTooLong_param_unread_count_type_int' => 'Unread count',
  'object_updates.channelDifferenceTooLong_param_unread_mentions_count_type_int' => 'Unread mentions count',
  'object_updates.channelDifferenceTooLong_param_messages_type_Vector t' => 'Messages',
  'object_updates.channelDifferenceTooLong_param_chats_type_Vector t' => 'Chats',
  'object_updates.channelDifferenceTooLong_param_users_type_Vector t' => 'Users',
  'object_updates.channelDifference' => 'The new updates',
  'object_updates.channelDifference_param_final_type_true' => 'Whether there are more updates to be fetched using getDifference, starting from the provided `pts`',
  'object_updates.channelDifference_param_pts_type_int' => 'The [PTS](https://core.telegram.org/api/updates) from which to start getting updates the next time',
  'object_updates.channelDifference_param_timeout_type_int' => 'Clients are supposed to refetch the channel difference after timeout seconds have elapsed',
  'object_updates.channelDifference_param_new_messages_type_Vector t' => 'New messages',
  'object_updates.channelDifference_param_other_updates_type_Vector t' => 'Other updates',
  'object_updates.channelDifference_param_chats_type_Vector t' => 'Chats',
  'object_updates.channelDifference_param_users_type_Vector t' => 'Users',
  'object_channelMessagesFilterEmpty' => 'No filter',
  'object_channelMessagesFilter' => 'Filter for getting only certain types of channel messages',
  'object_channelMessagesFilter_param_exclude_new_messages_type_true' => 'Whether to exclude new messages from the search',
  'object_channelMessagesFilter_param_ranges_type_Vector t' => 'Ranges',
  'object_channelParticipant' => 'Channel/supergroup participant',
  'object_channelParticipant_param_user_id_type_int' => 'Pariticipant user ID',
  'object_channelParticipant_param_date_type_int' => 'Date joined',
  'object_channelParticipantSelf' => 'Myself',
  'object_channelParticipantSelf_param_user_id_type_int' => 'User ID',
  'object_channelParticipantSelf_param_inviter_id_type_int' => 'User that invited me to the channel/supergroup',
  'object_channelParticipantSelf_param_date_type_int' => 'When did I join the channel/supergroup',
  'object_channelParticipantCreator' => 'Channel/supergroup creator',
  'object_channelParticipantCreator_param_user_id_type_int' => 'User ID',
  'object_channelParticipantAdmin' => 'Admin',
  'object_channelParticipantAdmin_param_can_edit_type_true' => 'Can this admin promote other admins with the same permissions?',
  'object_channelParticipantAdmin_param_user_id_type_int' => 'Admin user ID',
  'object_channelParticipantAdmin_param_inviter_id_type_int' => 'User that invited the admin to the channel/group',
  'object_channelParticipantAdmin_param_promoted_by_type_int' => 'User that promoted the user to admin',
  'object_channelParticipantAdmin_param_date_type_int' => 'When did the user join',
  'object_channelParticipantAdmin_param_admin_rights_type_ChannelAdminRights' => 'Admin rights',
  'object_channelParticipantBanned' => 'Banned/kicked user',
  'object_channelParticipantBanned_param_left_type_true' => 'Whether the user has left the group',
  'object_channelParticipantBanned_param_user_id_type_int' => 'User ID',
  'object_channelParticipantBanned_param_kicked_by_type_int' => 'User was kicked by the specified admin',
  'object_channelParticipantBanned_param_date_type_int' => 'When did the user join the group',
  'object_channelParticipantBanned_param_banned_rights_type_ChannelBannedRights' => 'Banned rights',
  'object_channelParticipantsRecent' => 'Fetch only recent participants',
  'object_channelParticipantsAdmins' => 'Fetch only admin participants',
  'object_channelParticipantsKicked' => 'Fetch only kicked participants',
  'object_channelParticipantsKicked_param_q_type_string' => 'Optional filter for searching kicked participants by name (otherwise empty)',
  'object_channelParticipantsBots' => 'Fetch only bot participants',
  'object_channelParticipantsBanned' => 'Fetch only banned participants',
  'object_channelParticipantsBanned_param_q_type_string' => 'Optional filter for searching banned participants by name (otherwise empty)',
  'object_channelParticipantsSearch' => 'Query participants by name',
  'object_channelParticipantsSearch_param_q_type_string' => 'Search query',
  'object_channels.channelParticipants' => 'Represents multiple channel participants',
  'object_channels.channelParticipants_param_count_type_int' => 'Total number of participants that correspond to the given query',
  'object_channels.channelParticipants_param_participants_type_Vector t' => 'Participants',
  'object_channels.channelParticipants_param_users_type_Vector t' => 'Users',
  'object_channels.channelParticipantsNotModified' => 'No new participant info could be found',
  'object_channels.channelParticipant' => 'Represents a channel participant',
  'object_channels.channelParticipant_param_participant_type_ChannelParticipant' => 'The channel participant',
  'object_channels.channelParticipant_param_users_type_Vector t' => 'Users',
  'object_help.termsOfService' => 'Info about the latest telegram Terms Of Service',
  'object_help.termsOfService_param_text_type_string' => 'Text of the new terms',
  'object_foundGif' => 'Found GIF',
  'object_foundGif_param_url_type_string' => 'GIF URL',
  'object_foundGif_param_thumb_url_type_string' => 'Thumbnail URL',
  'object_foundGif_param_content_url_type_string' => 'Actual URL of the content to send',
  'object_foundGif_param_content_type_type_string' => 'Content-type of media',
  'object_foundGif_param_w_type_int' => 'Width of GIF',
  'object_foundGif_param_h_type_int' => 'Height of GIF',
  'object_foundGifCached' => 'Found cached results',
  'object_foundGifCached_param_url_type_string' => 'GIF URL',
  'object_foundGifCached_param_photo_type_Photo' => 'Thumbnail',
  'object_foundGifCached_param_document_type_Document' => 'Actual GIF document to send',
  'object_messages.foundGifs' => 'Found GIFs',
  'object_messages.foundGifs_param_next_offset_type_int' => 'Next offset to use when trying to [load more results](../methods/messages.searchGifs.md)',
  'object_messages.foundGifs_param_results_type_Vector t' => 'Results',
  'object_messages.savedGifsNotModified' => 'No new saved gifs were found',
  'object_messages.savedGifs' => 'Saved gifs',
  'object_messages.savedGifs_param_hash_type_int' => '[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)',
  'object_messages.savedGifs_param_gifs_type_Vector t' => 'Gifs',
  'object_inputBotInlineMessageMediaAuto' => 'A media',
  'object_inputBotInlineMessageMediaAuto_param_message_type_string' => 'Caption',
  'object_inputBotInlineMessageMediaAuto_param_entities_type_Vector t' => 'Entities',
  'object_inputBotInlineMessageMediaAuto_param_reply_markup_type_ReplyMarkup' => 'Inline keyboard',
  'object_inputBotInlineMessageText' => 'Simple text message',
  'object_inputBotInlineMessageText_param_no_webpage_type_true' => 'Disable webpage preview',
  'object_inputBotInlineMessageText_param_message_type_string' => 'Message',
  'object_inputBotInlineMessageText_param_entities_type_Vector t' => 'Entities',
  'object_inputBotInlineMessageText_param_reply_markup_type_ReplyMarkup' => 'Inline keyboard',
  'object_inputBotInlineMessageMediaGeo' => 'Geolocation',
  'object_inputBotInlineMessageMediaGeo_param_geo_point_type_InputGeoPoint' => 'Geolocation',
  'object_inputBotInlineMessageMediaGeo_param_period_type_int' => 'Validity period',
  'object_inputBotInlineMessageMediaGeo_param_reply_markup_type_ReplyMarkup' => 'Reply markup for bot/inline keyboards',
  'object_inputBotInlineMessageMediaVenue' => 'Venue',
  'object_inputBotInlineMessageMediaVenue_param_geo_point_type_InputGeoPoint' => 'Geolocation',
  'object_inputBotInlineMessageMediaVenue_param_title_type_string' => 'Venue name',
  'object_inputBotInlineMessageMediaVenue_param_address_type_string' => 'Address',
  'object_inputBotInlineMessageMediaVenue_param_provider_type_string' => 'Venue provider: currently only "foursquare" needs to be supported',
  'object_inputBotInlineMessageMediaVenue_param_venue_id_type_string' => 'Venue ID in the provider\'s database',
  'object_inputBotInlineMessageMediaVenue_param_reply_markup_type_ReplyMarkup' => 'Inline keyboard',
  'object_inputBotInlineMessageMediaContact' => 'A contact',
  'object_inputBotInlineMessageMediaContact_param_phone_number_type_string' => 'Phone number',
  'object_inputBotInlineMessageMediaContact_param_first_name_type_string' => 'First name',
  'object_inputBotInlineMessageMediaContact_param_last_name_type_string' => 'Last name',
  'object_inputBotInlineMessageMediaContact_param_reply_markup_type_ReplyMarkup' => 'Inline keyboard',
  'object_inputBotInlineMessageGame' => 'A game',
  'object_inputBotInlineMessageGame_param_reply_markup_type_ReplyMarkup' => 'Inline keyboard',
  'object_inputBotInlineResult' => 'An inline bot result',
  'object_inputBotInlineResult_param_id_type_string' => 'ID of result',
  'object_inputBotInlineResult_param_type_type_string' => 'Result type (see [bot API docs](https://core.telegram.org/bots/api#inlinequeryresult))',
  'object_inputBotInlineResult_param_title_type_string' => 'Result title',
  'object_inputBotInlineResult_param_description_type_string' => 'Result description',
  'object_inputBotInlineResult_param_url_type_string' => 'URL of result',
  'object_inputBotInlineResult_param_thumb_url_type_string' => 'Thumbnail URL',
  'object_inputBotInlineResult_param_content_url_type_string' => 'Content URL',
  'object_inputBotInlineResult_param_content_type_type_string' => 'Content type',
  'object_inputBotInlineResult_param_w_type_int' => 'Width',
  'object_inputBotInlineResult_param_h_type_int' => 'Height',
  'object_inputBotInlineResult_param_duration_type_int' => 'Duration',
  'object_inputBotInlineResult_param_sendMessage_type_InputBotInlineMessage' => 'Message to send',
  'object_inputBotInlineResultPhoto' => 'Photo',
  'object_inputBotInlineResultPhoto_param_id_type_string' => 'Result ID',
  'object_inputBotInlineResultPhoto_param_type_type_string' => 'Result type (see [bot API docs](https://core.telegram.org/bots/api#inlinequeryresult))',
  'object_inputBotInlineResultPhoto_param_photo_type_InputPhoto' => 'Photo to send',
  'object_inputBotInlineResultPhoto_param_sendMessage_type_InputBotInlineMessage' => 'Message to send',
  'object_inputBotInlineResultDocument' => 'Document (media of any type except for photos)',
  'object_inputBotInlineResultDocument_param_id_type_string' => 'Result ID',
  'object_inputBotInlineResultDocument_param_type_type_string' => 'Result type (see [bot API docs](https://core.telegram.org/bots/api#inlinequeryresult))',
  'object_inputBotInlineResultDocument_param_title_type_string' => 'Result title',
  'object_inputBotInlineResultDocument_param_description_type_string' => 'Result description',
  'object_inputBotInlineResultDocument_param_document_type_InputDocument' => 'Document to send',
  'object_inputBotInlineResultDocument_param_sendMessage_type_InputBotInlineMessage' => 'Message to send',
  'object_inputBotInlineResultGame' => 'Game',
  'object_inputBotInlineResultGame_param_id_type_string' => 'Result ID',
  'object_inputBotInlineResultGame_param_short_name_type_string' => 'Game short name',
  'object_inputBotInlineResultGame_param_sendMessage_type_InputBotInlineMessage' => 'Message to send',
  'object_botInlineMessageMediaAuto' => 'Send whatever media is attached to the [botInlineMediaResult](../constructors/botInlineMediaResult.md)',
  'object_botInlineMessageMediaAuto_param_message_type_string' => 'Caption',
  'object_botInlineMessageMediaAuto_param_entities_type_Vector t' => 'Entities',
  'object_botInlineMessageMediaAuto_param_reply_markup_type_ReplyMarkup' => 'Inline keyboard',
  'object_botInlineMessageText' => 'Send a simple text message',
  'object_botInlineMessageText_param_no_webpage_type_true' => 'Disable webpage preview',
  'object_botInlineMessageText_param_message_type_string' => 'The message',
  'object_botInlineMessageText_param_entities_type_Vector t' => 'Entities',
  'object_botInlineMessageText_param_reply_markup_type_ReplyMarkup' => 'Inline keyboard',
  'object_botInlineMessageMediaGeo' => 'Send a geolocation',
  'object_botInlineMessageMediaGeo_param_geo_type_GeoPoint' => 'Geolocation',
  'object_botInlineMessageMediaGeo_param_period_type_int' => 'Validity period',
  'object_botInlineMessageMediaGeo_param_reply_markup_type_ReplyMarkup' => 'Inline keyboard',
  'object_botInlineMessageMediaVenue' => 'Send a venue',
  'object_botInlineMessageMediaVenue_param_geo_type_GeoPoint' => 'Geolocation of venue',
  'object_botInlineMessageMediaVenue_param_title_type_string' => 'Venue name',
  'object_botInlineMessageMediaVenue_param_address_type_string' => 'Address',
  'object_botInlineMessageMediaVenue_param_provider_type_string' => 'Venue provider: currently only "foursquare" needs to be supported',
  'object_botInlineMessageMediaVenue_param_venue_id_type_string' => 'Venue ID in the provider\'s database',
  'object_botInlineMessageMediaVenue_param_reply_markup_type_ReplyMarkup' => 'Inline keyboard',
  'object_botInlineMessageMediaContact' => 'Send a contact',
  'object_botInlineMessageMediaContact_param_phone_number_type_string' => 'Phone number',
  'object_botInlineMessageMediaContact_param_first_name_type_string' => 'First name',
  'object_botInlineMessageMediaContact_param_last_name_type_string' => 'Last name',
  'object_botInlineMessageMediaContact_param_reply_markup_type_ReplyMarkup' => 'Inline keyboard',
  'object_botInlineResult' => 'Generic result',
  'object_botInlineResult_param_id_type_string' => 'Result ID',
  'object_botInlineResult_param_type_type_string' => 'Result type (see [bot API docs](https://core.telegram.org/bots/api#inlinequeryresult))',
  'object_botInlineResult_param_title_type_string' => 'Result title',
  'object_botInlineResult_param_description_type_string' => 'Result description',
  'object_botInlineResult_param_url_type_string' => 'URL of article or webpage',
  'object_botInlineResult_param_thumb_url_type_string' => 'Thumbnail URL',
  'object_botInlineResult_param_content_url_type_string' => 'Content URL',
  'object_botInlineResult_param_content_type_type_string' => 'Content type',
  'object_botInlineResult_param_w_type_int' => 'Width',
  'object_botInlineResult_param_h_type_int' => 'Height',
  'object_botInlineResult_param_duration_type_int' => 'Duration',
  'object_botInlineResult_param_sendMessage_type_BotInlineMessage' => 'Message to send',
  'object_botInlineMediaResult' => 'Media result',
  'object_botInlineMediaResult_param_id_type_string' => 'Result ID',
  'object_botInlineMediaResult_param_type_type_string' => 'Result type (see [bot API docs](https://core.telegram.org/bots/api#inlinequeryresult))',
  'object_botInlineMediaResult_param_photo_type_Photo' => 'If type is `photo`, the photo to send',
  'object_botInlineMediaResult_param_document_type_Document' => 'If type is `document`, the document to send',
  'object_botInlineMediaResult_param_title_type_string' => 'Result title',
  'object_botInlineMediaResult_param_description_type_string' => 'Description',
  'object_botInlineMediaResult_param_sendMessage_type_BotInlineMessage' => 'Send message',
  'object_messages.botResults' => 'Result of a query to an inline bot',
  'object_messages.botResults_param_gallery_type_true' => 'Whether the result is a picture gallery',
  'object_messages.botResults_param_query_id_type_long' => 'Query ID',
  'object_messages.botResults_param_next_offset_type_string' => 'The next offset to use when navigating through results',
  'object_messages.botResults_param_switch_pm_type_InlineBotSwitchPM' => 'Whether the bot requested the user to message him in private',
  'object_messages.botResults_param_results_type_Vector t' => 'Results',
  'object_messages.botResults_param_cache_time_type_int' => 'Caching validity of the results',
  'object_messages.botResults_param_users_type_Vector t' => 'Users',
  'object_exportedMessageLink' => 'Link to a message in a supergroup/channel',
  'object_exportedMessageLink_param_link_type_string' => 'URL',
  'object_exportedMessageLink_param_html_type_string' => 'Embed code',
  'object_messageFwdHeader' => 'Info about a forwarded message',
  'object_messageFwdHeader_param_from_id_type_int' => 'The ID of the user that originally sent the message',
  'object_messageFwdHeader_param_date_type_int' => 'When was the message originally sent',
  'object_messageFwdHeader_param_channel_id_type_int' => 'ID of the channel from which the message was forwarded',
  'object_messageFwdHeader_param_channel_post_type_int' => 'ID of the channel message that was forwarded',
  'object_messageFwdHeader_param_post_author_type_string' => 'For channels and if signatures are enabled, author of the channel message',
  'object_messageFwdHeader_param_saved_from_peer_type_Peer' => 'Only for messages forwarded to the current user (inputPeerSelf), full info about the user/channel that originally sent the message',
  'object_messageFwdHeader_param_saved_from_msg_id_type_int' => 'Only for messages forwarded to the current user (inputPeerSelf), ID of the message that was forwarded from the original user/channel',
  'object_auth.codeTypeSms' => 'Type of verification code that will be sent next if you call the resendCode method: SMS code',
  'object_auth.codeTypeCall' => 'Type of verification code that will be sent next if you call the resendCode method: SMS code',
  'object_auth.codeTypeFlashCall' => 'Type of verification code that will be sent next if you call the resendCode method: SMS code',
  'object_auth.sentCodeTypeApp' => 'The code was sent through the telegram app',
  'object_auth.sentCodeTypeApp_param_length_type_int' => 'Length of the code in bytes',
  'object_auth.sentCodeTypeSms' => 'The code was sent via SMS',
  'object_auth.sentCodeTypeSms_param_length_type_int' => 'Length of the code in bytes',
  'object_auth.sentCodeTypeCall' => 'The code will be sent via a phone call: a synthesized voice will tell the user which verification code to input.',
  'object_auth.sentCodeTypeCall_param_length_type_int' => 'Length of the verification code',
  'object_auth.sentCodeTypeFlashCall' => 'The code will be sent via a flash phone call, that will be closed immediately. The phone code will then be the phone number itself, just make sure that the phone number matches the specified pattern.',
  'object_auth.sentCodeTypeFlashCall_param_pattern_type_string' => '[pattern](https://core.telegram.org/api/pattern) to match',
  'object_messages.botCallbackAnswer' => 'Callback answer sent by the bot in response to a button press',
  'object_messages.botCallbackAnswer_param_alert_type_true' => 'Whether an alert should be shown to the user instead of a toast notification',
  'object_messages.botCallbackAnswer_param_has_url_type_true' => 'Whether an URL is present',
  'object_messages.botCallbackAnswer_param_native_ui_type_true' => 'Whether to show games in WebView or in native UI.',
  'object_messages.botCallbackAnswer_param_message_type_string' => 'Alert to show',
  'object_messages.botCallbackAnswer_param_url_type_string' => 'URL to open',
  'object_messages.botCallbackAnswer_param_cache_time_type_int' => 'For how long should this answer be cached',
  'object_messages.messageEditData' => 'Message edit data for media',
  'object_messages.messageEditData_param_caption_type_true' => 'Media caption, if the specified media\'s caption can be edited',
  'object_inputBotInlineMessageID' => 'Represents a sent inline message from the perspective of a bot',
  'object_inputBotInlineMessageID_param_dc_id_type_int' => 'DC ID to use when working with this inline message',
  'object_inputBotInlineMessageID_param_id_type_long' => 'ID of message',
  'object_inputBotInlineMessageID_param_access_hash_type_long' => 'Access hash of message',
  'object_inlineBotSwitchPM' => 'The bot requested the user to message him in private',
  'object_inlineBotSwitchPM_param_text_type_string' => 'Text for the button that switches the user to a private chat with the bot and sends the bot a start message with the parameter `start_parameter` (can be empty)',
  'object_inlineBotSwitchPM_param_start_param_type_string' => 'The parameter for the `/start parameter`',
  'object_messages.peerDialogs' => 'Dialog info of multiple peers',
  'object_messages.peerDialogs_param_dialogs_type_Vector t' => 'Dialogs',
  'object_messages.peerDialogs_param_messages_type_Vector t' => 'Messages',
  'object_messages.peerDialogs_param_chats_type_Vector t' => 'Chats',
  'object_messages.peerDialogs_param_users_type_Vector t' => 'Users',
  'object_messages.peerDialogs_param_state_type_updates.State' => 'Current [update state of dialog](https://core.telegram.org/api/updates)',
  'object_topPeer' => 'Top peer',
  'object_topPeer_param_peer_type_Peer' => 'Peer',
  'object_topPeer_param_rating_type_double' => 'Rating as computer in [top peer rating »](https://core.telegram.org/api/top-rating)',
  'object_topPeerCategoryBotsPM' => 'Most used bots',
  'object_topPeerCategoryBotsInline' => 'Most used inline bots',
  'object_topPeerCategoryCorrespondents' => 'Users we\'ve chatted most frequently with',
  'object_topPeerCategoryGroups' => 'Often-opened groups and supergroups',
  'object_topPeerCategoryChannels' => 'Most frequently visited channels',
  'object_topPeerCategoryPhoneCalls' => 'Most frequently called users',
  'object_topPeerCategoryPeers' => 'Top peer category',
  'object_topPeerCategoryPeers_param_category_type_TopPeerCategory' => 'Top peer category of peers',
  'object_topPeerCategoryPeers_param_count_type_int' => 'Count of peers',
  'object_topPeerCategoryPeers_param_peers_type_Vector t' => 'Peers',
  'object_contacts.topPeersNotModified' => 'Top peer info hasn\'t changed',
  'object_contacts.topPeers' => 'Top peers',
  'object_contacts.topPeers_param_categories_type_Vector t' => 'Categories',
  'object_contacts.topPeers_param_chats_type_Vector t' => 'Chats',
  'object_contacts.topPeers_param_users_type_Vector t' => 'Users',
  'object_draftMessageEmpty' => 'Empty draft',
  'object_draftMessage' => 'Represents a message [draft](https://core.telegram.org/api/drafts).',
  'object_draftMessage_param_no_webpage_type_true' => 'Whether no webpage preview will be generated',
  'object_draftMessage_param_reply_to_msg_id_type_int' => 'The message this message will reply to',
  'object_draftMessage_param_message_type_string' => 'The draft',
  'object_draftMessage_param_entities_type_Vector t' => 'Entities',
  'object_draftMessage_param_date_type_int' => 'Date of last update of the draft.',
  'object_messages.featuredStickersNotModified' => 'Featured stickers haven\'t changed',
  'object_messages.featuredStickers' => 'Featured stickersets',
  'object_messages.featuredStickers_param_hash_type_int' => '[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)',
  'object_messages.featuredStickers_param_sets_type_Vector t' => 'Sets',
  'object_messages.featuredStickers_param_unread_type_Vector t' => 'Unread',
  'object_messages.recentStickersNotModified' => 'No new recent sticker was found',
  'object_messages.recentStickers' => 'Recently used stickers',
  'object_messages.recentStickers_param_hash_type_int' => '[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)',
  'object_messages.recentStickers_param_stickers_type_Vector t' => 'Stickers',
  'object_messages.archivedStickers' => 'Archived stickersets',
  'object_messages.archivedStickers_param_count_type_int' => 'Number of archived stickers',
  'object_messages.archivedStickers_param_sets_type_Vector t' => 'Sets',
  'object_messages.stickerSetInstallResultSuccess' => 'The stickerset was installed successfully',
  'object_messages.stickerSetInstallResultArchive' => 'The stickerset was installed, but since there are too many stickersets some were archived',
  'object_messages.stickerSetInstallResultArchive_param_sets_type_Vector t' => 'Sets',
  'object_stickerSetCovered' => 'Stickerset, with a specific sticker as preview',
  'object_stickerSetCovered_param_set_type_StickerSet' => 'Stickerset',
  'object_stickerSetCovered_param_cover_type_Document' => 'Preview',
  'object_stickerSetMultiCovered' => 'Stickerset, with a specific stickers as preview',
  'object_stickerSetMultiCovered_param_set_type_StickerSet' => 'Stickerset',
  'object_stickerSetMultiCovered_param_covers_type_Vector t' => 'Covers',
  'object_maskCoords' => 'Position on a photo where a mask should be placed

The `n` position indicates where the mask should be placed:

- 0 => Relative to the forehead
- 1 => Relative to the eyes
- 2 => Relative to the mouth
- 3 => Relative to the chin',
  'object_maskCoords_param_n_type_int' => 'Part of the face, relative to which the mask should be placed',
  'object_maskCoords_param_x_type_double' => 'Shift by X-axis measured in widths of the mask scaled to the face size, from left to right. (For example, -1.0 will place the mask just to the left of the default mask position)',
  'object_maskCoords_param_y_type_double' => 'Shift by Y-axis measured in widths of the mask scaled to the face size, from left to right. (For example, -1.0 will place the mask just to the left of the default mask position)',
  'object_maskCoords_param_zoom_type_double' => 'Mask scaling coefficient. (For example, 2.0 means a doubled size)',
  'object_inputStickeredMediaPhoto' => 'A photo with stickers attached',
  'object_inputStickeredMediaPhoto_param_id_type_InputPhoto' => 'The photo',
  'object_inputStickeredMediaDocument' => 'A document with stickers attached',
  'object_inputStickeredMediaDocument_param_id_type_InputDocument' => 'The document',
  'object_game' => 'Indicates an already sent game',
  'object_game_param_id_type_long' => 'ID of the game',
  'object_game_param_access_hash_type_long' => 'Access hash of the game',
  'object_game_param_short_name_type_string' => 'Short name for the game',
  'object_game_param_title_type_string' => 'Title of the game',
  'object_game_param_description_type_string' => 'Game description',
  'object_game_param_photo_type_Photo' => 'Game preview',
  'object_game_param_document_type_Document' => 'Optional attached document',
  'object_inputGameID' => 'Indicates an already sent game',
  'object_inputGameID_param_id_type_long' => 'Game ID from [Game](../types/Game.md) constructor',
  'object_inputGameID_param_access_hash_type_long' => 'Access hash from [Game](../types/Game.md) constructor',
  'object_inputGameShortName' => 'Game by short name',
  'object_inputGameShortName_param_bot_id_type_InputUser' => 'The bot that provides the game',
  'object_inputGameShortName_param_short_name_type_string' => 'The game\'s short name',
  'object_highScore' => 'Game highscore',
  'object_highScore_param_pos_type_int' => 'Position in highscore list',
  'object_highScore_param_user_id_type_int' => 'User ID',
  'object_highScore_param_score_type_int' => 'Score',
  'object_messages.highScores' => 'Highscores in a game',
  'object_messages.highScores_param_scores_type_Vector t' => 'Scores',
  'object_messages.highScores_param_users_type_Vector t' => 'Users',
  'object_textEmpty' => 'Empty rich text element',
  'object_textPlain' => 'Plain text',
  'object_textPlain_param_text_type_string' => 'Text',
  'object_textBold' => '**Bold** text',
  'object_textBold_param_text_type_RichText' => 'Text',
  'object_textItalic' => '*Italic* text',
  'object_textItalic_param_text_type_RichText' => 'Text',
  'object_textUnderline' => 'Underlined text',
  'object_textUnderline_param_text_type_RichText' => 'Text',
  'object_textStrike' => '<del>Strikethrough</del> text',
  'object_textStrike_param_text_type_RichText' => 'Text',
  'object_textFixed' => '`fixed-width` rich text',
  'object_textFixed_param_text_type_RichText' => 'Text',
  'object_textUrl' => 'Link',
  'object_textUrl_param_text_type_RichText' => 'Text of link',
  'object_textUrl_param_url_type_string' => 'Webpage HTTP URL',
  'object_textUrl_param_webpage_id_type_long' => 'If a preview was already generated for the page, the page ID',
  'object_textEmail' => 'Rich text email link',
  'object_textEmail_param_text_type_RichText' => 'Link text',
  'object_textEmail_param_email_type_string' => 'Email address',
  'object_textConcat' => 'Concatenation of rich texts',
  'object_textConcat_param_texts_type_Vector t' => 'Texts',
  'object_pageBlockUnsupported' => 'Unsupported IV element',
  'object_pageBlockTitle' => 'Title',
  'object_pageBlockTitle_param_text_type_RichText' => 'Title',
  'object_pageBlockSubtitle' => 'Subtitle',
  'object_pageBlockSubtitle_param_text_type_RichText' => 'Text',
  'object_pageBlockAuthorDate' => 'Author and date of creation of article',
  'object_pageBlockAuthorDate_param_author_type_RichText' => 'Author name',
  'object_pageBlockAuthorDate_param_published_date_type_int' => 'Date of pubblication',
  'object_pageBlockHeader' => 'Page header',
  'object_pageBlockHeader_param_text_type_RichText' => 'Contents',
  'object_pageBlockSubheader' => 'Subheader',
  'object_pageBlockSubheader_param_text_type_RichText' => 'Subheader',
  'object_pageBlockFooter' => 'Page footer',
  'object_pageBlockFooter_param_text_type_RichText' => 'Contents',
  'object_pageBlockList' => 'Unordered list of IV blocks',
  'object_pageBlockList_param_ordered_type_Bool' => 'Ordered?',
  'object_pageBlockList_param_items_type_Vector t' => 'Items',
  'object_pageBlockBlockquote' => 'Quote (equivalent to the HTML `<blockquote>`)',
  'object_pageBlockBlockquote_param_text_type_RichText' => 'Quote contents',
  'object_pageBlockBlockquote_param_caption_type_RichText' => 'Caption',
  'object_pageBlockPullquote' => 'Pullquote',
  'object_pageBlockPullquote_param_text_type_RichText' => 'Text',
  'object_pageBlockPullquote_param_caption_type_RichText' => 'Caption',
  'object_pageBlockPhoto' => 'A photo',
  'object_pageBlockPhoto_param_photo_id_type_long' => 'Photo ID',
  'object_pageBlockPhoto_param_caption_type_RichText' => 'Caption',
  'object_pageBlockVideo' => 'Video',
  'object_pageBlockVideo_param_autoplay_type_true' => 'Whether the video is set to autoplay',
  'object_pageBlockVideo_param_loop_type_true' => 'Whether the video is set to loop',
  'object_pageBlockVideo_param_video_id_type_long' => 'Video ID',
  'object_pageBlockVideo_param_caption_type_RichText' => 'Caption',
  'object_pageBlockEmbed' => 'An embedded webpage',
  'object_pageBlockEmbed_param_full_width_type_true' => 'Whether the block should be full width',
  'object_pageBlockEmbed_param_allow_scrolling_type_true' => 'Whether scrolling should be allowed',
  'object_pageBlockEmbed_param_url_type_string' => 'Web page URL, if available',
  'object_pageBlockEmbed_param_html_type_string' => 'HTML-markup of the embedded page',
  'object_pageBlockEmbed_param_poster_photo_id_type_long' => 'Poster photo, if available',
  'object_pageBlockEmbed_param_w_type_int' => 'Block width, if known',
  'object_pageBlockEmbed_param_h_type_int' => 'Block height, if known',
  'object_pageBlockEmbed_param_caption_type_RichText' => 'Caption',
  'object_pageBlockEmbedPost' => 'An embedded post',
  'object_pageBlockEmbedPost_param_url_type_string' => 'Web page URL',
  'object_pageBlockEmbedPost_param_webpage_id_type_long' => 'ID of generated webpage preview',
  'object_pageBlockEmbedPost_param_author_photo_id_type_long' => 'ID of the author\'s photo',
  'object_pageBlockEmbedPost_param_author_type_string' => 'Author name',
  'object_pageBlockEmbedPost_param_date_type_int' => 'Creation date',
  'object_pageBlockEmbedPost_param_blocks_type_Vector t' => 'Blocks',
  'object_pageBlockEmbedPost_param_caption_type_RichText' => 'Caption',
  'object_pageBlockCollage' => 'Collage of media',
  'object_pageBlockCollage_param_items_type_Vector t' => 'Items',
  'object_pageBlockCollage_param_caption_type_RichText' => 'Caption',
  'object_pageBlockSlideshow' => 'Slideshow',
  'object_pageBlockSlideshow_param_items_type_Vector t' => 'Items',
  'object_pageBlockSlideshow_param_caption_type_RichText' => 'Caption',
  'object_pageBlockChannel' => 'Reference to a telegram channel',
  'object_pageBlockChannel_param_channel_type_Chat' => 'The channel/supergroup/chat',
  'object_pageBlockAudio' => 'Audio',
  'object_pageBlockAudio_param_audio_id_type_long' => 'Audio ID (to be fetched from the container [page](../constructors/page.md) constructor',
  'object_pageBlockAudio_param_caption_type_RichText' => 'Caption',
  'object_pagePart' => 'Page part',
  'object_pagePart_param_blocks_type_Vector t' => 'Blocks',
  'object_pagePart_param_photos_type_Vector t' => 'Photos',
  'object_pagePart_param_documents_type_Vector t' => 'Documents',
  'object_pageFull' => 'Page full',
  'object_pageFull_param_blocks_type_Vector t' => 'Blocks',
  'object_pageFull_param_photos_type_Vector t' => 'Photos',
  'object_pageFull_param_documents_type_Vector t' => 'Documents',
  'object_phoneCallDiscardReasonMissed' => 'The phone call was missed',
  'object_phoneCallDiscardReasonDisconnect' => 'The phone call was disconnected',
  'object_phoneCallDiscardReasonHangup' => 'The phone call was ended normally',
  'object_phoneCallDiscardReasonBusy' => 'The phone call was discared because the user is busy in another call',
  'object_dataJSON' => 'Represents a json-encoded object',
  'object_dataJSON_param_data_type_string' => 'JSON-encoded object',
  'object_labeledPrice' => 'This object represents a portion of the price for goods or services.',
  'object_labeledPrice_param_label_type_string' => 'Portion label',
  'object_labeledPrice_param_amount_type_long' => 'Price of the product in the smallest units of the currency (integer, not float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).',
  'object_invoice' => 'Invoice',
  'object_invoice_param_test_type_true' => 'Test invoice',
  'object_invoice_param_name_requested_type_true' => 'Set this flag if you require the user\'s full name to complete the order',
  'object_invoice_param_phone_requested_type_true' => 'Set this flag if you require the user\'s phone number to complete the order',
  'object_invoice_param_email_requested_type_true' => 'Set this flag if you require the user\'s email address to complete the order',
  'object_invoice_param_shipping_address_requested_type_true' => 'Set this flag if you require the user\'s shipping address to complete the order',
  'object_invoice_param_flexible_type_true' => 'Set this flag if the final price depends on the shipping method',
  'object_invoice_param_phone_to_provider_type_true' => 'Set this flag if user\'s phone number should be sent to provider',
  'object_invoice_param_email_to_provider_type_true' => 'Set this flag if user\'s email address should be sent to provider',
  'object_invoice_param_currency_type_string' => 'Three-letter ISO 4217 [currency](https://core.telegram.org/bots/payments#supported-currencies) code',
  'object_invoice_param_prices_type_Vector t' => 'Prices',
  'object_paymentCharge' => 'Payment identifier',
  'object_paymentCharge_param_id_type_string' => 'Telegram payment identifier',
  'object_paymentCharge_param_provider_charge_id_type_string' => 'Provider payment identifier',
  'object_postAddress' => 'Shipping address',
  'object_postAddress_param_street_line1_type_string' => 'First line for the address',
  'object_postAddress_param_street_line2_type_string' => 'Second line for the address',
  'object_postAddress_param_city_type_string' => 'City',
  'object_postAddress_param_state_type_string' => 'State, if applicable (empty otherwise)',
  'object_postAddress_param_country_iso2_type_string' => 'ISO 3166-1 alpha-2 country code',
  'object_postAddress_param_post_code_type_string' => 'Address post code',
  'object_paymentRequestedInfo' => 'Order info provided by the user',
  'object_paymentRequestedInfo_param_name_type_string' => 'User\'s full name',
  'object_paymentRequestedInfo_param_phone_type_string' => 'User\'s phone number',
  'object_paymentRequestedInfo_param_email_type_string' => 'User\'s email address',
  'object_paymentRequestedInfo_param_shipping_address_type_PostAddress' => 'User\'s shipping address',
  'object_paymentSavedCredentialsCard' => 'Saved credit card',
  'object_paymentSavedCredentialsCard_param_id_type_string' => 'Card ID',
  'object_paymentSavedCredentialsCard_param_title_type_string' => 'Title',
  'object_webDocument' => 'Remote document',
  'object_webDocument_param_url_type_string' => 'Document URL',
  'object_webDocument_param_access_hash_type_long' => 'Access hash',
  'object_webDocument_param_size_type_int' => 'File size',
  'object_webDocument_param_mime_type_type_string' => 'MIME type',
  'object_webDocument_param_attributes_type_Vector t' => 'Attributes',
  'object_webDocument_param_dc_id_type_int' => 'DC ID',
  'object_inputWebDocument' => 'The document',
  'object_inputWebDocument_param_url_type_string' => 'Remote document URL to be downloaded using the appropriate [method](https://core.telegram.org/api/files)',
  'object_inputWebDocument_param_size_type_int' => 'Remote file size',
  'object_inputWebDocument_param_mime_type_type_string' => 'Mime type',
  'object_inputWebDocument_param_attributes_type_Vector t' => 'Attributes',
  'object_inputWebFileLocation' => 'Location of a remote HTTP(s) file',
  'object_inputWebFileLocation_param_url_type_string' => 'HTTP URL of file',
  'object_inputWebFileLocation_param_access_hash_type_long' => 'Access hash',
  'object_upload.webFile' => 'Represents a chunk of an [HTTP webfile](https://core.telegram.org/api/files) downloaded through telegram\'s secure MTProto servers',
  'object_upload.webFile_param_size_type_int' => 'File size',
  'object_upload.webFile_param_mime_type_type_string' => 'Mime type',
  'object_upload.webFile_param_file_type_type_storage.FileType' => 'File type',
  'object_upload.webFile_param_mtime_type_int' => 'Modified time',
  'object_upload.webFile_param_bytes_type_bytes' => 'Data',
  'object_payments.paymentForm' => 'Payment form',
  'object_payments.paymentForm_param_can_save_credentials_type_true' => 'Whether the user can choose to save credentials.',
  'object_payments.paymentForm_param_password_missing_type_true' => 'Indicates that the user can save payment credentials, but only after setting up a [2FA password](https://core.telegram.org/api/srp) (currently the account doesn\'t have a [2FA password](https://core.telegram.org/api/srp))',
  'object_payments.paymentForm_param_bot_id_type_int' => 'Bot ID',
  'object_payments.paymentForm_param_invoice_type_Invoice' => 'Invoice',
  'object_payments.paymentForm_param_provider_id_type_int' => 'Payment provider ID.',
  'object_payments.paymentForm_param_url_type_string' => 'Payment form URL',
  'object_payments.paymentForm_param_native_provider_type_string' => 'Payment provider name.<br>One of the following:<br>\\- `stripe`',
  'object_payments.paymentForm_param_native_params_type_DataJSON' => 'Contains information about the payment provider, if available, to support it natively without the need for opening the URL.<br>A JSON object that can contain the following fields:<br><br>\\- `publishable_key`: Stripe API publishable key<br>\\- `apple_pay_merchant_id`: Apple Pay merchant ID<br>\\- `android_pay_public_key`: Android Pay public key<br>\\- `android_pay_bgcolor`: Android Pay form background color<br>\\- `android_pay_inverse`: Whether to use the dark theme in the Android Pay form<br>\\- `need_country`: True, if the user country must be provided,<br>\\- `need_zip`: True, if the user ZIP/postal code must be provided,<br>\\- `need_cardholder_name`: True, if the cardholder name must be provided<br>',
  'object_payments.paymentForm_param_saved_info_type_PaymentRequestedInfo' => 'Saved server-side order information',
  'object_payments.paymentForm_param_saved_credentials_type_PaymentSavedCredentials' => 'Contains information about saved card credentials',
  'object_payments.paymentForm_param_users_type_Vector t' => 'Users',
  'object_payments.validatedRequestedInfo' => 'Validated user-provided info',
  'object_payments.validatedRequestedInfo_param_id_type_string' => 'ID',
  'object_payments.validatedRequestedInfo_param_shipping_options_type_Vector t' => 'Shipping options',
  'object_payments.paymentResult' => 'Payment result',
  'object_payments.paymentResult_param_updates_type_Updates' => 'Info about the payment',
  'object_payments.paymentVerficationNeeded' => 'Payment verfication needed',
  'object_payments.paymentVerficationNeeded_param_url_type_string' => 'URL',
  'object_payments.paymentReceipt' => 'Receipt',
  'object_payments.paymentReceipt_param_date_type_int' => 'Date of generation',
  'object_payments.paymentReceipt_param_bot_id_type_int' => 'Bot ID',
  'object_payments.paymentReceipt_param_invoice_type_Invoice' => 'Invoice',
  'object_payments.paymentReceipt_param_provider_id_type_int' => 'Provider ID',
  'object_payments.paymentReceipt_param_info_type_PaymentRequestedInfo' => 'Info',
  'object_payments.paymentReceipt_param_shipping_type_ShippingOption' => 'Selected shipping option',
  'object_payments.paymentReceipt_param_currency_type_string' => 'Three-letter ISO 4217 [currency](https://core.telegram.org/bots/payments#supported-currencies) code',
  'object_payments.paymentReceipt_param_total_amount_type_long' => 'Total amount in the smallest units of the currency (integer, not float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).',
  'object_payments.paymentReceipt_param_credentials_title_type_string' => 'Payment credential name',
  'object_payments.paymentReceipt_param_users_type_Vector t' => 'Users',
  'object_payments.savedInfo' => 'Saved server-side order information',
  'object_payments.savedInfo_param_has_saved_credentials_type_true' => 'Whether the user has some saved payment credentials',
  'object_payments.savedInfo_param_saved_info_type_PaymentRequestedInfo' => 'Saved server-side order information',
  'object_inputPaymentCredentialsSaved' => 'Saved payment credentials',
  'object_inputPaymentCredentialsSaved_param_id_type_string' => 'Credential ID',
  'object_inputPaymentCredentialsSaved_param_tmp_password_type_bytes' => 'Temporary password',
  'object_inputPaymentCredentials' => 'Payment credentials',
  'object_inputPaymentCredentials_param_save_type_true' => 'Save payment credential for future use',
  'object_inputPaymentCredentials_param_data_type_DataJSON' => 'Payment credentials',
  'object_inputPaymentCredentialsApplePay' => 'Apple pay payment credentials',
  'object_inputPaymentCredentialsApplePay_param_payment_data_type_DataJSON' => 'Payment data',
  'object_inputPaymentCredentialsAndroidPay' => 'Android pay payment credentials',
  'object_inputPaymentCredentialsAndroidPay_param_payment_token_type_DataJSON' => 'Android pay payment token',
  'object_inputPaymentCredentialsAndroidPay_param_google_transaction_id_type_string' => 'Google transaction ID',
  'object_account.tmpPassword' => 'Temporary payment password',
  'object_account.tmpPassword_param_tmp_password_type_bytes' => 'Temporary password',
  'object_account.tmpPassword_param_valid_until_type_int' => 'Validity period',
  'object_shippingOption' => 'Shipping option',
  'object_shippingOption_param_id_type_string' => 'Option ID',
  'object_shippingOption_param_title_type_string' => 'Title',
  'object_shippingOption_param_prices_type_Vector t' => 'Prices',
  'object_inputStickerSetItem' => 'Sticker in a stickerset',
  'object_inputStickerSetItem_param_document_type_InputDocument' => 'The sticker',
  'object_inputStickerSetItem_param_emoji_type_string' => 'Associated emoji',
  'object_inputStickerSetItem_param_mask_coords_type_MaskCoords' => 'Coordinates for mask sticker',
  'object_inputPhoneCall' => 'Phone call',
  'object_inputPhoneCall_param_id_type_long' => 'Call ID',
  'object_inputPhoneCall_param_access_hash_type_long' => 'Access hash',
  'object_phoneCallEmpty' => 'Empty constructor',
  'object_phoneCallEmpty_param_id_type_long' => 'Call ID',
  'object_phoneCallWaiting' => 'Incoming phone call',
  'object_phoneCallWaiting_param_id_type_long' => 'Call ID',
  'object_phoneCallWaiting_param_access_hash_type_long' => 'Access hash',
  'object_phoneCallWaiting_param_date_type_int' => 'Date',
  'object_phoneCallWaiting_param_admin_id_type_int' => 'Admin ID',
  'object_phoneCallWaiting_param_participant_id_type_int' => 'Participant ID',
  'object_phoneCallWaiting_param_protocol_type_PhoneCallProtocol' => 'Phone call protocol info',
  'object_phoneCallWaiting_param_receive_date_type_int' => 'When was the phone call received',
  'object_phoneCallRequested' => 'Requested phone call',
  'object_phoneCallRequested_param_id_type_long' => 'Phone call ID',
  'object_phoneCallRequested_param_access_hash_type_long' => 'Access hash',
  'object_phoneCallRequested_param_date_type_int' => 'When was the phone call created',
  'object_phoneCallRequested_param_admin_id_type_int' => 'ID of the creator of the phone call',
  'object_phoneCallRequested_param_participant_id_type_int' => 'ID of the other participant of the phone call',
  'object_phoneCallRequested_param_g_a_hash_type_bytes' => '[Parameter for key exchange](https://core.telegram.org/api/end-to-end/voice-calls)',
  'object_phoneCallRequested_param_protocol_type_PhoneCallProtocol' => 'Call protocol info to be passed to libtgvoip',
  'object_phoneCallAccepted' => 'An accepted phone call',
  'object_phoneCallAccepted_param_id_type_long' => 'ID of accepted phone call',
  'object_phoneCallAccepted_param_access_hash_type_long' => 'Access hash of phone call',
  'object_phoneCallAccepted_param_date_type_int' => 'When was the call accepted',
  'object_phoneCallAccepted_param_admin_id_type_int' => 'ID of the call creator',
  'object_phoneCallAccepted_param_participant_id_type_int' => 'ID of the other user in the call',
  'object_phoneCallAccepted_param_g_b_type_bytes' => 'B parameter for [secure E2E phone call key exchange](https://core.telegram.org/api/end-to-end/voice-calls)',
  'object_phoneCallAccepted_param_protocol_type_PhoneCallProtocol' => 'Protocol to use for phone call',
  'object_phoneCall' => 'Phone call',
  'object_phoneCall_param_id_type_long' => 'Call ID',
  'object_phoneCall_param_access_hash_type_long' => 'Access hash',
  'object_phoneCall_param_date_type_int' => 'Date of creation of the call',
  'object_phoneCall_param_admin_id_type_int' => 'User ID of the creator of the call',
  'object_phoneCall_param_participant_id_type_int' => 'User ID of the other participant in the call',
  'object_phoneCall_param_g_a_or_b_type_bytes' => '[Parameter for key exchange](https://core.telegram.org/api/end-to-end/voice-calls)',
  'object_phoneCall_param_key_fingerprint_type_long' => '[Key fingerprint](https://core.telegram.org/api/end-to-end/voice-calls)',
  'object_phoneCall_param_protocol_type_PhoneCallProtocol' => 'Call protocol info to be passed to libtgvoip',
  'object_phoneCall_param_connection_type_PhoneConnection' => 'Connection',
  'object_phoneCall_param_alternative_connections_type_Vector t' => 'Alternative connections',
  'object_phoneCall_param_start_date_type_int' => 'When was the call actually started',
  'object_phoneCallDiscarded' => 'Indicates a discarded phone call',
  'object_phoneCallDiscarded_param_need_rating_type_true' => 'Whether the server required the user to [rate](../methods/phone.setCallRating.md) the call',
  'object_phoneCallDiscarded_param_need_debug_type_true' => 'Whether the server required the client to [send](../methods/phone.saveCallDebug.md) the libtgvoip call debug data',
  'object_phoneCallDiscarded_param_id_type_long' => 'Call ID',
  'object_phoneCallDiscarded_param_reason_type_PhoneCallDiscardReason' => 'Why was the phone call discarded',
  'object_phoneCallDiscarded_param_duration_type_int' => 'Duration of the phone call in seconds',
  'object_phoneConnection' => 'Identifies an endpoint that can be used to connect to the other user in a phone call',
  'object_phoneConnection_param_id_type_long' => 'Endpoint ID',
  'object_phoneConnection_param_ip_type_string' => 'IP address of endpoint',
  'object_phoneConnection_param_ipv6_type_string' => 'IPv6 address of endpoint',
  'object_phoneConnection_param_port_type_int' => 'Port ID',
  'object_phoneConnection_param_peer_tag_type_bytes' => 'Our peer tag',
  'object_phoneCallProtocol' => 'Protocol info for libtgvoip',
  'object_phoneCallProtocol_param_udp_p2p_type_true' => 'Whether to allow P2P connection to the other participant',
  'object_phoneCallProtocol_param_udp_reflector_type_true' => 'Whether to allow connection to the other participants through the reflector servers',
  'object_phoneCallProtocol_param_min_layer_type_int' => 'Minimum layer for remote libtgvoip',
  'object_phoneCallProtocol_param_max_layer_type_int' => 'Maximum layer for remote libtgvoip',
  'object_phone.phoneCall' => 'A VoIP phone call',
  'object_phone.phoneCall_param_phone_call_type_PhoneCall' => 'The VoIP phone call',
  'object_phone.phoneCall_param_users_type_Vector t' => 'Users',
  'object_upload.cdnFileReuploadNeeded' => 'The file was cleared from the temporary RAM cache of the [CDN](https://core.telegram.org/cdn) and has to be reuploaded.',
  'object_upload.cdnFileReuploadNeeded_param_request_token_type_bytes' => 'Request token (see [CDN](https://core.telegram.org/cdn))',
  'object_upload.cdnFile' => 'Represent a chunk of a [CDN](https://core.telegram.org/cdn) file.',
  'object_upload.cdnFile_param_bytes_type_bytes' => 'The data',
  'object_cdnPublicKey' => 'Public key to use **only** during handshakes to [CDN](https://core.telegram.org/cdn) DCs.',
  'object_cdnPublicKey_param_dc_id_type_int' => '[CDN DC](https://core.telegram.org/cdn) ID',
  'object_cdnPublicKey_param_public_key_type_string' => 'RSA public key',
  'object_cdnConfig' => 'Configuration for [CDN](https://core.telegram.org/cdn) file downloads.',
  'object_cdnConfig_param_public_keys_type_Vector t' => 'Public keys',
  'object_langPackString' => 'Translated localization string',
  'object_langPackString_param_key_type_string' => 'Language key',
  'object_langPackString_param_value_type_string' => 'Value',
  'object_langPackStringPluralized' => 'A language pack string which has different forms based on the number of some object it mentions. See [https://www.unicode.org/cldr/charts/latest/supplemental/language\\_plural\\_rules.html](https://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html) for more info',
  'object_langPackStringPluralized_param_key_type_string' => 'Localization key',
  'object_langPackStringPluralized_param_zero_value_type_string' => 'Value for zero objects',
  'object_langPackStringPluralized_param_one_value_type_string' => 'Value for one object',
  'object_langPackStringPluralized_param_two_value_type_string' => 'Value for two objects',
  'object_langPackStringPluralized_param_few_value_type_string' => 'Value for a few objects',
  'object_langPackStringPluralized_param_many_value_type_string' => 'Value for many objects',
  'object_langPackStringPluralized_param_other_value_type_string' => 'Default value',
  'object_langPackStringDeleted' => 'Deleted localization string',
  'object_langPackStringDeleted_param_key_type_string' => 'Localization key',
  'object_langPackDifference' => 'Changes to the app\'s localization pack',
  'object_langPackDifference_param_lang_code_type_string' => 'Language code',
  'object_langPackDifference_param_from_version_type_int' => 'Previous version number',
  'object_langPackDifference_param_version_type_int' => 'New version number',
  'object_langPackDifference_param_strings_type_Vector t' => 'Strings',
  'object_langPackLanguage' => 'Identifies a localization pack',
  'object_langPackLanguage_param_name_type_string' => 'Language name',
  'object_langPackLanguage_param_native_name_type_string' => 'Language name in the language itself',
  'object_langPackLanguage_param_lang_code_type_string' => 'Language code (pack identifier)',
  'object_channelAdminRights' => 'Admin rights',
  'object_channelAdminRights_param_change_info_type_true' => 'Change info',
  'object_channelAdminRights_param_post_messages_type_true' => 'Post messages',
  'object_channelAdminRights_param_edit_messages_type_true' => 'Edit messages',
  'object_channelAdminRights_param_delete_messages_type_true' => 'Delete messages',
  'object_channelAdminRights_param_ban_users_type_true' => 'Ban users',
  'object_channelAdminRights_param_invite_users_type_true' => 'Invite users',
  'object_channelAdminRights_param_invite_link_type_true' => 'Generate an invite link',
  'object_channelAdminRights_param_pin_messages_type_true' => 'Pin messages',
  'object_channelAdminRights_param_add_admins_type_true' => 'Add other admins',
  'object_channelBannedRights' => 'Banned user rights (when true, the user will NOT be able to do that thing)',
  'object_channelBannedRights_param_view_messages_type_true' => 'Disallow viewing messages',
  'object_channelBannedRights_param_sendMessages_type_true' => 'Disallow sending messages',
  'object_channelBannedRights_param_send_media_type_true' => 'Disallow sending media',
  'object_channelBannedRights_param_send_stickers_type_true' => 'Disallow sending stickers',
  'object_channelBannedRights_param_send_gifs_type_true' => 'Disallow sending gifs',
  'object_channelBannedRights_param_send_games_type_true' => 'Disallow sending games',
  'object_channelBannedRights_param_send_inline_type_true' => 'Disallow sending inline keyboards',
  'object_channelBannedRights_param_embed_links_type_true' => 'Disallow embedding links',
  'object_channelBannedRights_param_until_date_type_int' => 'Until date',
  'object_channelAdminLogEventActionChangeTitle' => 'Channel/supergroup title was changed',
  'object_channelAdminLogEventActionChangeTitle_param_prev_value_type_string' => 'Previous title',
  'object_channelAdminLogEventActionChangeTitle_param_new_value_type_string' => 'New title',
  'object_channelAdminLogEventActionChangeAbout' => 'The description was changed',
  'object_channelAdminLogEventActionChangeAbout_param_prev_value_type_string' => 'Previous description',
  'object_channelAdminLogEventActionChangeAbout_param_new_value_type_string' => 'New description',
  'object_channelAdminLogEventActionChangeUsername' => 'Channel/supergroup username was changed',
  'object_channelAdminLogEventActionChangeUsername_param_prev_value_type_string' => 'Old username',
  'object_channelAdminLogEventActionChangeUsername_param_new_value_type_string' => 'New username',
  'object_channelAdminLogEventActionChangePhoto' => 'The channel/supergroup\'s picture was changed',
  'object_channelAdminLogEventActionChangePhoto_param_prev_photo_type_ChatPhoto' => 'Previous photo',
  'object_channelAdminLogEventActionChangePhoto_param_new_photo_type_ChatPhoto' => 'New photo',
  'object_channelAdminLogEventActionToggleInvites' => 'Invites were enabled/disabled',
  'object_channelAdminLogEventActionToggleInvites_param_new_value_type_Bool' => 'New value',
  'object_channelAdminLogEventActionToggleSignatures' => 'Channel signatures were enabled/disabled',
  'object_channelAdminLogEventActionToggleSignatures_param_new_value_type_Bool' => 'New value',
  'object_channelAdminLogEventActionUpdatePinned' => 'A message was pinned',
  'object_channelAdminLogEventActionUpdatePinned_param_message_type_Message' => 'The message that was pinned',
  'object_channelAdminLogEventActionEditMessage' => 'A message was edited',
  'object_channelAdminLogEventActionEditMessage_param_prev_message_type_Message' => 'Old message',
  'object_channelAdminLogEventActionEditMessage_param_new_message_type_Message' => 'New message',
  'object_channelAdminLogEventActionDeleteMessage' => 'A message was deleted',
  'object_channelAdminLogEventActionDeleteMessage_param_message_type_Message' => 'The message that was deleted',
  'object_channelAdminLogEventActionParticipantJoin' => 'A user has joined the group (in the case of big groups, info of the user that has joined isn\'t shown)',
  'object_channelAdminLogEventActionParticipantLeave' => 'A user left the channel/supergroup (in the case of big groups, info of the user that has joined isn\'t shown)',
  'object_channelAdminLogEventActionParticipantInvite' => 'A user was invited to the group',
  'object_channelAdminLogEventActionParticipantInvite_param_participant_type_ChannelParticipant' => 'The user that was invited',
  'object_channelAdminLogEventActionParticipantToggleBan' => 'The banned [rights](https://core.telegram.org/api/rights) of a user were changed',
  'object_channelAdminLogEventActionParticipantToggleBan_param_prev_participant_type_ChannelParticipant' => 'Old banned rights of user',
  'object_channelAdminLogEventActionParticipantToggleBan_param_new_participant_type_ChannelParticipant' => 'New banned rights of user',
  'object_channelAdminLogEventActionParticipantToggleAdmin' => 'The admin [rights](https://core.telegram.org/api/rights) of a user were changed',
  'object_channelAdminLogEventActionParticipantToggleAdmin_param_prev_participant_type_ChannelParticipant' => 'Previous admin rights',
  'object_channelAdminLogEventActionParticipantToggleAdmin_param_new_participant_type_ChannelParticipant' => 'New admin rights',
  'object_channelAdminLogEventActionChangeStickerSet' => 'The supergroup\'s stickerset was changed',
  'object_channelAdminLogEventActionChangeStickerSet_param_prev_stickerset_type_InputStickerSet' => 'Previous stickerset',
  'object_channelAdminLogEventActionChangeStickerSet_param_new_stickerset_type_InputStickerSet' => 'New stickerset',
  'object_channelAdminLogEventActionTogglePreHistoryHidden' => 'The hidden prehistory setting was [changed](../methods/channels.togglePreHistoryHidden.md)',
  'object_channelAdminLogEventActionTogglePreHistoryHidden_param_new_value_type_Bool' => 'New value',
  'object_channelAdminLogEvent' => 'Admin log event',
  'object_channelAdminLogEvent_param_id_type_long' => 'Event ID',
  'object_channelAdminLogEvent_param_date_type_int' => 'Date',
  'object_channelAdminLogEvent_param_user_id_type_int' => 'User ID',
  'object_channelAdminLogEvent_param_action_type_ChannelAdminLogEventAction' => 'Action',
  'object_channels.adminLogResults' => 'Admin log events',
  'object_channels.adminLogResults_param_events_type_Vector t' => 'Events',
  'object_channels.adminLogResults_param_chats_type_Vector t' => 'Chats',
  'object_channels.adminLogResults_param_users_type_Vector t' => 'Users',
  'object_channelAdminLogEventsFilter' => 'Filter only certain admin log events',
  'object_channelAdminLogEventsFilter_param_join_type_true' => '[Join events](../constructors/channelAdminLogEventActionParticipantJoin.md)',
  'object_channelAdminLogEventsFilter_param_leave_type_true' => '[Leave events](../constructors/channelAdminLogEventActionParticipantLeave.md)',
  'object_channelAdminLogEventsFilter_param_invite_type_true' => '[Invite events](../constructors/channelAdminLogEventActionParticipantInvite.md)',
  'object_channelAdminLogEventsFilter_param_ban_type_true' => '[Ban events](../constructors/channelAdminLogEventActionParticipantToggleBan.md)',
  'object_channelAdminLogEventsFilter_param_unban_type_true' => '[Unban events](../constructors/channelAdminLogEventActionParticipantToggleBan.md)',
  'object_channelAdminLogEventsFilter_param_kick_type_true' => '[Kick events](../constructors/channelAdminLogEventActionParticipantToggleBan.md)',
  'object_channelAdminLogEventsFilter_param_unkick_type_true' => '[Unkick events](../constructors/channelAdminLogEventActionParticipantToggleBan.md)',
  'object_channelAdminLogEventsFilter_param_promote_type_true' => '[Admin promotion events](../constructors/channelAdminLogEventActionParticipantToggleAdmin.md)',
  'object_channelAdminLogEventsFilter_param_demote_type_true' => '[Admin demotion events](../constructors/channelAdminLogEventActionParticipantToggleAdmin.md)',
  'object_channelAdminLogEventsFilter_param_info_type_true' => 'Info change events (when [about](../constructors/channelAdminLogEventActionChangeAbout.md), [linked chat](../constructors/channelAdminLogEventActionChangeLinkedChat.md), [location](../constructors/channelAdminLogEventActionChangeLocation.md), [photo](../constructors/channelAdminLogEventActionChangePhoto.md), [stickerset](../constructors/channelAdminLogEventActionChangeStickerSet.md), [title](../constructors/channelAdminLogEventActionChangeTitle.md) or [username](../constructors/channelAdminLogEventActionChangeUsername.md) data of a channel gets modified)',
  'object_channelAdminLogEventsFilter_param_settings_type_true' => 'Settings change events ([invites](../constructors/channelAdminLogEventActionToggleInvites.md), [hidden prehistory](../constructors/channelAdminLogEventActionTogglePreHistoryHidden.md), [signatures](../constructors/channelAdminLogEventActionToggleSignatures.md), [default banned rights](../constructors/channelAdminLogEventActionDefaultBannedRights.md))',
  'object_channelAdminLogEventsFilter_param_pinned_type_true' => '[Message pin events](../constructors/channelAdminLogEventActionUpdatePinned.md)',
  'object_channelAdminLogEventsFilter_param_edit_type_true' => '[Message edit events](../constructors/channelAdminLogEventActionEditMessage.md)',
  'object_channelAdminLogEventsFilter_param_delete_type_true' => '[Message deletion events](../constructors/channelAdminLogEventActionDeleteMessage.md)',
  'object_popularContact' => 'Popular contact',
  'object_popularContact_param_client_id_type_long' => 'Contact identifier',
  'object_popularContact_param_importers_type_int' => 'How many people imported this contact',
  'object_cdnFileHash' => 'CDN file hash',
  'object_cdnFileHash_param_offset_type_int' => 'Offset',
  'object_cdnFileHash_param_limit_type_int' => 'Limit',
  'object_cdnFileHash_param_hash_type_bytes' => 'Hash',
  'object_messages.favedStickersNotModified' => 'No new favorited stickers were found',
  'object_messages.favedStickers' => 'Favorited stickers',
  'object_messages.favedStickers_param_hash_type_int' => '[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)',
  'object_messages.favedStickers_param_packs_type_Vector t' => 'Packs',
  'object_messages.favedStickers_param_stickers_type_Vector t' => 'Stickers',
  'object_recentMeUrlUnknown' => 'Unknown t.me url',
  'object_recentMeUrlUnknown_param_url_type_string' => 'URL',
  'object_recentMeUrlUser' => 'Recent t.me link to a user',
  'object_recentMeUrlUser_param_url_type_string' => 'URL',
  'object_recentMeUrlUser_param_user_id_type_int' => 'User ID',
  'object_recentMeUrlChat' => 'Recent t.me link to a chat',
  'object_recentMeUrlChat_param_url_type_string' => 'T.me URL',
  'object_recentMeUrlChat_param_chat_id_type_int' => 'Chat ID',
  'object_recentMeUrlChatInvite' => 'Recent t.me invite link to a chat',
  'object_recentMeUrlChatInvite_param_url_type_string' => 'T.me URL',
  'object_recentMeUrlChatInvite_param_chat_invite_type_ChatInvite' => 'Chat invitation',
  'object_recentMeUrlStickerSet' => 'Recent t.me stickerset installation URL',
  'object_recentMeUrlStickerSet_param_url_type_string' => 'T.me URL',
  'object_recentMeUrlStickerSet_param_set_type_StickerSetCovered' => 'Stickerset',
  'object_help.recentMeUrls' => 'Recent t.me URLs',
  'object_help.recentMeUrls_param_urls_type_Vector t' => 'URLs',
  'object_help.recentMeUrls_param_chats_type_Vector t' => 'Chats',
  'object_help.recentMeUrls_param_users_type_Vector t' => 'Users',
  'object_inputSingleMedia' => 'A single media in an album sent with [messages.sendMultiMedia](../methods/messages.sendMultiMedia.md).',
  'object_inputSingleMedia_param_media_type_InputMedia' => 'The media',
  'object_inputSingleMedia_param_message_type_string' => 'A caption for the media',
  'object_inputSingleMedia_param_entities_type_Vector t' => 'Entities',
  'object_webAuthorization' => 'Represents a bot logged in using the [Telegram login widget](https://core.telegram.org/widgets/login)',
  'object_webAuthorization_param_hash_type_long' => 'Authorization hash',
  'object_webAuthorization_param_bot_id_type_int' => 'Bot ID',
  'object_webAuthorization_param_domain_type_string' => 'The domain name of the website on which the user has logged in.',
  'object_webAuthorization_param_browser_type_string' => 'Browser user-agent',
  'object_webAuthorization_param_platform_type_string' => 'Platform',
  'object_webAuthorization_param_date_created_type_int' => 'When was the web session created',
  'object_webAuthorization_param_date_active_type_int' => 'When was the web session last active',
  'object_webAuthorization_param_ip_type_string' => 'IP address',
  'object_webAuthorization_param_region_type_string' => 'Region, determined from IP address',
  'object_account.webAuthorizations' => 'Web authorizations',
  'object_account.webAuthorizations_param_authorizations_type_Vector t' => 'Authorizations',
  'object_account.webAuthorizations_param_users_type_Vector t' => 'Users',
  'object_inputMessageID' => 'Message by ID',
  'object_inputMessageID_param_id_type_int' => 'Message ID',
  'object_inputMessageReplyTo' => 'Message to which the specified message replies to',
  'object_inputMessageReplyTo_param_id_type_int' => 'ID of the message that replies to the message we need',
  'object_inputMessagePinned' => 'Pinned message',
  'object_decryptedDataBlock' => 'Decrypted data block',
  'object_decryptedDataBlock_param_voice_call_id_type_int128' => 'Voice call ID',
  'object_decryptedDataBlock_param_in_seq_no_type_int' => 'In seq no',
  'object_decryptedDataBlock_param_out_seq_no_type_int' => 'Out seq no',
  'object_decryptedDataBlock_param_recent_received_mask_type_int' => 'Recent received mask',
  'object_decryptedDataBlock_param_proto_type_int' => 'Proto',
  'object_decryptedDataBlock_param_extra_type_string' => 'Extra',
  'object_decryptedDataBlock_param_raw_data_type_string' => 'Raw data',
  'object_simpleDataBlock' => 'Simple data block',
  'object_simpleDataBlock_param_raw_data_type_string' => 'Raw data',
  'object_decryptedMessage' => 'Contents of an encrypted message.',
  'object_decryptedMessage_param_message_type_string' => 'Message text',
  'object_decryptedMessage_param_media_type_DecryptedMessageMedia' => 'Media content',
  'object_decryptedMessageService' => 'Contents of an encrypted service message.',
  'object_decryptedMessageService_param_action_type_DecryptedMessageAction' => 'Action relevant to the service message',
  'object_decryptedMessageMediaEmpty' => 'Empty constructor, no media content.',
  'object_decryptedMessageMediaPhoto' => 'Photo attached to an encrypted message.',
  'object_decryptedMessageMediaPhoto_param_thumb_type_bytes' => 'Content of thumbnail file (JPEGfile, quality 55, set in a square 90x90)',
  'object_decryptedMessageMediaPhoto_param_thumb_w_type_int' => 'Thumbnail width',
  'object_decryptedMessageMediaPhoto_param_thumb_h_type_int' => 'Thumbnail height',
  'object_decryptedMessageMediaPhoto_param_w_type_int' => 'Photo width',
  'object_decryptedMessageMediaPhoto_param_h_type_int' => 'Photo height',
  'object_decryptedMessageMediaPhoto_param_size_type_int' => 'Size of the photo in bytes',
  'object_decryptedMessageMediaVideo' => 'Video attached to an encrypted message.',
  'object_decryptedMessageMediaVideo_param_thumb_type_bytes' => 'Content of thumbnail file (JPEG file, quality 55, set in a square 90x90)',
  'object_decryptedMessageMediaVideo_param_thumb_w_type_int' => 'Thumbnail width',
  'object_decryptedMessageMediaVideo_param_thumb_h_type_int' => 'Thumbnail height',
  'object_decryptedMessageMediaVideo_param_duration_type_int' => 'Duration of video in seconds',
  'object_decryptedMessageMediaVideo_param_w_type_int' => 'Image width',
  'object_decryptedMessageMediaVideo_param_h_type_int' => 'Image height',
  'object_decryptedMessageMediaVideo_param_size_type_int' => 'File size',
  'object_decryptedMessageMediaGeoPoint' => 'GeoPont attached to an encrypted message.',
  'object_decryptedMessageMediaGeoPoint_param_lat_type_double' => 'Latitude of point',
  'object_decryptedMessageMediaGeoPoint_param_long_type_double' => 'Longtitude of point',
  'object_decryptedMessageMediaContact' => 'Contact attached to an encrypted message.',
  'object_decryptedMessageMediaContact_param_phone_number_type_string' => 'Phone number',
  'object_decryptedMessageMediaContact_param_first_name_type_string' => 'Contact\'s first name',
  'object_decryptedMessageMediaContact_param_last_name_type_string' => 'Contact\'s last name',
  'object_decryptedMessageMediaContact_param_user_id_type_int' => 'Telegram User ID of signed-up contact',
  'object_decryptedMessageActionSetMessageTTL' => 'Setting of a message lifetime after reading.

Upon receiving such message the client shall start deleting of all messages of an encrypted chat **ttl\\_seconds** seconds after the messages were read by user.',
  'object_decryptedMessageActionSetMessageTTL_param_ttl_seconds_type_int' => 'Lifetime in seconds',
  'object_decryptedMessageMediaDocument' => 'Document attached to a message in a secret chat.',
  'object_decryptedMessageMediaDocument_param_thumb_type_bytes' => 'Thumbnail-file contents (JPEG-file, quality 55, set in a 90x90 square)',
  'object_decryptedMessageMediaDocument_param_thumb_w_type_int' => 'Thumbnail width',
  'object_decryptedMessageMediaDocument_param_thumb_h_type_int' => 'Thumbnail height',
  'object_decryptedMessageMediaDocument_param_file_name_type_string' => 'File name',
  'object_decryptedMessageMediaDocument_param_mime_type_type_string' => 'File MIME-type',
  'object_decryptedMessageMediaDocument_param_size_type_int' => 'Document size',
  'object_decryptedMessageMediaAudio' => 'Audio file attached to a secret chat message.',
  'object_decryptedMessageMediaAudio_param_duration_type_int' => 'Audio duration in seconds',
  'object_decryptedMessageMediaAudio_param_size_type_int' => 'File size',
  'object_decryptedMessageActionReadMessages' => 'Messages marked as read.',
  'object_decryptedMessageActionReadMessages_param_random_ids_type_Vector t' => 'Random IDs',
  'object_decryptedMessageActionDeleteMessages' => 'Deleted messages.',
  'object_decryptedMessageActionDeleteMessages_param_random_ids_type_Vector t' => 'Random IDs',
  'object_decryptedMessageActionScreenshotMessages' => 'A screenshot was taken.',
  'object_decryptedMessageActionScreenshotMessages_param_random_ids_type_Vector t' => 'Random IDs',
  'object_decryptedMessageActionFlushHistory' => 'The entire message history has been deleted.',
  'object_decryptedMessage_param_ttl_type_int' => 'Message lifetime. Has higher priority than [decryptedMessageActionSetMessageTTL](../constructors/decryptedMessageActionSetMessageTTL.md).<br>Parameter added in [Layer 17](https://core.telegram.org/api/layers#layer-17).',
  'object_decryptedMessageMediaVideo_param_mime_type_type_string' => 'MIME-type of the video file<br>Parameter added in [Layer 17](https://core.telegram.org/api/layers#layer-17).',
  'object_decryptedMessageMediaAudio_param_mime_type_type_string' => 'MIME-type of the audio file<br>Parameter added in [Layer 13](https://core.telegram.org/api/layers#layer-13).',
  'object_decryptedMessageLayer' => 'Sets the layer number for the contents of an encrypted message.',
  'object_decryptedMessageLayer_param_layer_type_int' => 'Layer number. Mimimal value - **17** (the layer in which the constructor was added).',
  'object_decryptedMessageLayer_param_in_seq_no_type_int' => '2x the number of messages in the sender\'s inbox (including deleted and service messages), incremented by 1 if current user was not the chat creator<br>Parameter added in [Layer 17](https://core.telegram.org/api/layers#layer-17).',
  'object_decryptedMessageLayer_param_out_seq_no_type_int' => '2x the number of messages in the recipient\'s inbox (including deleted and service messages), incremented by 1 if current user was the chat creator<br>Parameter added in [Layer 17](https://core.telegram.org/api/layers#layer-17).',
  'object_decryptedMessageLayer_param_message_type_DecryptedMessage' => 'The content of message itself',
  'object_decryptedMessageActionResend' => 'Request for the other party in a Secret Chat to automatically resend a contiguous range of previously sent messages, as explained in [Sequence number is Secret Chats](https://core.telegram.org/api/end-to-end/seq_no).',
  'object_decryptedMessageActionResend_param_start_seq_no_type_int' => '`out_seq_no` of the first message to be resent, with correct parity',
  'object_decryptedMessageActionResend_param_end_seq_no_type_int' => '`out_seq_no` of the last message to be resent, with same parity.',
  'object_decryptedMessageActionNotifyLayer' => 'A notification stating the API layer that is used by the client. You should use your current layer and take notice of the layer used on the other side of a conversation when sending messages.',
  'object_decryptedMessageActionNotifyLayer_param_layer_type_int' => 'Layer number, must be **17** or higher (this contructor was introduced in [Layer 17](https://core.telegram.org/api/layers#layer-17)).',
  'object_decryptedMessageActionTyping' => 'User is preparing a message: typing, recording, uploading, etc.',
  'object_decryptedMessageActionTyping_param_action_type_SendMessageAction' => 'Type of action',
  'object_decryptedMessageActionRequestKey' => 'Request rekeying, see [rekeying process](https://core.telegram.org/api/end-to-end/pfs)',
  'object_decryptedMessageActionRequestKey_param_exchange_id_type_long' => 'Exchange ID',
  'object_decryptedMessageActionRequestKey_param_g_a_type_bytes' => 'G\\_a, see [rekeying process](https://core.telegram.org/api/end-to-end/pfs)',
  'object_decryptedMessageActionAcceptKey' => 'Accept new key',
  'object_decryptedMessageActionAcceptKey_param_exchange_id_type_long' => 'Exchange ID',
  'object_decryptedMessageActionAcceptKey_param_g_b_type_bytes' => 'B parameter, see [rekeying process](https://core.telegram.org/api/end-to-end/pfs)',
  'object_decryptedMessageActionAcceptKey_param_key_fingerprint_type_long' => 'Key fingerprint, see [rekeying process](https://core.telegram.org/api/end-to-end/pfs)',
  'object_decryptedMessageActionAbortKey' => 'Abort rekeying',
  'object_decryptedMessageActionAbortKey_param_exchange_id_type_long' => 'Exchange ID',
  'object_decryptedMessageActionCommitKey' => 'Commit new key, see [rekeying process](https://core.telegram.org/api/end-to-end/pfs)',
  'object_decryptedMessageActionCommitKey_param_exchange_id_type_long' => 'Exchange ID, see [rekeying process](https://core.telegram.org/api/end-to-end/pfs)',
  'object_decryptedMessageActionCommitKey_param_key_fingerprint_type_long' => 'Key fingerprint, see [rekeying process](https://core.telegram.org/api/end-to-end/pfs)',
  'object_decryptedMessageActionNoop' => 'NOOP action',
  'object_decryptedMessageMediaExternalDocument' => 'Non-e2e documented forwarded from non-secret chat',
  'object_decryptedMessageMediaExternalDocument_param_id_type_long' => 'Document ID',
  'object_decryptedMessageMediaExternalDocument_param_access_hash_type_long' => 'Access hash',
  'object_decryptedMessageMediaExternalDocument_param_date_type_int' => 'Date',
  'object_decryptedMessageMediaExternalDocument_param_mime_type_type_string' => 'Mime type',
  'object_decryptedMessageMediaExternalDocument_param_size_type_int' => 'Size',
  'object_decryptedMessageMediaExternalDocument_param_thumb_type_PhotoSize' => 'Thumbnail',
  'object_decryptedMessageMediaExternalDocument_param_dc_id_type_int' => 'DC ID',
  'object_decryptedMessageMediaExternalDocument_param_attributes_type_Vector t' => 'Attributes',
  'object_decryptedMessage_param_entities_type_Vector t' => 'Entities',
  'object_decryptedMessage_param_via_bot_name_type_string' => 'Specifies the ID of the inline bot that generated the message (parameter added in layer 45)',
  'object_decryptedMessage_param_reply_to_random_id_type_long' => 'Random message ID of the message this message replies to (parameter added in layer 45)',
  'object_decryptedMessageMediaPhoto_param_caption_type_string' => 'Caption',
  'object_decryptedMessageMediaVideo_param_caption_type_string' => 'Caption',
  'object_decryptedMessageMediaDocument_param_attributes_type_Vector t' => 'Attributes',
  'object_decryptedMessageMediaDocument_param_caption_type_string' => 'Caption',
  'object_decryptedMessageMediaVenue' => 'Venue',
  'object_decryptedMessageMediaVenue_param_lat_type_double' => 'Latitude of venue',
  'object_decryptedMessageMediaVenue_param_long_type_double' => 'Longitude of venue',
  'object_decryptedMessageMediaVenue_param_title_type_string' => 'Venue name',
  'object_decryptedMessageMediaVenue_param_address_type_string' => 'Address',
  'object_decryptedMessageMediaVenue_param_provider_type_string' => 'Venue provider: currently only "foursquare" needs to be supported',
  'object_decryptedMessageMediaVenue_param_venue_id_type_string' => 'Venue ID in the provider\'s database',
  'object_decryptedMessageMediaWebPage' => 'Webpage preview',
  'object_decryptedMessageMediaWebPage_param_url_type_string' => 'URL of webpage',
  'object_decryptedMessage_param_grouped_id_type_long' => 'Random group ID, assigned by the author of message.<br>Multiple encrypted messages with a photo attached and with the same group ID indicate an album (parameter added in layer 45)',
  'object_inputPeerContact' => 'Peer contact',
  'object_inputPeerContact_param_user_id_type_int' => 'User ID',
  'object_inputPeerForeign' => 'Peer foreign',
  'object_inputPeerForeign_param_user_id_type_int' => 'User ID',
  'object_inputPeerForeign_param_access_hash_type_long' => 'Access hash',
  'object_inputUserContact' => 'User contact',
  'object_inputUserContact_param_user_id_type_int' => 'User ID',
  'object_inputUserForeign' => 'User foreign',
  'object_inputUserForeign_param_user_id_type_int' => 'User ID',
  'object_inputUserForeign_param_access_hash_type_long' => 'Access hash',
  'object_inputMediaUploadedVideo' => 'Media uploaded video',
  'object_inputMediaUploadedVideo_param_file_type_InputFile' => 'File',
  'object_inputMediaUploadedVideo_param_duration_type_int' => 'Duration',
  'object_inputMediaUploadedVideo_param_w_type_int' => 'Width',
  'object_inputMediaUploadedVideo_param_h_type_int' => 'Height',
  'object_inputMediaUploadedVideo_param_mime_type_type_string' => 'Mime type',
  'object_inputMediaUploadedThumbVideo' => 'Media uploaded thumb video',
  'object_inputMediaUploadedThumbVideo_param_file_type_InputFile' => 'File',
  'object_inputMediaUploadedThumbVideo_param_thumb_type_InputFile' => 'Thumbnail',
  'object_inputMediaUploadedThumbVideo_param_duration_type_int' => 'Duration',
  'object_inputMediaUploadedThumbVideo_param_w_type_int' => 'Width',
  'object_inputMediaUploadedThumbVideo_param_h_type_int' => 'Height',
  'object_inputMediaUploadedThumbVideo_param_mime_type_type_string' => 'Mime type',
  'object_inputMediaVideo' => 'Media video',
  'object_inputMediaVideo_param_id_type_InputVideo' => 'ID',
  'object_inputChatUploadedPhoto_param_crop_type_InputPhotoCrop' => 'Crop',
  'object_inputChatPhoto_param_crop_type_InputPhotoCrop' => 'Crop',
  'object_inputVideoEmpty' => 'Empty input video',
  'object_inputVideo' => 'Video',
  'object_inputVideo_param_id_type_long' => 'ID',
  'object_inputVideo_param_access_hash_type_long' => 'Access hash',
  'object_inputVideoFileLocation' => 'Video file location',
  'object_inputVideoFileLocation_param_id_type_long' => 'ID',
  'object_inputVideoFileLocation_param_access_hash_type_long' => 'Access hash',
  'object_inputPhotoCropAuto' => 'Photo crop auto',
  'object_inputPhotoCrop' => 'Photo crop',
  'object_inputPhotoCrop_param_crop_left_type_double' => 'Crop left',
  'object_inputPhotoCrop_param_crop_top_type_double' => 'Crop top',
  'object_inputPhotoCrop_param_crop_width_type_double' => 'Crop width',
  'object_userSelf' => 'User self',
  'object_userSelf_param_id_type_int' => 'ID',
  'object_userSelf_param_first_name_type_string' => 'First name',
  'object_userSelf_param_last_name_type_string' => 'Last name',
  'object_userSelf_param_username_type_string' => 'Username',
  'object_userSelf_param_phone_type_string' => 'Phone',
  'object_userSelf_param_photo_type_UserProfilePhoto' => 'Photo',
  'object_userSelf_param_status_type_UserStatus' => 'Status',
  'object_userSelf_param_inactive_type_Bool' => 'Inactive?',
  'object_userContact' => 'User contact',
  'object_userContact_param_id_type_int' => 'ID',
  'object_userContact_param_first_name_type_string' => 'First name',
  'object_userContact_param_last_name_type_string' => 'Last name',
  'object_userContact_param_username_type_string' => 'Username',
  'object_userContact_param_access_hash_type_long' => 'Access hash',
  'object_userContact_param_phone_type_string' => 'Phone',
  'object_userContact_param_photo_type_UserProfilePhoto' => 'Photo',
  'object_userContact_param_status_type_UserStatus' => 'Status',
  'object_userRequest' => 'User request',
  'object_userRequest_param_id_type_int' => 'ID',
  'object_userRequest_param_first_name_type_string' => 'First name',
  'object_userRequest_param_last_name_type_string' => 'Last name',
  'object_userRequest_param_username_type_string' => 'Username',
  'object_userRequest_param_access_hash_type_long' => 'Access hash',
  'object_userRequest_param_phone_type_string' => 'Phone',
  'object_userRequest_param_photo_type_UserProfilePhoto' => 'Photo',
  'object_userRequest_param_status_type_UserStatus' => 'Status',
  'object_userForeign' => 'User foreign',
  'object_userForeign_param_id_type_int' => 'ID',
  'object_userForeign_param_first_name_type_string' => 'First name',
  'object_userForeign_param_last_name_type_string' => 'Last name',
  'object_userForeign_param_username_type_string' => 'Username',
  'object_userForeign_param_access_hash_type_long' => 'Access hash',
  'object_userForeign_param_photo_type_UserProfilePhoto' => 'Photo',
  'object_userForeign_param_status_type_UserStatus' => 'Status',
  'object_userDeleted' => 'User deleted',
  'object_userDeleted_param_id_type_int' => 'ID',
  'object_userDeleted_param_first_name_type_string' => 'First name',
  'object_userDeleted_param_last_name_type_string' => 'Last name',
  'object_userDeleted_param_username_type_string' => 'Username',
  'object_userStatusEmpty' => 'User status has not been set yet.',
  'object_userStatusOnline' => 'Online status of the user.',
  'object_userStatusOnline_param_expires_type_int' => 'Time to expiration of the current online status',
  'object_userStatusOffline' => 'The user\'s offline status.',
  'object_userStatusOffline_param_was_online_type_int' => 'Time the user was last seen online',
  'object_chat_param_left_type_Bool' => 'Left?',
  'object_chatForbidden_param_date_type_int' => 'Date',
  'object_chatParticipants_param_admin_id_type_int' => 'Admin ID',
  'object_messageForwarded' => 'Message forwarded',
  'object_messageForwarded_param_id_type_int' => 'ID',
  'object_messageForwarded_param_fwd_from_id_type_int' => 'Forwarded from ID',
  'object_messageForwarded_param_fwd_date_type_int' => 'Forwarded date',
  'object_messageForwarded_param_from_id_type_int' => 'From ID',
  'object_messageForwarded_param_to_id_type_Peer' => 'To ID',
  'object_messageForwarded_param_date_type_int' => 'Date',
  'object_messageForwarded_param_message_type_string' => 'Message',
  'object_messageForwarded_param_media_type_MessageMedia' => 'Media',
  'object_messageMediaVideo' => 'Message media video',
  'object_messageMediaVideo_param_video_type_Video' => 'Video',
  'object_messageMediaUnsupported_param_bytes_type_bytes' => 'Bytes',
  'object_messageActionChatAddUser_param_user_id_type_int' => 'User ID',
  'object_photo_param_user_id_type_int' => 'User ID',
  'object_photo_param_caption_type_string' => 'Caption',
  'object_photo_param_geo_type_GeoPoint' => 'Geo',
  'object_videoEmpty' => 'Empty video',
  'object_videoEmpty_param_id_type_long' => 'ID',
  'object_video' => 'Video',
  'object_video_param_id_type_long' => 'ID',
  'object_video_param_access_hash_type_long' => 'Access hash',
  'object_video_param_user_id_type_int' => 'User ID',
  'object_video_param_date_type_int' => 'Date',
  'object_video_param_caption_type_string' => 'Caption',
  'object_video_param_duration_type_int' => 'Duration',
  'object_video_param_mime_type_type_string' => 'Mime type',
  'object_video_param_size_type_int' => 'Size',
  'object_video_param_thumb_type_PhotoSize' => 'Thumbnail',
  'object_video_param_dc_id_type_int' => 'DC ID',
  'object_video_param_w_type_int' => 'Width',
  'object_video_param_h_type_int' => 'Height',
  'object_auth.checkedPhone_param_phone_invited_type_Bool' => 'Phone invited?',
  'object_auth.sentCode_param_phone_registered_type_Bool' => 'Phone registered?',
  'object_auth.sentCode_param_send_call_timeout_type_int' => 'Send call timeout',
  'object_auth.sentCode_param_is_password_type_Bool' => 'Is password?',
  'object_auth.authorization_param_expires_type_int' => 'Expiration date',
  'object_inputPeerNotifySettings_param_show_previews_type_Bool' => 'If the text of the message shall be displayed in notification',
  'object_inputPeerNotifySettings_param_events_mask_type_int' => 'Events mask',
  'object_peerNotifySettings_param_show_previews_type_Bool' => 'Display text in notifications',
  'object_peerNotifySettings_param_events_mask_type_int' => 'Events mask',
  'object_userFull_param_blocked_type_Bool' => 'Blocked?',
  'object_userFull_param_real_first_name_type_string' => 'Real first name',
  'object_userFull_param_real_last_name_type_string' => 'Real last name',
  'object_contactSuggested' => 'Contact suggested',
  'object_contactSuggested_param_user_id_type_int' => 'User ID',
  'object_contactSuggested_param_mutual_contacts_type_int' => 'Mutual contacts',
  'object_contactStatus_param_expires_type_int' => 'Expires',
  'object_contacts.foreignLinkUnknown' => 'Foreign link unknown',
  'object_contacts.foreignLinkRequested' => 'Foreign link requested',
  'object_contacts.foreignLinkRequested_param_has_phone_type_Bool' => 'Has phone?',
  'object_contacts.foreignLinkMutual' => 'Foreign link mutual',
  'object_contacts.myLinkEmpty' => 'Empty my link',
  'object_contacts.myLinkRequested' => 'My link requested',
  'object_contacts.myLinkRequested_param_contact_type_Bool' => 'Contact?',
  'object_contacts.myLinkContact' => 'My link contact',
  'object_contacts.link_param_my_link_type_contacts.MyLink' => 'My link',
  'object_contacts.link_param_foreign_link_type_contacts.ForeignLink' => 'Foreign link',
  'object_contacts.suggested' => 'Suggested',
  'object_contacts.suggested_param_results_type_Vector t' => 'Results',
  'object_contacts.suggested_param_users_type_Vector t' => 'Users',
  'object_messages.statedMessages' => 'Stated messages',
  'object_messages.statedMessages_param_messages_type_Vector t' => 'Messages',
  'object_messages.statedMessages_param_chats_type_Vector t' => 'Chats',
  'object_messages.statedMessages_param_users_type_Vector t' => 'Users',
  'object_messages.statedMessages_param_pts_type_int' => 'Pts',
  'object_messages.statedMessages_param_seq_type_int' => 'Seq',
  'object_messages.statedMessage' => 'Stated message',
  'object_messages.statedMessage_param_message_type_Message' => 'Message',
  'object_messages.statedMessage_param_chats_type_Vector t' => 'Chats',
  'object_messages.statedMessage_param_users_type_Vector t' => 'Users',
  'object_messages.statedMessage_param_pts_type_int' => 'Pts',
  'object_messages.statedMessage_param_seq_type_int' => 'Seq',
  'object_messages.sentMessage' => 'Sent message',
  'object_messages.sentMessage_param_id_type_int' => 'ID',
  'object_messages.sentMessage_param_date_type_int' => 'Date',
  'object_messages.sentMessage_param_pts_type_int' => 'Pts',
  'object_messages.sentMessage_param_seq_type_int' => 'Seq',
  'object_messages.chats_param_users_type_Vector t' => 'Users',
  'object_messages.affectedHistory_param_seq_type_int' => 'Seq',
  'object_inputMessagesFilterPhotoVideoDocuments' => 'Messages filter photo video documents',
  'object_inputMessagesFilterAudio' => 'Messages filter audio',
  'object_inputMessagesFilterAudioDocuments' => 'Messages filter audio documents',
  'object_updateReadMessages' => 'Update read messages',
  'object_updateReadMessages_param_messages_type_Vector t' => 'Messages',
  'object_updateReadMessages_param_pts_type_int' => 'Pts',
  'object_updateUserStatus' => 'Contact status update.',
  'object_updateUserStatus_param_user_id_type_int' => 'User identifier',
  'object_updateUserStatus_param_status_type_UserStatus' => 'New status',
  'object_updateContactLink_param_my_link_type_contacts.MyLink' => 'My link',
  'object_updateContactLink_param_foreign_link_type_contacts.ForeignLink' => 'Foreign link',
  'object_updateNewAuthorization' => 'Update new authorization',
  'object_updateNewAuthorization_param_auth_key_id_type_long' => 'Auth key ID',
  'object_updateNewAuthorization_param_date_type_int' => 'Date',
  'object_updateNewAuthorization_param_device_type_string' => 'Device',
  'object_updateNewAuthorization_param_location_type_string' => 'Location',
  'object_updateShortMessage_param_from_id_type_int' => 'From ID',
  'object_updateShortMessage_param_seq_type_int' => 'Seq',
  'object_updateShortChatMessage_param_seq_type_int' => 'Seq',
  'object_dcOption_param_hostname_type_string' => 'Hostname',
  'object_config_param_broadcast_size_max_type_int' => 'Broadcast size max',
  'object_messages.statedMessagesLinks' => 'Stated messages links',
  'object_messages.statedMessagesLinks_param_messages_type_Vector t' => 'Messages',
  'object_messages.statedMessagesLinks_param_chats_type_Vector t' => 'Chats',
  'object_messages.statedMessagesLinks_param_users_type_Vector t' => 'Users',
  'object_messages.statedMessagesLinks_param_links_type_Vector t' => 'Links',
  'object_messages.statedMessagesLinks_param_pts_type_int' => 'Pts',
  'object_messages.statedMessagesLinks_param_seq_type_int' => 'Seq',
  'object_messages.statedMessageLink' => 'Stated message link',
  'object_messages.statedMessageLink_param_message_type_Message' => 'Message',
  'object_messages.statedMessageLink_param_chats_type_Vector t' => 'Chats',
  'object_messages.statedMessageLink_param_users_type_Vector t' => 'Users',
  'object_messages.statedMessageLink_param_links_type_Vector t' => 'Links',
  'object_messages.statedMessageLink_param_pts_type_int' => 'Pts',
  'object_messages.statedMessageLink_param_seq_type_int' => 'Seq',
  'object_messages.sentMessageLink' => 'Sent message link',
  'object_messages.sentMessageLink_param_id_type_int' => 'ID',
  'object_messages.sentMessageLink_param_date_type_int' => 'Date',
  'object_messages.sentMessageLink_param_pts_type_int' => 'Pts',
  'object_messages.sentMessageLink_param_seq_type_int' => 'Seq',
  'object_messages.sentMessageLink_param_links_type_Vector t' => 'Links',
  'object_inputMediaUploadedAudio' => 'Media uploaded audio',
  'object_inputMediaUploadedAudio_param_file_type_InputFile' => 'File',
  'object_inputMediaUploadedAudio_param_duration_type_int' => 'Duration',
  'object_inputMediaUploadedAudio_param_mime_type_type_string' => 'Mime type',
  'object_inputMediaAudio' => 'Media audio',
  'object_inputMediaAudio_param_id_type_InputAudio' => 'ID',
  'object_inputMediaUploadedDocument_param_file_name_type_string' => 'File name',
  'object_inputMediaUploadedThumbDocument' => 'Media uploaded thumb document',
  'object_inputMediaUploadedThumbDocument_param_file_type_InputFile' => 'File',
  'object_inputMediaUploadedThumbDocument_param_thumb_type_InputFile' => 'Thumbnail',
  'object_inputMediaUploadedThumbDocument_param_file_name_type_string' => 'File name',
  'object_inputMediaUploadedThumbDocument_param_mime_type_type_string' => 'Mime type',
  'object_messageMediaAudio' => 'Message media audio',
  'object_messageMediaAudio_param_audio_type_Audio' => 'Audio',
  'object_inputAudioEmpty' => 'Empty input audio',
  'object_inputAudio' => 'Audio',
  'object_inputAudio_param_id_type_long' => 'ID',
  'object_inputAudio_param_access_hash_type_long' => 'Access hash',
  'object_inputAudioFileLocation' => 'Audio file location',
  'object_inputAudioFileLocation_param_id_type_long' => 'ID',
  'object_inputAudioFileLocation_param_access_hash_type_long' => 'Access hash',
  'object_audioEmpty' => 'Empty audio',
  'object_audioEmpty_param_id_type_long' => 'ID',
  'object_audio' => 'Audio',
  'object_audio_param_id_type_long' => 'ID',
  'object_audio_param_access_hash_type_long' => 'Access hash',
  'object_audio_param_user_id_type_int' => 'User ID',
  'object_audio_param_date_type_int' => 'Date',
  'object_audio_param_duration_type_int' => 'Duration',
  'object_audio_param_mime_type_type_string' => 'Mime type',
  'object_audio_param_size_type_int' => 'Size',
  'object_audio_param_dc_id_type_int' => 'DC ID',
  'object_document_param_user_id_type_int' => 'User ID',
  'object_document_param_file_name_type_string' => 'File name',
  'object_auth.sentAppCode' => 'Sent app code',
  'object_auth.sentAppCode_param_phone_registered_type_Bool' => 'Phone registered?',
  'object_auth.sentAppCode_param_phone_code_hash_type_string' => 'Phone code hash',
  'object_auth.sentAppCode_param_send_call_timeout_type_int' => 'Send call timeout',
  'object_auth.sentAppCode_param_is_password_type_Bool' => 'Is password?',
  'object_contactFound' => 'Contact found',
  'object_contactFound_param_user_id_type_int' => 'User ID',
  'object_updateServiceNotification_param_popup_type_Bool' => 'Popup?',
  'object_inputMediaUploadedThumbDocument_param_attributes_type_Vector t' => 'Attributes',
  'object_userStatusRecently' => 'Online status: last seen recently',
  'object_userStatusLastWeek' => 'Online status: last seen last week',
  'object_userStatusLastMonth' => 'Online status: last seen last month',
  'object_account.sentChangePhoneCode' => 'Sent change phone code',
  'object_account.sentChangePhoneCode_param_phone_code_hash_type_string' => 'Phone code hash',
  'object_account.sentChangePhoneCode_param_send_call_timeout_type_int' => 'Send call timeout',
  'object_messages.allStickers_param_hash_type_string' => 'Hash',
  'object_messages.allStickers_param_packs_type_Vector t' => 'Packs',
  'object_messages.allStickers_param_documents_type_Vector t' => 'Documents',
  'object_message_param_fwd_from_id_type_int' => 'Forwarded from ID',
  'object_message_param_fwd_date_type_int' => 'Forwarded date',
  'object_chatLocated' => 'Chat located',
  'object_chatLocated_param_chat_id_type_int' => 'Chat ID',
  'object_chatLocated_param_distance_type_int' => 'Distance',
  'object_messages.messageEmpty' => 'Empty message',
  'object_messages.statedMessages_param_pts_count_type_int' => 'Pts count',
  'object_messages.statedMessage_param_pts_count_type_int' => 'Pts count',
  'object_messages.sentMessage_param_pts_count_type_int' => 'Pts count',
  'object_updateReadMessages_param_pts_count_type_int' => 'Pts count',
  'object_updateShortMessage_param_fwd_from_id_type_int' => 'Fwd from ID',
  'object_updateShortMessage_param_fwd_date_type_int' => 'Fwd date',
  'object_updateShortChatMessage_param_fwd_from_id_type_int' => 'Fwd from ID',
  'object_updateShortChatMessage_param_fwd_date_type_int' => 'Fwd date',
  'object_messages.statedMessagesLinks_param_pts_count_type_int' => 'Pts count',
  'object_messages.statedMessageLink_param_pts_count_type_int' => 'Pts count',
  'object_messages.sentMessageLink_param_pts_count_type_int' => 'Pts count',
  'object_inputGeoChat' => 'Geo chat',
  'object_inputGeoChat_param_chat_id_type_int' => 'Chat ID',
  'object_inputGeoChat_param_access_hash_type_long' => 'Access hash',
  'object_inputNotifyGeoChatPeer' => 'Notify geo chat peer',
  'object_inputNotifyGeoChatPeer_param_peer_type_InputGeoChat' => 'Peer',
  'object_geoChat' => 'Geo chat',
  'object_geoChat_param_id_type_int' => 'ID',
  'object_geoChat_param_access_hash_type_long' => 'Access hash',
  'object_geoChat_param_title_type_string' => 'Title',
  'object_geoChat_param_address_type_string' => 'Address',
  'object_geoChat_param_venue_type_string' => 'Venue',
  'object_geoChat_param_geo_type_GeoPoint' => 'Geo',
  'object_geoChat_param_photo_type_ChatPhoto' => 'Photo',
  'object_geoChat_param_participants_count_type_int' => 'Participants count',
  'object_geoChat_param_date_type_int' => 'Date',
  'object_geoChat_param_checked_in_type_Bool' => 'Checked in?',
  'object_geoChat_param_version_type_int' => 'Version',
  'object_geoChatMessageEmpty' => 'Empty geo chat message',
  'object_geoChatMessageEmpty_param_chat_id_type_int' => 'Chat ID',
  'object_geoChatMessageEmpty_param_id_type_int' => 'ID',
  'object_geoChatMessage' => 'Geo chat message',
  'object_geoChatMessage_param_chat_id_type_int' => 'Chat ID',
  'object_geoChatMessage_param_id_type_int' => 'ID',
  'object_geoChatMessage_param_from_id_type_int' => 'From ID',
  'object_geoChatMessage_param_date_type_int' => 'Date',
  'object_geoChatMessage_param_message_type_string' => 'Message',
  'object_geoChatMessage_param_media_type_MessageMedia' => 'Media',
  'object_geoChatMessageService' => 'Geo chat message service',
  'object_geoChatMessageService_param_chat_id_type_int' => 'Chat ID',
  'object_geoChatMessageService_param_id_type_int' => 'ID',
  'object_geoChatMessageService_param_from_id_type_int' => 'From ID',
  'object_geoChatMessageService_param_date_type_int' => 'Date',
  'object_geoChatMessageService_param_action_type_MessageAction' => 'Action',
  'object_geochats.statedMessage' => 'Stated message',
  'object_geochats.statedMessage_param_message_type_GeoChatMessage' => 'Message',
  'object_geochats.statedMessage_param_chats_type_Vector t' => 'Chats',
  'object_geochats.statedMessage_param_users_type_Vector t' => 'Users',
  'object_geochats.statedMessage_param_seq_type_int' => 'Seq',
  'object_geochats.located' => 'Located',
  'object_geochats.located_param_results_type_Vector t' => 'Results',
  'object_geochats.located_param_messages_type_Vector t' => 'Messages',
  'object_geochats.located_param_chats_type_Vector t' => 'Chats',
  'object_geochats.located_param_users_type_Vector t' => 'Users',
  'object_geochats.messages' => 'Messages',
  'object_geochats.messages_param_messages_type_Vector t' => 'Messages',
  'object_geochats.messages_param_chats_type_Vector t' => 'Chats',
  'object_geochats.messages_param_users_type_Vector t' => 'Users',
  'object_geochats.messagesSlice' => 'Messages slice',
  'object_geochats.messagesSlice_param_count_type_int' => 'Count',
  'object_geochats.messagesSlice_param_messages_type_Vector t' => 'Messages',
  'object_geochats.messagesSlice_param_chats_type_Vector t' => 'Chats',
  'object_geochats.messagesSlice_param_users_type_Vector t' => 'Users',
  'object_messageActionGeoChatCreate' => 'Message action geo chat create',
  'object_messageActionGeoChatCreate_param_title_type_string' => 'Title',
  'object_messageActionGeoChatCreate_param_address_type_string' => 'Address',
  'object_messageActionGeoChatCheckin' => 'Message action geo chat checkin',
  'object_updateNewGeoChatMessage' => 'Update new geo chat message',
  'object_updateNewGeoChatMessage_param_message_type_GeoChatMessage' => 'Message',
  'object_messages.sentMessage_param_media_type_MessageMedia' => 'Media',
  'object_messages.sentMessageLink_param_media_type_MessageMedia' => 'Media',
  'object_inputMediaUploadedPhoto_param_caption_type_string' => 'Caption',
  'object_inputMediaPhoto_param_caption_type_string' => 'Caption',
  'object_inputMediaUploadedVideo_param_caption_type_string' => 'Caption',
  'object_inputMediaUploadedThumbVideo_param_caption_type_string' => 'Caption',
  'object_inputMediaVideo_param_caption_type_string' => 'Caption',
  'object_messageMediaPhoto_param_caption_type_string' => 'Caption',
  'object_messageMediaVideo_param_caption_type_string' => 'Caption',
  'object_botCommand' => 'Describes a bot command that can be used in a chat',
  'object_botCommand_param_command_type_string' => '`/command` name',
  'object_botCommand_param_description_type_string' => 'Description of the command',
  'object_botInfoEmpty' => 'Empty bot info',
  'object_botInfo_param_version_type_int' => 'Version',
  'object_botInfo_param_share_text_type_string' => 'Share text',
  'object_help.appChangelogEmpty' => 'Empty app changelog',
  'object_help.appChangelog' => 'App changelog',
  'object_help.appChangelog_param_text_type_string' => 'Text',
  'object_message_param_fwd_from_id_type_Peer' => 'Forwarded from ID',
  'object_updateShortMessage_param_fwd_from_id_type_Peer' => 'Fwd from ID',
  'object_updateShortChatMessage_param_fwd_from_id_type_Peer' => 'Fwd from ID',
  'object_channelFull_param_unread_important_count_type_int' => 'Unread important count',
  'object_dialogChannel' => 'Dialog channel',
  'object_dialogChannel_param_peer_type_Peer' => 'Peer',
  'object_dialogChannel_param_top_message_type_int' => 'Top message',
  'object_dialogChannel_param_top_important_message_type_int' => 'Top important message',
  'object_dialogChannel_param_read_inbox_max_id_type_int' => 'Read inbox max ID',
  'object_dialogChannel_param_unread_count_type_int' => 'Unread count',
  'object_dialogChannel_param_unread_important_count_type_int' => 'Unread important count',
  'object_dialogChannel_param_notify_settings_type_PeerNotifySettings' => 'Notify settings',
  'object_dialogChannel_param_pts_type_int' => 'Pts',
  'object_messageGroup' => 'Message group',
  'object_messageGroup_param_min_id_type_int' => 'Min ID',
  'object_messageGroup_param_max_id_type_int' => 'Max ID',
  'object_messageGroup_param_count_type_int' => 'Count',
  'object_messageGroup_param_date_type_int' => 'Date',
  'object_messages.channelMessages_param_collapsed_type_Vector t' => 'Collapsed',
  'object_updateChannelGroup' => 'Update channel group',
  'object_updateChannelGroup_param_channel_id_type_int' => 'Channel ID',
  'object_updateChannelGroup_param_group_type_MessageGroup' => 'Group',
  'object_updates.channelDifferenceTooLong_param_top_important_message_type_int' => 'Top important message',
  'object_updates.channelDifferenceTooLong_param_unread_important_count_type_int' => 'Unread important count',
  'object_channelMessagesFilterCollapsed' => 'Channel messages filter collapsed',
  'object_channelParticipantModerator' => 'Channel participant moderator',
  'object_channelParticipantModerator_param_user_id_type_int' => 'User ID',
  'object_channelParticipantModerator_param_inviter_id_type_int' => 'Inviter ID',
  'object_channelParticipantModerator_param_date_type_int' => 'Date',
  'object_channelParticipantEditor' => 'Channel participant editor',
  'object_channelParticipantEditor_param_user_id_type_int' => 'User ID',
  'object_channelParticipantEditor_param_inviter_id_type_int' => 'Inviter ID',
  'object_channelParticipantEditor_param_date_type_int' => 'Date',
  'object_channelParticipantKicked' => 'Channel participant kicked',
  'object_channelParticipantKicked_param_user_id_type_int' => 'User ID',
  'object_channelParticipantKicked_param_kicked_by_type_int' => 'Kicked by',
  'object_channelParticipantKicked_param_date_type_int' => 'Date',
  'object_channelRoleEmpty' => 'Empty channel role',
  'object_channelRoleModerator' => 'Channel role moderator',
  'object_channelRoleEditor' => 'Channel role editor',
  'object_inputChatEmpty' => 'Empty input chat',
  'object_inputChat' => 'Chat',
  'object_inputChat_param_chat_id_type_int' => 'Chat ID',
  'object_updateReadChannelInbox_param_peer_type_Peer' => 'Peer',
  'object_updateDeleteChannelMessages_param_peer_type_Peer' => 'Peer',
  'object_message_param_unread_type_true' => 'Unread?',
  'object_messageService_param_unread_type_true' => 'Unread?',
  'object_updateShortMessage_param_unread_type_true' => 'Unread?',
  'object_updateShortChatMessage_param_unread_type_true' => 'Unread?',
  'object_stickerSet_param_disabled_type_true' => 'Disabled?',
  'object_updateShortSentMessage_param_unread_type_true' => 'Unread?',
  'object_channel_param_kicked_type_true' => 'Kicked?',
  'object_channel_param_moderator_type_true' => 'Moderator?',
  'object_channelMessagesFilter_param_important_only_type_true' => 'Important only?',
  'object_messageActionChatDeactivate' => 'Message action chat deactivate',
  'object_messageActionChatActivate' => 'Message action chat activate',
  'object_user_param_restiction_reason_type_string' => 'Restiction reason',
  'object_channel_param_restiction_reason_type_string' => 'Restiction reason',
  'object_webPageExternal' => 'Web page external',
  'object_webPageExternal_param_url_type_string' => 'URL',
  'object_webPageExternal_param_display_url_type_string' => 'Display URL',
  'object_webPageExternal_param_type_type_string' => 'Type',
  'object_webPageExternal_param_title_type_string' => 'Title',
  'object_webPageExternal_param_description_type_string' => 'Description',
  'object_webPageExternal_param_thumb_url_type_string' => 'Thumbnail URL',
  'object_webPageExternal_param_content_url_type_string' => 'Content URL',
  'object_webPageExternal_param_w_type_int' => 'Width',
  'object_webPageExternal_param_h_type_int' => 'Height',
  'object_webPageExternal_param_duration_type_int' => 'Duration',
  'object_foundGif_param_webpage_type_WebPage' => 'Webpage',
  'object_inputMediaUploadedDocument_param_caption_type_string' => 'Caption',
  'object_inputMediaUploadedThumbDocument_param_caption_type_string' => 'Caption',
  'object_inputMediaDocument_param_caption_type_string' => 'Caption',
  'object_messageMediaDocument_param_caption_type_string' => 'Caption',
  'object_inputBotInlineMessageMediaAuto_param_caption_type_string' => 'Caption',
  'object_botInlineMessageMediaAuto_param_caption_type_string' => 'Caption',
  'object_botInlineMediaResultDocument' => 'Bot inline media result document',
  'object_botInlineMediaResultDocument_param_id_type_string' => 'ID',
  'object_botInlineMediaResultDocument_param_type_type_string' => 'Type',
  'object_botInlineMediaResultDocument_param_document_type_Document' => 'Document',
  'object_botInlineMediaResultDocument_param_sendMessage_type_BotInlineMessage' => 'Send message',
  'object_botInlineMediaResultPhoto' => 'Bot inline media result photo',
  'object_botInlineMediaResultPhoto_param_id_type_string' => 'ID',
  'object_botInlineMediaResultPhoto_param_type_type_string' => 'Type',
  'object_botInlineMediaResultPhoto_param_photo_type_Photo' => 'Photo',
  'object_botInlineMediaResultPhoto_param_sendMessage_type_BotInlineMessage' => 'Send message',
  'object_inputMediaVideo_param_video_type_InputVideo' => 'Video',
  'object_inputMediaAudio_param_audio_type_InputAudio' => 'Audio',
  'object_inputMediaDocument_param_document_id_type_InputDocument' => 'Document ID',
  'object_inputGeoPoint_param_latitude_type_double' => 'Latitude',
  'object_inputGeoPoint_param_longitude_type_double' => 'Longitude',
  'object_geoPoint_param_longitude_type_double' => 'Longitude',
  'object_geoPoint_param_latitude_type_double' => 'Latitude',
  'object_updateNewEncryptedMessage_param_encr_message_type_EncryptedMessage' => 'Encr message',
  'object_updateEncryption_param_encr_chat_type_EncryptedChat' => 'Encr chat',
  'object_updateNotifySettings_param_notify_peer_type_NotifyPeer' => 'Notify peer',
  'object_updateServiceNotification_param_message_text_type_string' => 'Message text',
  'object_updateNewChannelMessage_param_channel_pts_type_int' => 'Channel pts',
  'object_updateNewChannelMessage_param_channel_pts_count_type_int' => 'Channel pts count',
  'object_updateDeleteChannelMessages_param_channel_pts_type_int' => 'Channel pts',
  'object_updateDeleteChannelMessages_param_channel_pts_count_type_int' => 'Channel pts count',
  'object_updates.channelDifferenceEmpty_param_channel_pts_type_int' => 'Channel pts',
  'object_updates.channelDifferenceTooLong_param_channel_pts_type_int' => 'Channel pts',
  'object_updates.channelDifference_param_channel_pts_type_int' => 'Channel pts',
  'object_privacyKeyChatInvite' => 'Whether the user can be invited to chats',
  'object_inputMediaUploadedThumbDocument_param_stickers_type_Vector t' => 'Stickers',
  'object_inputMediaPhotoExternal_param_caption_type_string' => 'Caption',
  'object_inputMediaDocumentExternal_param_caption_type_string' => 'Caption',
  'object_destroy_auth_key_ok' => 'Destroy auth key ok',
  'object_destroy_auth_key_none' => 'Destroy auth key none',
  'object_destroy_auth_key_fail' => 'Destroy auth key fail',
  'object_help.appChangelog_param_message_type_string' => 'Message',
  'object_help.appChangelog_param_media_type_MessageMedia' => 'Media',
  'object_help.appChangelog_param_entities_type_Vector t' => 'Entities',
  'object_pageBlockParagraph' => 'A paragraph',
  'object_pageBlockParagraph_param_text_type_RichText' => 'Text',
  'object_pageBlockPreformatted' => 'Preformatted (`<pre>` text)',
  'object_pageBlockPreformatted_param_text_type_RichText' => 'Text',
  'object_pageBlockPreformatted_param_language_type_string' => 'Programming language of preformatted text',
  'object_pageBlockDivider' => 'An empty block separating a page',
  'object_pageBlockAnchor' => 'Link to section within the page itself (like `<a href="#target">anchor</a>`)',
  'object_pageBlockAnchor_param_name_type_string' => 'Name of target section',
  'object_pageBlockCover' => 'A page cover',
  'object_pageBlockCover_param_cover_type_PageBlock' => 'Cover',
  'object_pagePart_param_videos_type_Vector t' => 'Videos',
  'object_pageFull_param_videos_type_Vector t' => 'Videos',
  'object_phoneCallRequested_param_g_a_type_bytes' => 'G a',
  'object_resPQ_param_pq_type_string' => 'Pq',
  'object_p_q_inner_data_param_pq_type_string' => 'Pq',
  'object_p_q_inner_data_param_p_type_string' => 'P',
  'object_p_q_inner_data_param_q_type_string' => 'Q',
  'object_server_DH_params_ok_param_encrypted_answer_type_string' => 'Encrypted answer',
  'object_server_DH_inner_data_param_dh_prime_type_string' => 'Dh prime',
  'object_server_DH_inner_data_param_g_a_type_string' => 'G a',
  'object_client_DH_inner_data_param_g_b_type_string' => 'G b',
  'object_msgs_state_info_param_info_type_string' => 'Info',
  'object_msgs_all_info_param_info_type_string' => 'Info',
  'object_http_wait' => 'Http wait',
  'object_http_wait_param_max_delay_type_int' => 'Max delay',
  'object_http_wait_param_wait_after_type_int' => 'Wait after',
  'object_http_wait_param_max_wait_type_int' => 'Max wait',
  'object_ipPort' => 'Ip port',
  'object_ipPort_param_ipv4_type_int' => 'Ipv4',
  'object_ipPort_param_port_type_int' => 'Port',
  'object_help.configSimple' => 'Config simple',
  'object_help.configSimple_param_date_type_int' => 'Date',
  'object_help.configSimple_param_expires_type_int' => 'Expires',
  'object_help.configSimple_param_dc_id_type_int' => 'DC ID',
  'object_help.configSimple_param_ip_port_list_type_Vector t' => 'Ip port list',
  'object_inputMessagesFilterMyMentionsUnread' => 'Messages filter my mentions unread',
  'method_initConnection_param_proxy_type_InputClientProxy' => 'Info about an MTProto proxy',
  'method_account.registerDevice_param_secret_type_bytes' => 'For FCM and APNS VoIP, optional encryption key used to encrypt push notifications',
  'method_account.getAllSecureValues' => 'Get all saved [Telegram Passport](https://core.telegram.org/passport) documents, [for more info see the passport docs »](https://core.telegram.org/passport/encryption#encryption)',
  'method_account.getSecureValue' => 'Get saved [Telegram Passport](https://core.telegram.org/passport) document, [for more info see the passport docs »](https://core.telegram.org/passport/encryption#encryption)',
  'method_account.getSecureValue_param_types_type_Vector t' => 'Get telegram passport secure parameters',
  'method_account.saveSecureValue' => 'Securely save [Telegram Passport](https://core.telegram.org/passport) document, [for more info see the passport docs »](https://core.telegram.org/passport/encryption#encryption)',
  'method_account.saveSecureValue_param_value_type_InputSecureValue' => 'Secure value, [for more info see the passport docs »](https://core.telegram.org/passport/encryption#encryption)',
  'method_account.saveSecureValue_param_secure_secret_id_type_long' => 'Passport secret hash, [for more info see the passport docs »](https://core.telegram.org/passport/encryption#encryption)',
  'method_account.deleteSecureValue' => 'Delete stored [Telegram Passport](https://core.telegram.org/passport) documents, [for more info see the passport docs »](https://core.telegram.org/passport/encryption#encryption)',
  'method_account.deleteSecureValue_param_types_type_Vector t' => 'The values to delete',
  'method_account.getAuthorizationForm' => 'Returns a Telegram Passport authorization form for sharing data with a service',
  'method_account.getAuthorizationForm_param_bot_id_type_int' => 'User identifier of the service\'s bot',
  'method_account.getAuthorizationForm_param_scope_type_string' => 'Telegram Passport element types requested by the service',
  'method_account.getAuthorizationForm_param_public_key_type_string' => 'Service\'s public key',
  'method_account.acceptAuthorization' => 'Sends a Telegram Passport authorization form, effectively sharing data with the service',
  'method_account.acceptAuthorization_param_bot_id_type_int' => 'Bot ID',
  'method_account.acceptAuthorization_param_scope_type_string' => 'Telegram Passport element types requested by the service',
  'method_account.acceptAuthorization_param_public_key_type_string' => 'Service\'s public key',
  'method_account.acceptAuthorization_param_value_hashes_type_Vector t' => 'Hashes of the encrypted credentials',
  'method_account.acceptAuthorization_param_credentials_type_SecureCredentialsEncrypted' => 'Encrypted values',
  'method_account.sendVerifyPhoneCode' => 'Send the verification phone code for telegram [passport](https://core.telegram.org/passport).',
  'method_account.sendVerifyPhoneCode_param_allow_flashcall_type_true' => 'Allow phone calls?',
  'method_account.sendVerifyPhoneCode_param_phone_number_type_string' => 'The phone number to verify',
  'method_account.sendVerifyPhoneCode_param_current_number_type_Bool' => 'Is this the current number?',
  'method_account.verifyPhone' => 'Verify a phone number for telegram [passport](https://core.telegram.org/passport).',
  'method_account.verifyPhone_param_phone_number_type_string' => 'Phone number',
  'method_account.verifyPhone_param_phone_code_hash_type_string' => 'Phone code hash received from the call to [account.sendVerifyPhoneCode](../methods/account.sendVerifyPhoneCode.md)',
  'method_account.verifyPhone_param_phone_code_type_string' => 'Code received after the call to [account.sendVerifyPhoneCode](../methods/account.sendVerifyPhoneCode.md)',
  'method_account.sendVerifyEmailCode' => 'Send the verification email code for telegram [passport](https://core.telegram.org/passport).',
  'method_account.sendVerifyEmailCode_param_email_type_string' => 'The email where to send the code',
  'method_account.verifyEmail' => 'Verify an email address for telegram [passport](https://core.telegram.org/passport).',
  'method_account.verifyEmail_param_email_type_string' => 'The email to verify',
  'method_account.verifyEmail_param_code_type_string' => 'The verification code that was received',
  'method_users.setSecureValueErrors' => 'Notify the user that the sent [passport](https://core.telegram.org/passport) data contains some errors The user will not be able to re-submit their Passport data to you until the errors are fixed (the contents of the field for which you returned the error must change).

Use this if the data submitted by the user doesn\'t satisfy the standards your service requires for any reason. For example, if a birthday date seems invalid, a submitted document is blurry, a scan shows evidence of tampering, etc. Supply some details in the error message to make sure the user knows how to correct the issues.',
  'method_users.setSecureValueErrors_param_id_type_InputUser' => 'The user',
  'method_users.setSecureValueErrors_param_errors_type_Vector t' => 'The errors',
  'method_messages.search_param_hash_type_int' => '[Hash](https://core.telegram.org/api/offsets)',
  'method_messages.report' => 'Report a message in a chat for violation of telegram\'s Terms of Service',
  'method_messages.report_param_peer_type_InputPeer' => 'Peer',
  'method_messages.report_param_id_type_Vector t' => 'The messages to report',
  'method_messages.report_param_reason_type_ReportReason' => 'Why are these messages being reported',
  'method_messages.getStickers_param_hash_type_int' => '[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)',
  'method_messages.editMessage_param_media_type_InputMedia' => 'New attached media',
  'method_messages.editInlineBotMessage_param_media_type_InputMedia' => 'Media',
  'method_messages.toggleDialogPin_param_peer_type_InputDialogPeer' => 'The dialog to pin',
  'method_messages.getRecentLocations_param_hash_type_int' => '[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)',
  'method_messages.searchStickerSets' => 'Search for stickersets',
  'method_messages.searchStickerSets_param_exclude_featured_type_true' => 'Exclude featured stickersets from results',
  'method_messages.searchStickerSets_param_q_type_string' => 'Query string',
  'method_messages.searchStickerSets_param_hash_type_int' => '[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)',
  'method_upload.getFileHashes' => 'You cannot use this method directly, use the upload, downloadToStream, downloadToFile, downloadToDir methods instead; see https://docs.madelineproto.xyz for more info',
  'method_upload.getFileHashes_param_location_type_InputFileLocation' => 'You cannot use this method directly, use the upload, downloadToStream, downloadToFile, downloadToDir methods instead; see https://docs.madelineproto.xyz for more info',
  'method_upload.getFileHashes_param_offset_type_int' => 'You cannot use this method directly, use the upload, downloadToStream, downloadToFile, downloadToDir methods instead; see https://docs.madelineproto.xyz for more info',
  'method_help.getProxyData' => 'Get promotion info of the currently-used MTProxy',
  'method_help.getTermsOfServiceUpdate' => 'Look for updates of telegram\'s terms of service',
  'method_help.acceptTermsOfService' => 'Accept the new terms of service',
  'method_help.acceptTermsOfService_param_id_type_DataJSON' => 'ID of terms of service',
  'method_help.getDeepLinkInfo' => 'Get info about a `t.me` link',
  'method_help.getDeepLinkInfo_param_path_type_string' => 'Path in `t.me/path`',
  'object_inputSecureFileLocation' => 'Location of encrypted telegram [passport](https://core.telegram.org/passport) file.',
  'object_inputSecureFileLocation_param_id_type_long' => 'File ID, **id** parameter value from [secureFile](../constructors/secureFile.md)',
  'object_inputSecureFileLocation_param_access_hash_type_long' => 'Checksum, **access\\_hash** parameter value from [secureFile](../constructors/secureFile.md)',
  'object_messageActionBotAllowed' => 'The domain name of the website on which the user has logged in. [More about Telegram Login »](https://core.telegram.org/widgets/login)',
  'object_messageActionBotAllowed_param_domain_type_string' => 'The domain name of the website on which the user has logged in.',
  'object_messageActionSecureValuesSentMe' => 'Secure [telegram passport](https://core.telegram.org/passport) values were received',
  'object_messageActionSecureValuesSentMe_param_values_type_Vector t' => 'Values',
  'object_messageActionSecureValuesSentMe_param_credentials_type_SecureCredentialsEncrypted' => 'Encrypted credentials required to decrypt the data',
  'object_messageActionSecureValuesSent' => 'Request for secure [telegram passport](https://core.telegram.org/passport) values was sent',
  'object_messageActionSecureValuesSent_param_types_type_Vector t' => 'Types',
  'object_auth.sentCode_param_terms_of_service_type_help.TermsOfService' => 'Terms of service',
  'object_inputPeerNotifySettings_param_silent_type_Bool' => 'Peer was muted?',
  'object_peerNotifySettings_param_silent_type_Bool' => 'Mute peer?',
  'object_updateDialogPinned_param_peer_type_DialogPeer' => 'The dialog',
  'object_upload.fileCdnRedirect_param_file_hashes_type_Vector t' => 'File hashes',
  'object_dcOption_param_secret_type_bytes' => 'If the `tcpo_only` flag is set, specifies the secret to use when connecting using [transport obfuscation](https://core.telegram.org/mtproto/mtproto-transports#transport-obfuscation)',
  'object_config_param_preload_featured_stickers_type_true' => 'Whether the client should preload featured stickers',
  'object_config_param_ignore_phone_entities_type_true' => 'Whether the client should ignore phone [entities](https://core.telegram.org/api/entities)',
  'object_config_param_revoke_pm_inbox_type_true' => 'Whether incoming private messages can be deleted for both participants',
  'object_config_param_blocked_mode_type_true' => 'Indicates that telegram is *probably* censored by governments/ISPs in the current region',
  'object_config_param_revoke_time_limit_type_int' => 'Only channel/supergroup messages with age smaller than the specified can be deleted',
  'object_config_param_revoke_pm_time_limit_type_int' => 'Only private messages with age smaller than the specified can be deleted',
  'object_config_param_autoupdate_url_prefix_type_string' => 'URL to use to auto-update the current app',
  'object_messages.stickers_param_hash_type_int' => '[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)',
  'object_account.noPassword_param_new_secure_salt_type_bytes' => 'New secure salt',
  'object_account.noPassword_param_secure_random_type_bytes' => 'Secure random',
  'object_account.password_param_has_recovery_type_true' => 'Whether the user has a recovery method configured',
  'object_account.password_param_has_secure_values_type_true' => 'Whether telegram [passport](https://core.telegram.org/passport) is enabled',
  'object_account.password_param_new_secure_salt_type_bytes' => 'New secure salt',
  'object_account.password_param_secure_random_type_bytes' => 'Secure random string',
  'object_account.passwordSettings_param_secure_salt_type_bytes' => 'Secure salt',
  'object_account.passwordSettings_param_secure_secret_type_bytes' => 'Secure secret',
  'object_account.passwordSettings_param_secure_secret_id_type_long' => 'Secure secret ID',
  'object_account.passwordInputSettings_param_new_secure_salt_type_bytes' => 'New secure salt',
  'object_account.passwordInputSettings_param_new_secure_secret_type_bytes' => 'New secure secret',
  'object_account.passwordInputSettings_param_new_secure_secret_id_type_long' => 'New secure secret ID',
  'object_stickerSet_param_installed_date_type_int' => 'When was this stickerset installed',
  'object_messageEntityPhone' => 'Message entity representing a phone number.',
  'object_messageEntityPhone_param_offset_type_int' => 'Offset of message entity within message (in UTF-8 codepoints)',
  'object_messageEntityPhone_param_length_type_int' => 'Length of message entity within message (in UTF-8 codepoints)',
  'object_messageEntityCashtag' => 'Message entity representing a **$cashtag**.',
  'object_messageEntityCashtag_param_offset_type_int' => 'Offset of message entity within message (in UTF-8 codepoints)',
  'object_messageEntityCashtag_param_length_type_int' => 'Length of message entity within message (in UTF-8 codepoints)',
  'object_help.termsOfService_param_popup_type_true' => 'Whether a prompt must be showed to the user, in order to accept the new terms.',
  'object_help.termsOfService_param_id_type_DataJSON' => 'ID of the new terms',
  'object_help.termsOfService_param_entities_type_Vector t' => 'Entities',
  'object_help.termsOfService_param_min_age_confirm_type_int' => 'Minimum age required to sign up to telegram, the user must confirm that they is older than the minimum age.',
  'object_inputBotInlineMessageMediaVenue_param_venue_type_type_string' => 'Venue type in the provider\'s database',
  'object_inputBotInlineResult_param_thumb_type_InputWebDocument' => 'Thumbnail for result',
  'object_inputBotInlineResult_param_content_type_InputWebDocument' => 'Result contents',
  'object_botInlineMessageMediaVenue_param_venue_type_type_string' => 'Venue type in the provider\'s database',
  'object_botInlineResult_param_thumb_type_WebDocument' => 'Thumbnail for the result',
  'object_botInlineResult_param_content_type_WebDocument' => 'Content of the result',
  'object_messages.recentStickers_param_packs_type_Vector t' => 'Packs',
  'object_messages.recentStickers_param_dates_type_Vector t' => 'Dates',
  'object_webDocumentNoProxy' => 'Remote document that can be downloaded without [proxying through telegram](https://core.telegram.org/api/files)',
  'object_webDocumentNoProxy_param_url_type_string' => 'Document URL',
  'object_webDocumentNoProxy_param_size_type_int' => 'File size',
  'object_webDocumentNoProxy_param_mime_type_type_string' => 'MIME type',
  'object_webDocumentNoProxy_param_attributes_type_Vector t' => 'Attributes',
  'object_inputWebFileGeoPointLocation' => 'Geolocation',
  'object_inputWebFileGeoPointLocation_param_geo_point_type_InputGeoPoint' => 'Geolocation',
  'object_inputWebFileGeoPointLocation_param_w_type_int' => 'Map width in pixels before applying scale; 16-1024',
  'object_inputWebFileGeoPointLocation_param_h_type_int' => 'Map height in pixels before applying scale; 16-1024',
  'object_inputWebFileGeoPointLocation_param_zoom_type_int' => 'Map zoom level; 13-20',
  'object_inputWebFileGeoPointLocation_param_scale_type_int' => 'Map scale; 1-3',
  'object_inputWebFileGeoMessageLocation' => 'Web file geo message location',
  'object_inputWebFileGeoMessageLocation_param_peer_type_InputPeer' => 'Peer',
  'object_inputWebFileGeoMessageLocation_param_msg_id_type_int' => 'Msg ID',
  'object_inputWebFileGeoMessageLocation_param_w_type_int' => 'Width',
  'object_inputWebFileGeoMessageLocation_param_h_type_int' => 'Height',
  'object_inputWebFileGeoMessageLocation_param_zoom_type_int' => 'Zoom',
  'object_inputWebFileGeoMessageLocation_param_scale_type_int' => 'Scale',
  'object_channelAdminRights_param_manage_call_type_true' => 'Manage group calls',
  'object_inputDialogPeer' => 'A peer',
  'object_inputDialogPeer_param_peer_type_InputPeer' => 'Peer',
  'object_dialogPeer' => 'Peer',
  'object_dialogPeer_param_peer_type_Peer' => 'Peer',
  'object_messages.foundStickerSetsNotModified' => 'No further results were found',
  'object_messages.foundStickerSets' => 'Found stickersets',
  'object_messages.foundStickerSets_param_hash_type_int' => '[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)',
  'object_messages.foundStickerSets_param_sets_type_Vector t' => 'Sets',
  'object_fileHash' => 'SHA256 Hash of an uploaded file, to be checked for validity after download',
  'object_fileHash_param_offset_type_int' => 'Offset from where to start computing SHA-256 hash',
  'object_fileHash_param_limit_type_int' => 'Length',
  'object_fileHash_param_hash_type_bytes' => 'SHA-256 Hash of file chunk, to be checked for validity after download',
  'object_inputClientProxy' => 'Info about an [MTProxy](https://core.telegram.org/mtproto/mtproto-transports#transport-obfuscation) used to connect.',
  'object_inputClientProxy_param_address_type_string' => 'Proxy address',
  'object_inputClientProxy_param_port_type_int' => 'Proxy port',
  'object_help.proxyDataEmpty' => 'No proxy was used to connect to tg (or none was provided to [initConnection](../methods/initConnection.md), or the used proxy doesn\'t have a promotion channel associated to it)',
  'object_help.proxyDataEmpty_param_expires_type_int' => 'Expiration date of proxy info, will have to be refetched in `expires` seconds',
  'object_help.proxyDataPromo' => 'Promotion channel associated to a certain MTProxy',
  'object_help.proxyDataPromo_param_expires_type_int' => 'Expiration date of proxy info, will have to be refetched in `expires` seconds',
  'object_help.proxyDataPromo_param_peer_type_Peer' => 'The promoted channel',
  'object_help.proxyDataPromo_param_chats_type_Vector t' => 'Chats',
  'object_help.proxyDataPromo_param_users_type_Vector t' => 'Users',
  'object_help.termsOfServiceUpdateEmpty' => 'No changes were made to telegram\'s terms of service',
  'object_help.termsOfServiceUpdateEmpty_param_expires_type_int' => 'New TOS updates will have to be queried using [help.getTermsOfServiceUpdate](../methods/help.getTermsOfServiceUpdate.md) in `expires` seconds',
  'object_help.termsOfServiceUpdate' => 'Info about an update of telegram\'s terms of service. If the terms of service are declined, then the [account.deleteAccount](../methods/account.deleteAccount.md) method should be called with the reason "Decline ToS update"',
  'object_help.termsOfServiceUpdate_param_expires_type_int' => 'New TOS updates will have to be queried using [help.getTermsOfServiceUpdate](../methods/help.getTermsOfServiceUpdate.md) in `expires` seconds',
  'object_help.termsOfServiceUpdate_param_terms_of_service_type_help.TermsOfService' => 'New terms of service',
  'object_inputSecureFileUploaded' => 'Uploaded secure file, for more info [see the passport docs »](https://core.telegram.org/passport/encryption#inputsecurefile)',
  'object_inputSecureFileUploaded_param_id_type_long' => 'Secure file ID',
  'object_inputSecureFileUploaded_param_parts_type_int' => 'Secure file part count',
  'object_inputSecureFileUploaded_param_md5_checksum_type_string' => 'MD5 hash of encrypted uploaded file, to be checked server-side',
  'object_inputSecureFileUploaded_param_file_hash_type_bytes' => 'File hash',
  'object_inputSecureFileUploaded_param_secret_type_bytes' => 'Secret',
  'object_inputSecureFile' => 'Preuploaded [passport](https://core.telegram.org/passport) file, for more info [see the passport docs »](https://core.telegram.org/passport/encryption#inputsecurefile)',
  'object_inputSecureFile_param_id_type_long' => 'Secure file ID',
  'object_inputSecureFile_param_access_hash_type_long' => 'Secure file access hash',
  'object_secureFileEmpty' => 'Empty constructor',
  'object_secureFile' => 'Secure [passport](https://core.telegram.org/passport) file, for more info [see the passport docs »](https://core.telegram.org/passport/encryption#inputsecurefile)',
  'object_secureFile_param_id_type_long' => 'ID',
  'object_secureFile_param_access_hash_type_long' => 'Access hash',
  'object_secureFile_param_size_type_int' => 'File size',
  'object_secureFile_param_dc_id_type_int' => 'DC ID',
  'object_secureFile_param_date_type_int' => 'Date of upload',
  'object_secureFile_param_file_hash_type_bytes' => 'File hash',
  'object_secureFile_param_secret_type_bytes' => 'Secret',
  'object_secureData' => 'Secure [passport](https://core.telegram.org/passport) data, for more info [see the passport docs »](https://core.telegram.org/passport/encryption#securedata)',
  'object_secureData_param_data_type_bytes' => 'Data',
  'object_secureData_param_data_hash_type_bytes' => 'Data hash',
  'object_secureData_param_secret_type_bytes' => 'Secret',
  'object_securePlainPhone' => 'Phone number to use in [telegram passport](https://core.telegram.org/passport): [it must be verified, first »](https://core.telegram.org/passport/encryption#secureplaindata).',
  'object_securePlainPhone_param_phone_type_string' => 'Phone number',
  'object_securePlainEmail' => 'Email address to use in [telegram passport](https://core.telegram.org/passport): [it must be verified, first »](https://core.telegram.org/passport/encryption#secureplaindata).',
  'object_securePlainEmail_param_email_type_string' => 'Email address',
  'object_secureValueTypePersonalDetails' => 'Personal details',
  'object_secureValueTypePassport' => 'Passport',
  'object_secureValueTypeDriverLicense' => 'Driver\'s license',
  'object_secureValueTypeIdentityCard' => 'Identity card',
  'object_secureValueTypeInternalPassport' => 'Internal [passport](https://core.telegram.org/passport)',
  'object_secureValueTypeAddress' => 'Address',
  'object_secureValueTypeUtilityBill' => 'Utility bill',
  'object_secureValueTypeBankStatement' => 'Bank statement',
  'object_secureValueTypeRentalAgreement' => 'Rental agreement',
  'object_secureValueTypePassportRegistration' => 'Internal registration [passport](https://core.telegram.org/passport)',
  'object_secureValueTypeTemporaryRegistration' => 'Temporary registration',
  'object_secureValueTypePhone' => 'Phone',
  'object_secureValueTypeEmail' => 'Email',
  'object_secureValue' => 'Secure value',
  'object_secureValue_param_type_type_SecureValueType' => 'Secure [passport](https://core.telegram.org/passport) value type',
  'object_secureValue_param_data_type_SecureData' => 'Encrypted [Telegram Passport](https://core.telegram.org/passport) element data',
  'object_secureValue_param_front_side_type_SecureFile' => 'Encrypted [passport](https://core.telegram.org/passport) file with the front side of the document',
  'object_secureValue_param_reverse_side_type_SecureFile' => 'Encrypted [passport](https://core.telegram.org/passport) file with the reverse side of the document',
  'object_secureValue_param_selfie_type_SecureFile' => 'Encrypted [passport](https://core.telegram.org/passport) file with a selfie of the user holding the document',
  'object_secureValue_param_files_type_Vector t' => 'Files',
  'object_secureValue_param_plain_data_type_SecurePlainData' => 'Plaintext verified [passport](https://core.telegram.org/passport) data',
  'object_secureValue_param_hash_type_bytes' => 'Data hash',
  'object_inputSecureValue' => 'Secure value, [for more info see the passport docs »](https://core.telegram.org/passport/encryption#encryption)',
  'object_inputSecureValue_param_type_type_SecureValueType' => 'Secure [passport](https://core.telegram.org/passport) value type',
  'object_inputSecureValue_param_data_type_SecureData' => 'Encrypted [Telegram Passport](https://core.telegram.org/passport) element data',
  'object_inputSecureValue_param_front_side_type_InputSecureFile' => 'Encrypted [passport](https://core.telegram.org/passport) file with the front side of the document',
  'object_inputSecureValue_param_reverse_side_type_InputSecureFile' => 'Encrypted [passport](https://core.telegram.org/passport) file with the reverse side of the document',
  'object_inputSecureValue_param_selfie_type_InputSecureFile' => 'Encrypted [passport](https://core.telegram.org/passport) file with a selfie of the user holding the document',
  'object_inputSecureValue_param_files_type_Vector t' => 'Files',
  'object_inputSecureValue_param_plain_data_type_SecurePlainData' => 'Plaintext verified [passport](https://core.telegram.org/passport) data',
  'object_secureValueHash' => 'Secure value hash',
  'object_secureValueHash_param_type_type_SecureValueType' => 'Secure value type',
  'object_secureValueHash_param_hash_type_bytes' => 'Hash',
  'object_secureValueErrorData' => 'Represents an issue in one of the data fields that was provided by the user. The error is considered resolved when the field\'s value changes.',
  'object_secureValueErrorData_param_type_type_SecureValueType' => 'The section of the user\'s Telegram Passport which has the error, one of [secureValueTypePersonalDetails](../constructors/secureValueTypePersonalDetails.md), [secureValueTypePassport](../constructors/secureValueTypePassport.md), [secureValueTypeDriverLicense](../constructors/secureValueTypeDriverLicense.md), [secureValueTypeIdentityCard](../constructors/secureValueTypeIdentityCard.md), [secureValueTypeInternalPassport](../constructors/secureValueTypeInternalPassport.md), [secureValueTypeAddress](../constructors/secureValueTypeAddress.md)',
  'object_secureValueErrorData_param_data_hash_type_bytes' => 'Data hash',
  'object_secureValueErrorData_param_field_type_string' => 'Name of the data field which has the error',
  'object_secureValueErrorData_param_text_type_string' => 'Error message',
  'object_secureValueErrorFrontSide' => 'Represents an issue with the front side of a document. The error is considered resolved when the file with the front side of the document changes.',
  'object_secureValueErrorFrontSide_param_type_type_SecureValueType' => 'One of [secureValueTypePassport](../constructors/secureValueTypePassport.md), [secureValueTypeDriverLicense](../constructors/secureValueTypeDriverLicense.md), [secureValueTypeIdentityCard](../constructors/secureValueTypeIdentityCard.md), [secureValueTypeInternalPassport](../constructors/secureValueTypeInternalPassport.md)',
  'object_secureValueErrorFrontSide_param_file_hash_type_bytes' => 'File hash',
  'object_secureValueErrorFrontSide_param_text_type_string' => 'Error message',
  'object_secureValueErrorReverseSide' => 'Represents an issue with the reverse side of a document. The error is considered resolved when the file with reverse side of the document changes.',
  'object_secureValueErrorReverseSide_param_type_type_SecureValueType' => 'One of [secureValueTypeDriverLicense](../constructors/secureValueTypeDriverLicense.md), [secureValueTypeIdentityCard](../constructors/secureValueTypeIdentityCard.md)',
  'object_secureValueErrorReverseSide_param_file_hash_type_bytes' => 'File hash',
  'object_secureValueErrorReverseSide_param_text_type_string' => 'Error message',
  'object_secureValueErrorSelfie' => 'Represents an issue with the selfie with a document. The error is considered resolved when the file with the selfie changes.',
  'object_secureValueErrorSelfie_param_type_type_SecureValueType' => 'One of [secureValueTypePassport](../constructors/secureValueTypePassport.md), [secureValueTypeDriverLicense](../constructors/secureValueTypeDriverLicense.md), [secureValueTypeIdentityCard](../constructors/secureValueTypeIdentityCard.md), [secureValueTypeInternalPassport](../constructors/secureValueTypeInternalPassport.md)',
  'object_secureValueErrorSelfie_param_file_hash_type_bytes' => 'File hash',
  'object_secureValueErrorSelfie_param_text_type_string' => 'Error message',
  'object_secureValueErrorFile' => 'Represents an issue with a document scan. The error is considered resolved when the file with the document scan changes.',
  'object_secureValueErrorFile_param_type_type_SecureValueType' => 'One of [secureValueTypeUtilityBill](../constructors/secureValueTypeUtilityBill.md), [secureValueTypeBankStatement](../constructors/secureValueTypeBankStatement.md), [secureValueTypeRentalAgreement](../constructors/secureValueTypeRentalAgreement.md), [secureValueTypePassportRegistration](../constructors/secureValueTypePassportRegistration.md), [secureValueTypeTemporaryRegistration](../constructors/secureValueTypeTemporaryRegistration.md)',
  'object_secureValueErrorFile_param_file_hash_type_bytes' => 'File hash',
  'object_secureValueErrorFile_param_text_type_string' => 'Error message',
  'object_secureValueErrorFiles' => 'Represents an issue with a list of scans. The error is considered resolved when the list of files containing the scans changes.',
  'object_secureValueErrorFiles_param_type_type_SecureValueType' => 'One of [secureValueTypeUtilityBill](../constructors/secureValueTypeUtilityBill.md), [secureValueTypeBankStatement](../constructors/secureValueTypeBankStatement.md), [secureValueTypeRentalAgreement](../constructors/secureValueTypeRentalAgreement.md), [secureValueTypePassportRegistration](../constructors/secureValueTypePassportRegistration.md), [secureValueTypeTemporaryRegistration](../constructors/secureValueTypeTemporaryRegistration.md)',
  'object_secureValueErrorFiles_param_file_hash_type_Vector t' => 'File hash',
  'object_secureValueErrorFiles_param_text_type_string' => 'Error message',
  'object_secureCredentialsEncrypted' => 'Encrypted credentials required to decrypt [telegram passport](https://core.telegram.org/passport) data.',
  'object_secureCredentialsEncrypted_param_data_type_bytes' => 'Encrypted JSON-serialized data with unique user\'s payload, data hashes and secrets required for EncryptedPassportElement decryption and authentication, as described in [decrypting data »](https://core.telegram.org/passport#decrypting-data)',
  'object_secureCredentialsEncrypted_param_hash_type_bytes' => 'Data hash for data authentication as described in [decrypting data »](https://core.telegram.org/passport#decrypting-data)',
  'object_secureCredentialsEncrypted_param_secret_type_bytes' => 'Secret, encrypted with the bot\'s public RSA key, required for data decryption as described in [decrypting data »](https://core.telegram.org/passport#decrypting-data)',
  'object_account.authorizationForm' => '[Telegram Passport](https://core.telegram.org/passport) authorization form',
  'object_account.authorizationForm_param_selfie_required_type_true' => 'Selfie required?',
  'object_account.authorizationForm_param_required_types_type_Vector t' => 'Required types',
  'object_account.authorizationForm_param_values_type_Vector t' => 'Values',
  'object_account.authorizationForm_param_errors_type_Vector t' => 'Errors',
  'object_account.authorizationForm_param_users_type_Vector t' => 'Users',
  'object_account.authorizationForm_param_privacy_policy_url_type_string' => 'URL of the service\'s privacy policy',
  'object_account.sentEmailCode' => 'The sent email code',
  'object_account.sentEmailCode_param_email_pattern_type_string' => 'The email (to which the code was sent) must match this [pattern](https://core.telegram.org/api/pattern)',
  'object_account.sentEmailCode_param_length_type_int' => 'The length of the verification code',
  'object_help.deepLinkInfoEmpty' => 'Deep link info empty',
  'object_help.deepLinkInfo' => 'Deep linking info',
  'object_help.deepLinkInfo_param_update_app_type_true' => 'An update of the app is required to parse this link',
  'object_help.deepLinkInfo_param_message_type_string' => 'Message to show to the user',
  'object_help.deepLinkInfo_param_entities_type_Vector t' => 'Entities',
  'method_invokeWithMessagesRange' => 'Invoke with the given message range',
  'method_invokeWithMessagesRange_param_range_type_MessageRange' => 'Message range',
  'method_invokeWithMessagesRange_param_query_type_!X' => 'Query',
  'method_invokeWithTakeout' => 'Invoke a method within a takeout session',
  'method_invokeWithTakeout_param_takeout_id_type_long' => 'Takeout session ID',
  'method_invokeWithTakeout_param_query_type_!X' => 'Query',
  'method_account.initTakeoutSession' => 'Intialize account takeout session',
  'method_account.initTakeoutSession_param_contacts_type_true' => 'Whether to export contacts',
  'method_account.initTakeoutSession_param_message_users_type_true' => 'Whether to export messages in private chats',
  'method_account.initTakeoutSession_param_message_chats_type_true' => 'Whether to export messages in [legacy groups](https://core.telegram.org/api/channel)',
  'method_account.initTakeoutSession_param_message_megagroups_type_true' => 'Whether to export messages in [supergroups](https://core.telegram.org/api/channel)',
  'method_account.initTakeoutSession_param_message_channels_type_true' => 'Whether to export messages in [channels](https://core.telegram.org/api/channel)',
  'method_account.initTakeoutSession_param_files_type_true' => 'Whether to export files',
  'method_account.initTakeoutSession_param_file_max_size_type_int' => 'Maximum size of files to export',
  'method_account.finishTakeoutSession' => 'Finish account takeout session',
  'method_account.finishTakeoutSession_param_success_type_true' => 'Data exported successfully',
  'method_contacts.getSaved' => 'Get all contacts',
  'method_messages.getSplitRanges' => 'Get message ranges for saving the user\'s chat history',
  'method_channels.getLeftChannels' => 'Get a list of [channels/supergroups](https://core.telegram.org/api/channel) we left',
  'method_channels.getLeftChannels_param_offset_type_int' => 'Offset for [pagination](https://core.telegram.org/api/offsets)',
  'object_ipPortSecret' => 'Ip port secret',
  'object_ipPortSecret_param_ipv4_type_int' => 'Ipv4',
  'object_ipPortSecret_param_port_type_int' => 'Port',
  'object_ipPortSecret_param_secret_type_bytes' => 'Secret',
  'object_accessPointRule' => 'Access point rule',
  'object_accessPointRule_param_phone_prefix_rules_type_string' => 'Phone prefix rules',
  'object_accessPointRule_param_dc_id_type_int' => 'DC ID',
  'object_accessPointRule_param_ips_type_vector' => 'Ips',
  'object_help.configSimple_param_rules_type_vector' => 'Rules',
  'object_inputTakeoutFileLocation' => 'Empty constructor for takeout',
  'object_savedPhoneContact' => 'Saved contact',
  'object_savedPhoneContact_param_phone_type_string' => 'Phone number',
  'object_savedPhoneContact_param_first_name_type_string' => 'First name',
  'object_savedPhoneContact_param_last_name_type_string' => 'Last name',
  'object_savedPhoneContact_param_date_type_int' => 'Date added',
  'object_account.takeout' => 'Takout info',
  'object_account.takeout_param_id_type_long' => 'Takeout ID',
  'method_contacts.toggleTopPeers' => 'Enable/disable [top peers](https://core.telegram.org/api/top-rating)',
  'method_contacts.toggleTopPeers_param_enabled_type_Bool' => 'Enable/disable',
  'method_messages.getDialogs_param_hash_type_int' => '[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)',
  'method_messages.markDialogUnread' => 'Manually mark dialog as unread',
  'method_messages.markDialogUnread_param_unread_type_true' => 'Mark as unread/read',
  'method_messages.markDialogUnread_param_peer_type_InputDialogPeer' => 'Dialog',
  'method_messages.getDialogUnreadMarks' => 'Get dialogs manually marked as unread',
  'object_inputMediaContact_param_vcard_type_string' => 'Contact vcard',
  'object_messageMediaContact_param_vcard_type_string' => 'VCARD of contact',
  'object_dialog_param_unread_mark_type_true' => 'Whether the chat was manually marked as unread',
  'object_geoPoint_param_access_hash_type_long' => 'Access hash',
  'object_messages.dialogsNotModified' => 'Dialogs haven\'t changed',
  'object_messages.dialogsNotModified_param_count_type_int' => 'Number of dialogs found server-side by the query',
  'object_updateDialogUnreadMark' => 'The manual unread mark of a chat was changed',
  'object_updateDialogUnreadMark_param_unread_type_true' => 'Was the chat marked or unmarked as read',
  'object_updateDialogUnreadMark_param_peer_type_DialogPeer' => 'The dialog',
  'object_config_param_dc_txt_domain_name_type_string' => 'Domain name for fetching encrypted DC list from DNS TXT record',
  'object_config_param_gif_search_username_type_string' => 'Username of the bot to use to search for GIFs',
  'object_config_param_venue_search_username_type_string' => 'Username of the bot to use to search for venues',
  'object_config_param_img_search_username_type_string' => 'Username of the bot to use for image search',
  'object_config_param_static_maps_provider_type_string' => 'ID of the map provider to use for venues',
  'object_config_param_caption_length_max_type_int' => 'Maximum length of caption (length in utf8 codepoints)',
  'object_config_param_message_length_max_type_int' => 'Maximum length of messages (length in utf8 codepoints)',
  'object_config_param_webfile_dc_id_type_int' => 'DC ID to use to download [webfiles](https://core.telegram.org/api/files)',
  'object_inputBotInlineMessageMediaContact_param_vcard_type_string' => 'VCard info',
  'object_botInlineMessageMediaContact_param_vcard_type_string' => 'VCard info',
  'object_contacts.topPeersDisabled' => 'Top peers disabled',
  'object_draftMessageEmpty_param_date_type_int' => 'When was the draft last updated',
  'object_inputWebFileGeoPointLocation_param_access_hash_type_long' => 'Access hash',
  'method_contacts.getContacts_param_hash_type_Vector t' => 'User IDs of previously cached contacts',
  'method_contacts.getTopPeers_param_hash_type_Vector t' => 'Peer IDs of previously cached peers',
  'method_messages.getDialogs_param_hash_type_Vector t' => 'IDs of previously fetched dialogs',
  'method_messages.getHistory_param_hash_type_Vector t' => 'IDs of messages you already fetched',
  'method_messages.search_param_hash_type_Vector t' => 'The IDs of messages you already fetched',
  'method_messages.getStickers_param_hash_type_Vector t' => ' the hash parameter of the previous result of this method',
  'method_messages.getAllStickers_param_hash_type_Vector t' => 'The hash parameter of the previous result of this method',
  'method_messages.getSavedGifs_param_hash_type_Vector t' => ' the hash parameter of the previous result of this method',
  'method_messages.getFeaturedStickers_param_hash_type_Vector t' => ' the hash parameter of the previous result of this method',
  'method_messages.getRecentStickers_param_hash_type_Vector t' => 'IDs the hash parameter of the previous result of this method',
  'method_messages.getMaskStickers_param_hash_type_Vector t' => ' the hash parameter of the previous result of this method',
  'method_messages.getWebPage_param_hash_type_Vector t' => ' the hash parameter of the previous result of this method',
  'method_messages.getFavedStickers_param_hash_type_Vector t' => ' the hash parameter of the previous result of this method',
  'method_messages.getRecentLocations_param_hash_type_Vector t' => 'IDs of locations you already fetched',
  'method_messages.searchStickerSets_param_hash_type_Vector t' => 'The IDs of stickersets you already fetched',
  'method_channels.getParticipants_param_hash_type_Vector t' => 'IDs of previously fetched participants',
  'method_auth.checkPassword_param_password_type_InputCheckPasswordSRP' => 'You cannot use this method directly, use the complete2falogin method instead (see https://docs.madelineproto.xyz for more info)',
  'method_account.getPasswordSettings_param_password_type_InputCheckPasswordSRP' => 'You cannot use this method directly; use $MadelineProto->update2fa($params), instead (see https://docs.madelineproto.xyz for more info)',
  'method_account.updatePasswordSettings_param_password_type_InputCheckPasswordSRP' => 'You cannot use this method directly; use $MadelineProto->update2fa($params), instead (see https://docs.madelineproto.xyz for more info)',
  'method_account.getTmpPassword_param_password_type_InputCheckPasswordSRP' => 'SRP password parameters',
  'method_account.confirmPasswordEmail' => 'Verify an email to use as [2FA recovery method](https://core.telegram.org/api/srp).',
  'method_account.confirmPasswordEmail_param_code_type_string' => 'The phone code that was received after [setting a recovery email](https://core.telegram.org/api/srp#email-verification)',
  'method_account.resendPasswordEmail' => 'Resend the code to verify an email to use as [2FA recovery method](https://core.telegram.org/api/srp).',
  'method_account.cancelPasswordEmail' => 'Cancel the code that was sent to verify an email to use as [2FA recovery method](https://core.telegram.org/api/srp).',
  'method_account.getContactSignUpNotification' => 'Whether the user will receive notifications when contacts sign up',
  'method_account.setContactSignUpNotification' => 'Toggle contact sign up notifications',
  'method_account.setContactSignUpNotification_param_silent_type_Bool' => 'Whether to disable contact sign up notifications',
  'method_account.getNotifyExceptions' => 'Returns list of chats with non-default notification settings',
  'method_account.getNotifyExceptions_param_compare_sound_type_true' => 'If true, chats with non-default sound will also be returned',
  'method_account.getNotifyExceptions_param_peer_type_InputNotifyPeer' => 'If specified, only chats of the specified category will be returned',
  'method_contacts.getContactIDs' => 'Get contact by telegram IDs',
  'method_contacts.getContactIDs_param_hash_type_Vector t' => 'Previously fetched IDs',
  'method_contacts.deleteByPhones' => 'Delete contacts by phone number',
  'method_contacts.deleteByPhones_param_phones_type_Vector t' => 'Phones',
  'method_messages.sendInlineBotResult_param_hide_via_type_true' => 'Whether to hide the `via @botname` in the resulting message (only for bot usernames encountered in the [config](../constructors/config.md))',
  'method_messages.clearAllDrafts' => 'Clear all [drafts](https://core.telegram.org/api/drafts).',
  'method_messages.updatePinnedMessage' => 'Pin a message',
  'method_messages.updatePinnedMessage_param_silent_type_true' => 'Pin the message silently, without triggering a notification',
  'method_messages.updatePinnedMessage_param_peer_type_InputPeer' => 'The peer where to pin the message',
  'method_messages.updatePinnedMessage_param_id_type_int' => 'The message to pin, can be 0 to unpin any currently pinned messages',
  'method_messages.sendVote' => 'Vote in a [poll](../constructors/poll.md)',
  'method_messages.sendVote_param_peer_type_InputPeer' => 'The chat where the poll was sent',
  'method_messages.sendVote_param_msg_id_type_int' => 'The message ID of the poll',
  'method_messages.sendVote_param_options_type_Vector t' => 'Options',
  'method_messages.getPollResults' => 'Get poll results',
  'method_messages.getPollResults_param_peer_type_InputPeer' => 'Peer where the poll was found',
  'method_messages.getPollResults_param_msg_id_type_int' => 'Message ID of poll message',
  'method_messages.getOnlines' => 'Get count of online users in a chat',
  'method_messages.getOnlines_param_peer_type_InputPeer' => 'The chat',
  'method_messages.getStatsURL' => 'Returns URL with the chat statistics. Currently this method can be used only for channels',
  'method_messages.getStatsURL_param_peer_type_InputPeer' => 'Chat identifier',
  'method_help.getAppUpdate_param_source_type_string' => 'Source',
  'method_help.getAppConfig' => 'Get app-specific configuration',
  'method_help.getPassportConfig' => 'Get [passport](https://core.telegram.org/passport) configuration',
  'method_help.getPassportConfig_param_hash_type_Vector t' => 'Hash',
  'method_help.getSupportName' => 'Get localized name of the telegram support user',
  'method_help.getUserInfo' => 'Internal use',
  'method_help.getUserInfo_param_user_id_type_InputUser' => 'User ID',
  'method_help.editUserInfo' => 'Internal use',
  'method_help.editUserInfo_param_user_id_type_InputUser' => 'User',
  'method_help.editUserInfo_param_message_type_string' => 'Message',
  'method_help.editUserInfo_param_entities_type_Vector t' => 'Entities',
  'method_langpack.getLangPack_param_lang_pack_type_string' => 'Language pack name',
  'method_langpack.getStrings_param_lang_pack_type_string' => 'Language pack name',
  'method_langpack.getDifference_param_lang_code_type_string' => 'Language code',
  'method_langpack.getLanguages_param_lang_pack_type_string' => 'Language pack',
  'method_langpack.getLanguage' => 'Get information about a language in a localization pack',
  'method_langpack.getLanguage_param_lang_pack_type_string' => 'Language pack name',
  'method_langpack.getLanguage_param_lang_code_type_string' => 'Language code',
  'object_inputMediaGeoLive_param_stopped_type_true' => 'Whether sending of the geolocation was stopped',
  'object_inputMediaPoll' => 'A poll',
  'object_inputMediaPoll_param_poll_type_Poll' => 'The poll to send',
  'object_inputPhoto_param_file_reference_type_bytes' => '[File reference](https://core.telegram.org/api/file_reference)',
  'object_inputFileLocation_param_file_reference_type_bytes' => '[File reference](https://core.telegram.org/api/file_reference)',
  'object_inputDocumentFileLocation_param_file_reference_type_bytes' => '[File reference](https://core.telegram.org/api/file_reference)',
  'object_fileLocation_param_file_reference_type_bytes' => 'File reference',
  'object_chatFull_param_pinned_msg_id_type_int' => 'Message ID of the pinned message',
  'object_channelFull_param_can_view_stats_type_true' => 'Can the user call [messages.getStatsURL](../methods/messages.getStatsURL.md) on this channel',
  'object_channelFull_param_online_count_type_int' => 'Number of users currently online',
  'object_message_param_from_scheduled_type_true' => 'Whether this is a scheduled post',
  'object_messageMediaPoll' => 'Poll',
  'object_messageMediaPoll_param_poll_type_Poll' => 'The poll',
  'object_messageMediaPoll_param_results_type_PollResults' => 'The results of the poll',
  'object_messageActionContactSignUp' => 'A contact just signed up to telegram',
  'object_photo_param_file_reference_type_bytes' => '[file reference](https://core.telegram.org/api/file_reference)',
  'object_inputNotifyBroadcasts' => 'All [channels](https://core.telegram.org/api/channel)',
  'object_inputReportReasonChildAbuse' => 'Report for child abuse',
  'object_inputReportReasonCopyright' => 'Report for copyrighted content',
  'object_userFull_param_can_pin_message_type_true' => 'Whether you can pin messages in the chat with this user, you can do this only for a chat with yourself',
  'object_userFull_param_pinned_msg_id_type_int' => 'Pinned message ID, you can only pin messages in a chat with yourself',
  'object_messages.channelMessages_param_inexact_type_true' => 'If set, returned results may be inexact',
  'object_updateLangPackTooLong_param_lang_code_type_string' => 'Language code',
  'object_updateUserPinnedMessage' => 'A message was pinned in a private chat with a user',
  'object_updateUserPinnedMessage_param_user_id_type_int' => 'User that pinned the message',
  'object_updateUserPinnedMessage_param_id_type_int' => 'Message ID that was pinned',
  'object_updateChatPinnedMessage' => 'A message was pinned in a [legacy group](https://core.telegram.org/api/channel)',
  'object_updateChatPinnedMessage_param_chat_id_type_int' => '[Legacy group](https://core.telegram.org/api/channel) ID',
  'object_updateChatPinnedMessage_param_id_type_int' => 'ID of pinned message',
  'object_updateMessagePoll' => 'The results of a poll have changed',
  'object_updateMessagePoll_param_poll_id_type_long' => 'Poll ID',
  'object_updateMessagePoll_param_poll_type_Poll' => 'If the server knows the client hasn\'t cached this poll yet, the poll itself',
  'object_updateMessagePoll_param_results_type_PollResults' => 'New poll results',
  'object_config_param_pfs_enabled_type_true' => 'Whether [pfs](https://core.telegram.org/api/pfs) was used',
  'object_config_param_base_lang_pack_version_type_int' => 'Basic language pack version',
  'object_help.appUpdate_param_popup_type_true' => 'Popup?',
  'object_help.appUpdate_param_version_type_string' => 'New version name',
  'object_help.appUpdate_param_entities_type_Vector t' => 'Entities',
  'object_help.appUpdate_param_document_type_Document' => 'Attached document',
  'object_inputDocument_param_file_reference_type_bytes' => '[File reference](https://core.telegram.org/api/file_reference)',
  'object_document_param_file_reference_type_bytes' => '[File reference](https://core.telegram.org/api/file_reference)',
  'object_notifyBroadcasts' => 'Channel notification settings',
  'object_inputPrivacyKeyPhoneP2P' => 'Whether the user allows P2P communication during VoIP calls',
  'object_privacyKeyPhoneP2P' => 'Whether P2P connections in phone calls are allowed',
  'object_authorization_param_current_type_true' => 'Whether this is the current session',
  'object_authorization_param_official_app_type_true' => 'Whether the session is from an official app',
  'object_authorization_param_password_pending_type_true' => 'Whether the session is still waiting for a 2FA password',
  'object_account.password_param_has_password_type_true' => 'Whether the user has a password',
  'object_account.password_param_current_algo_type_PasswordKdfAlgo' => 'The [KDF algorithm for SRP two-factor authentication](https://core.telegram.org/api/srp) of the current password',
  'object_account.password_param_srp_B_type_bytes' => 'Srp B param for [SRP authorization](https://core.telegram.org/api/srp)',
  'object_account.password_param_srp_id_type_long' => 'Srp ID param for [SRP authorization](https://core.telegram.org/api/srp)',
  'object_account.password_param_new_algo_type_PasswordKdfAlgo' => 'The [KDF algorithm for SRP two-factor authentication](https://core.telegram.org/api/srp) to use when creating new passwords',
  'object_account.password_param_new_secure_algo_type_SecurePasswordKdfAlgo' => 'The KDF algorithm for telegram [passport](https://core.telegram.org/passport)',
  'object_account.passwordSettings_param_secure_settings_type_SecureSecretSettings' => 'Telegram [passport](https://core.telegram.org/passport) settings',
  'object_account.passwordInputSettings_param_new_algo_type_PasswordKdfAlgo' => 'The [SRP algorithm](https://core.telegram.org/api/srp) to use',
  'object_account.passwordInputSettings_param_new_secure_settings_type_SecureSecretSettings' => 'Telegram [passport](https://core.telegram.org/passport) settings',
  'object_textSubscript' => 'Subscript text',
  'object_textSubscript_param_text_type_RichText' => 'Text',
  'object_textSuperscript' => 'Superscript text',
  'object_textSuperscript_param_text_type_RichText' => 'Text',
  'object_textMarked' => 'Highlighted text',
  'object_textMarked_param_text_type_RichText' => 'Text',
  'object_textPhone' => 'Rich text linked to a phone number',
  'object_textPhone_param_text_type_RichText' => 'Text',
  'object_textPhone_param_phone_type_string' => 'Phone number',
  'object_textImage' => 'Inline image',
  'object_textImage_param_document_id_type_long' => 'Document ID',
  'object_textImage_param_w_type_int' => 'Width',
  'object_textImage_param_h_type_int' => 'Height',
  'object_textAnchor' => 'Text linking to another section of the page',
  'object_textAnchor_param_text_type_RichText' => 'Text',
  'object_textAnchor_param_name_type_string' => 'Section name',
  'object_pageBlockPhoto_param_caption_type_PageCaption' => 'Caption',
  'object_pageBlockPhoto_param_url_type_string' => 'HTTP URL of page the photo leads to when clicked',
  'object_pageBlockPhoto_param_webpage_id_type_long' => 'ID of preview of the page the photo leads to when clicked',
  'object_pageBlockVideo_param_caption_type_PageCaption' => 'Caption',
  'object_pageBlockEmbed_param_caption_type_PageCaption' => 'Caption',
  'object_pageBlockEmbedPost_param_caption_type_PageCaption' => 'Caption',
  'object_pageBlockCollage_param_caption_type_PageCaption' => 'Caption',
  'object_pageBlockSlideshow_param_caption_type_PageCaption' => 'Caption',
  'object_pageBlockAudio_param_caption_type_PageCaption' => 'Audio caption',
  'object_pageBlockKicker' => 'Kicker',
  'object_pageBlockKicker_param_text_type_RichText' => 'Contents',
  'object_pageBlockTable' => 'Table',
  'object_pageBlockTable_param_bordered_type_true' => 'Does the table have a visible border?',
  'object_pageBlockTable_param_striped_type_true' => 'Is the table striped?',
  'object_pageBlockTable_param_title_type_RichText' => 'Title',
  'object_pageBlockTable_param_rows_type_Vector t' => 'Rows',
  'object_pageBlockOrderedList' => 'Ordered list of IV blocks',
  'object_pageBlockOrderedList_param_items_type_Vector t' => 'Items',
  'object_pageBlockDetails' => 'A collapsible details block',
  'object_pageBlockDetails_param_open_type_true' => 'Whether the block is open by default',
  'object_pageBlockDetails_param_blocks_type_Vector t' => 'Blocks',
  'object_pageBlockDetails_param_title_type_RichText' => 'Always visible heading for the block',
  'object_pageBlockRelatedArticles' => 'Related articles',
  'object_pageBlockRelatedArticles_param_title_type_RichText' => 'Title',
  'object_pageBlockRelatedArticles_param_articles_type_Vector t' => 'Articles',
  'object_pageBlockMap' => 'A map',
  'object_pageBlockMap_param_geo_type_GeoPoint' => 'Location of the map center',
  'object_pageBlockMap_param_zoom_type_int' => 'Map zoom level; 13-20',
  'object_pageBlockMap_param_w_type_int' => 'Map width in pixels before applying scale; 16-102',
  'object_pageBlockMap_param_h_type_int' => 'Map height in pixels before applying scale; 16-1024',
  'object_pageBlockMap_param_caption_type_PageCaption' => 'Caption',
  'object_phoneCall_param_p2p_allowed_type_true' => 'Whether P2P connection to the other peer is allowed',
  'object_langPackLanguage_param_official_type_true' => 'Whether the language pack is official',
  'object_langPackLanguage_param_rtl_type_true' => 'Is this a localization pack for an RTL language',
  'object_langPackLanguage_param_beta_type_true' => 'Is this a beta localization pack?',
  'object_langPackLanguage_param_base_lang_code_type_string' => 'Identifier of a base language pack; may be empty. If a string is missed in the language pack, then it should be fetched from base language pack. Unsupported in custom language packs',
  'object_langPackLanguage_param_plural_code_type_string' => 'A language code to be used to apply plural forms. See [https://www.unicode.org/cldr/charts/latest/supplemental/language\\_plural\\_rules.html](https://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html) for more info',
  'object_langPackLanguage_param_strings_count_type_int' => 'Total number of non-deleted strings from the language pack',
  'object_langPackLanguage_param_translated_count_type_int' => 'Total number of translated strings from the language pack',
  'object_langPackLanguage_param_translations_url_type_string' => 'Link to language translation interface; empty for custom local language packs',
  'object_secureValue_param_translation_type_Vector t' => 'Translation',
  'object_inputSecureValue_param_translation_type_Vector t' => 'Translation',
  'object_secureValueError' => 'Secure value error',
  'object_secureValueError_param_type_type_SecureValueType' => 'Type of element which has the issue',
  'object_secureValueError_param_hash_type_bytes' => 'Hash',
  'object_secureValueError_param_text_type_string' => 'Error message',
  'object_secureValueErrorTranslationFile' => 'Represents an issue with one of the files that constitute the translation of a document. The error is considered resolved when the file changes.',
  'object_secureValueErrorTranslationFile_param_type_type_SecureValueType' => 'One of [secureValueTypePersonalDetails](../constructors/secureValueTypePersonalDetails.md), [secureValueTypePassport](../constructors/secureValueTypePassport.md), [secureValueTypeDriverLicense](../constructors/secureValueTypeDriverLicense.md), [secureValueTypeIdentityCard](../constructors/secureValueTypeIdentityCard.md), [secureValueTypeInternalPassport](../constructors/secureValueTypeInternalPassport.md), [secureValueTypeUtilityBill](../constructors/secureValueTypeUtilityBill.md), [secureValueTypeBankStatement](../constructors/secureValueTypeBankStatement.md), [secureValueTypeRentalAgreement](../constructors/secureValueTypeRentalAgreement.md), [secureValueTypePassportRegistration](../constructors/secureValueTypePassportRegistration.md), [secureValueTypeTemporaryRegistration](../constructors/secureValueTypeTemporaryRegistration.md)',
  'object_secureValueErrorTranslationFile_param_file_hash_type_bytes' => 'File hash',
  'object_secureValueErrorTranslationFile_param_text_type_string' => 'Error message',
  'object_secureValueErrorTranslationFiles' => 'Represents an issue with the translated version of a document. The error is considered resolved when a file with the document translation changes.',
  'object_secureValueErrorTranslationFiles_param_type_type_SecureValueType' => 'One of [secureValueTypePersonalDetails](../constructors/secureValueTypePersonalDetails.md), [secureValueTypePassport](../constructors/secureValueTypePassport.md), [secureValueTypeDriverLicense](../constructors/secureValueTypeDriverLicense.md), [secureValueTypeIdentityCard](../constructors/secureValueTypeIdentityCard.md), [secureValueTypeInternalPassport](../constructors/secureValueTypeInternalPassport.md), [secureValueTypeUtilityBill](../constructors/secureValueTypeUtilityBill.md), [secureValueTypeBankStatement](../constructors/secureValueTypeBankStatement.md), [secureValueTypeRentalAgreement](../constructors/secureValueTypeRentalAgreement.md), [secureValueTypePassportRegistration](../constructors/secureValueTypePassportRegistration.md), [secureValueTypeTemporaryRegistration](../constructors/secureValueTypeTemporaryRegistration.md)',
  'object_secureValueErrorTranslationFiles_param_file_hash_type_Vector t' => 'File hash',
  'object_secureValueErrorTranslationFiles_param_text_type_string' => 'Error message',
  'object_passwordKdfAlgoUnknown' => 'Unknown KDF (most likely, the client is outdated and does not support the specified KDF algorithm)',
  'object_passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow' => 'This key derivation algorithm defines that [SRP 2FA login](https://core.telegram.org/api/srp) must be used',
  'object_passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow_param_salt1_type_bytes' => 'One of two salts used by the derivation function (see [SRP 2FA login](https://core.telegram.org/api/srp))',
  'object_passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow_param_salt2_type_bytes' => 'One of two salts used by the derivation function (see [SRP 2FA login](https://core.telegram.org/api/srp))',
  'object_passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow_param_g_type_int' => 'Base (see [SRP 2FA login](https://core.telegram.org/api/srp))',
  'object_passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow_param_p_type_bytes' => '2048-bit modulus (see [SRP 2FA login](https://core.telegram.org/api/srp))',
  'object_securePasswordKdfAlgoUnknown' => 'Unknown KDF algo (most likely the client has to be updated)',
  'object_securePasswordKdfAlgoPBKDF2HMACSHA512iter100000' => 'PBKDF2 with SHA512 and 100000 iterations KDF algo',
  'object_securePasswordKdfAlgoPBKDF2HMACSHA512iter100000_param_salt_type_bytes' => 'Salt',
  'object_securePasswordKdfAlgoSHA512' => 'SHA512 KDF algo',
  'object_securePasswordKdfAlgoSHA512_param_salt_type_bytes' => 'Salt',
  'object_secureSecretSettings' => 'Secure settings',
  'object_secureSecretSettings_param_secure_algo_type_SecurePasswordKdfAlgo' => 'Secure KDF algo',
  'object_secureSecretSettings_param_secure_secret_type_bytes' => 'Secure secret',
  'object_secureSecretSettings_param_secure_secret_id_type_long' => 'Secret ID',
  'object_inputCheckPasswordEmpty' => 'There is no password',
  'object_inputCheckPasswordSRP' => 'Constructor for checking the validity of a 2FA SRP password (see [SRP](https://core.telegram.org/api/srp))',
  'object_inputCheckPasswordSRP_param_srp_id_type_long' => '[SRP ID](https://core.telegram.org/api/srp)',
  'object_inputCheckPasswordSRP_param_A_type_bytes' => '`A` parameter (see [SRP](https://core.telegram.org/api/srp))',
  'object_inputCheckPasswordSRP_param_M1_type_bytes' => '`M1` parameter (see [SRP](https://core.telegram.org/api/srp))',
  'object_secureRequiredType' => 'Required type',
  'object_secureRequiredType_param_native_names_type_true' => 'Native names',
  'object_secureRequiredType_param_selfie_required_type_true' => 'Is a selfie required',
  'object_secureRequiredType_param_translation_required_type_true' => 'Is a translation required',
  'object_secureRequiredType_param_type_type_SecureValueType' => 'Secure value type',
  'object_secureRequiredTypeOneOf' => 'One of',
  'object_secureRequiredTypeOneOf_param_types_type_Vector t' => 'Types',
  'object_help.passportConfigNotModified' => 'Password configuration not modified',
  'object_help.passportConfig' => 'Telegram [passport](https://core.telegram.org/passport) configuration',
  'object_help.passportConfig_param_hash_type_int' => '[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)',
  'object_help.passportConfig_param_countries_langs_type_DataJSON' => 'Localization',
  'object_inputAppEvent_param_data_type_JSONValue' => 'Details of the event',
  'object_jsonObjectValue' => 'JSON key: value pair',
  'object_jsonObjectValue_param_key_type_string' => 'Key',
  'object_jsonObjectValue_param_value_type_JSONValue' => 'Value',
  'object_jsonNull' => 'Null JSON value',
  'object_jsonBool' => 'JSON boolean value',
  'object_jsonBool_param_value_type_Bool' => 'Value',
  'object_jsonNumber' => 'JSON numeric value',
  'object_jsonNumber_param_value_type_double' => 'Value',
  'object_jsonString' => 'JSON string',
  'object_jsonString_param_value_type_string' => 'Value',
  'object_jsonArray' => 'JSON array',
  'object_jsonArray_param_value_type_Vector t' => 'Value',
  'object_jsonObject' => 'JSON object value',
  'object_jsonObject_param_value_type_Vector t' => 'Value',
  'object_pageTableCell' => 'Table cell',
  'object_pageTableCell_param_header_type_true' => 'Is this element part of the column header',
  'object_pageTableCell_param_align_center_type_true' => 'Horizontally centered block',
  'object_pageTableCell_param_align_right_type_true' => 'Right-aligned block',
  'object_pageTableCell_param_valign_middle_type_true' => 'Vertically centered block',
  'object_pageTableCell_param_valign_bottom_type_true' => 'Block vertically-alligned to the bottom',
  'object_pageTableCell_param_text_type_RichText' => 'Content',
  'object_pageTableCell_param_colspan_type_int' => 'For how many columns should this cell extend',
  'object_pageTableCell_param_rowspan_type_int' => 'For how many rows should this cell extend',
  'object_pageTableRow' => 'Table row',
  'object_pageTableRow_param_cells_type_Vector t' => 'Cells',
  'object_pageCaption' => 'Page caption',
  'object_pageCaption_param_text_type_RichText' => 'Caption',
  'object_pageCaption_param_credit_type_RichText' => 'Credits',
  'object_pageListItemText' => 'List item',
  'object_pageListItemText_param_text_type_RichText' => 'Text',
  'object_pageListItemBlocks' => 'List item',
  'object_pageListItemBlocks_param_blocks_type_Vector t' => 'Blocks',
  'object_pageListOrderedItemText' => 'Ordered list of text items',
  'object_pageListOrderedItemText_param_num_type_string' => 'Number of element within ordered list',
  'object_pageListOrderedItemText_param_text_type_RichText' => 'Text',
  'object_pageListOrderedItemBlocks' => 'Ordered list of [IV](https://instantview.telegram.org) blocks',
  'object_pageListOrderedItemBlocks_param_num_type_string' => 'Number of element within ordered list',
  'object_pageListOrderedItemBlocks_param_blocks_type_Vector t' => 'Blocks',
  'object_pageRelatedArticle' => 'Related article',
  'object_pageRelatedArticle_param_url_type_string' => 'URL of article',
  'object_pageRelatedArticle_param_webpage_id_type_long' => 'Webpage ID of generated IV preview',
  'object_pageRelatedArticle_param_title_type_string' => 'Title',
  'object_pageRelatedArticle_param_description_type_string' => 'Description',
  'object_pageRelatedArticle_param_photo_id_type_long' => 'ID of preview photo',
  'object_pageRelatedArticle_param_author_type_string' => 'Author name',
  'object_pageRelatedArticle_param_published_date_type_int' => 'Date of pubblication',
  'object_page' => '[Instant view](https://instantview.telegram.org) page',
  'object_page_param_part_type_true' => 'Indicates that not full page preview is available to the client and it will need to fetch full Instant View from the server using [messages.getWebPagePreview](../methods/messages.getWebPagePreview.md).',
  'object_page_param_rtl_type_true' => 'Whether the page contains RTL text',
  'object_page_param_v2_type_true' => 'Whether this is an [IV v2](https://instantview.telegram.org/docs#what-39s-new-in-2-0) page',
  'object_page_param_url_type_string' => 'Original page HTTP URL',
  'object_page_param_blocks_type_Vector t' => 'Blocks',
  'object_page_param_photos_type_Vector t' => 'Photos',
  'object_page_param_documents_type_Vector t' => 'Documents',
  'object_help.supportName' => 'Localized name for telegram support',
  'object_help.supportName_param_name_type_string' => 'Localized name',
  'object_help.userInfoEmpty' => 'Internal use',
  'object_help.userInfo' => 'Internal use',
  'object_help.userInfo_param_message_type_string' => 'Info',
  'object_help.userInfo_param_entities_type_Vector t' => 'Entities',
  'object_help.userInfo_param_author_type_string' => 'Author',
  'object_help.userInfo_param_date_type_int' => 'Date',
  'object_pollAnswer' => 'A possible answer of a poll',
  'object_pollAnswer_param_text_type_string' => 'Textual representation of the answer',
  'object_pollAnswer_param_option_type_bytes' => 'The param that has to be passed to [messages.sendVote](../methods/messages.sendVote.md).',
  'object_poll' => 'Poll',
  'object_poll_param_id_type_long' => 'ID of the poll',
  'object_poll_param_closed_type_true' => 'Whether the poll is closed and doesn\'t accept any more answers',
  'object_poll_param_question_type_string' => 'The question of the poll',
  'object_poll_param_answers_type_Vector t' => 'Answers',
  'object_pollAnswerVoters' => 'A poll answer, and how users voted on it',
  'object_pollAnswerVoters_param_chosen_type_true' => 'Whether we have chosen this answer',
  'object_pollAnswerVoters_param_option_type_bytes' => 'The param that has to be passed to [messages.sendVote](../methods/messages.sendVote.md).',
  'object_pollAnswerVoters_param_voters_type_int' => 'How many users voted for this option',
  'object_pollResults' => 'Results of poll',
  'object_pollResults_param_min_type_true' => 'Similar to [min](https://core.telegram.org/api/min) objects, used for poll constructors that are the same for all users so they don\'t have option chosen by the current user (you can use [messages.getPollResults](../methods/messages.getPollResults.md) to get the full poll results).',
  'object_pollResults_param_results_type_Vector t' => 'Results',
  'object_pollResults_param_total_voters_type_int' => 'Total number of people that voted in the poll',
  'object_chatOnlines' => 'Number of online users in a chat',
  'object_chatOnlines_param_onlines_type_int' => 'Number of online users',
  'object_statsURL' => 'URL with chat statistics',
  'object_statsURL_param_url_type_string' => 'Chat statistics',
  'method_auth.sendCode_param_settings_type_CodeSettings' => 'You cannot use this method directly, use the phoneLogin method instead (see https://docs.madelineproto.xyz for more info)',
  'method_account.getWallPapers_param_hash_type_Vector t' => 'IDs of previously fetched wallpapers',
  'method_account.sendChangePhoneCode_param_settings_type_CodeSettings' => 'Phone code settings',
  'method_account.sendConfirmPhoneCode_param_settings_type_CodeSettings' => 'Phone code settings',
  'method_account.sendVerifyPhoneCode_param_settings_type_CodeSettings' => 'Phone code settings',
  'method_account.getWallPaper' => 'Get info about a certain wallpaper',
  'method_account.getWallPaper_param_wallpaper_type_InputWallPaper' => 'The wallpaper to get info about',
  'method_account.uploadWallPaper' => 'Create and upload a new wallpaper',
  'method_account.uploadWallPaper_param_file_type_InputFile' => 'The JPG/PNG wallpaper',
  'method_account.uploadWallPaper_param_mime_type_type_string' => 'MIME type of uploaded wallpaper',
  'method_account.uploadWallPaper_param_settings_type_WallPaperSettings' => 'Wallpaper settings',
  'method_account.saveWallPaper' => 'Install/uninstall wallpaper',
  'method_account.saveWallPaper_param_wallpaper_type_InputWallPaper' => 'Wallpaper to save',
  'method_account.saveWallPaper_param_unsave_type_Bool' => 'Uninstall wallpaper?',
  'method_account.saveWallPaper_param_settings_type_WallPaperSettings' => 'Wallpaper settings',
  'method_account.installWallPaper' => 'Install wallpaper',
  'method_account.installWallPaper_param_wallpaper_type_InputWallPaper' => 'Wallpaper to install',
  'method_account.installWallPaper_param_settings_type_WallPaperSettings' => 'Wallpaper settings',
  'method_account.resetWallPapers' => 'Delete installed wallpapers',
  'method_messages.exportChatInvite_param_peer_type_InputPeer' => 'Chat',
  'method_messages.editChatAbout' => 'Edit the description of a [group/supergroup/channel](https://core.telegram.org/api/channel).',
  'method_messages.editChatAbout_param_peer_type_InputPeer' => 'The [group/supergroup/channel](https://core.telegram.org/api/channel).',
  'method_messages.editChatAbout_param_about_type_string' => 'The new description',
  'method_messages.editChatDefaultBannedRights' => 'Edit the default banned rights of a [channel/supergroup/group](https://core.telegram.org/api/channel).',
  'method_messages.editChatDefaultBannedRights_param_peer_type_InputPeer' => 'The peer',
  'method_messages.editChatDefaultBannedRights_param_banned_rights_type_ChatBannedRights' => 'The new global rights',
  'method_channels.editAdmin_param_admin_rights_type_ChatAdminRights' => 'The admin rights',
  'method_channels.editBanned_param_banned_rights_type_ChatBannedRights' => 'The banned rights',
  'object_chat_param_admin_rights_type_ChatAdminRights' => '[Admin rights](https://core.telegram.org/api/rights) of the user in the group',
  'object_chat_param_default_banned_rights_type_ChatBannedRights' => '[Default banned rights](https://core.telegram.org/api/rights) of all users in the group',
  'object_channel_param_admin_rights_type_ChatAdminRights' => 'Admin rights of the user in this channel (see [rights](https://core.telegram.org/api/rights))',
  'object_channel_param_banned_rights_type_ChatBannedRights' => 'Banned rights of the user in this channel (see [rights](https://core.telegram.org/api/rights))',
  'object_channel_param_default_banned_rights_type_ChatBannedRights' => 'Default chat rights (see [rights](https://core.telegram.org/api/rights))',
  'object_chatFull_param_can_set_username_type_true' => 'Can we change the username of this chat',
  'object_chatFull_param_about_type_string' => 'About string for this chat',
  'object_photoStrippedSize' => 'Just the image\'s content',
  'object_photoStrippedSize_param_type_type_string' => 'Thumbnail type',
  'object_photoStrippedSize_param_bytes_type_bytes' => 'Thumbnail data',
  'object_wallPaper_param_id_type_long' => 'Identifier',
  'object_wallPaper_param_creator_type_true' => 'Creator of the wallpaper',
  'object_wallPaper_param_default_type_true' => 'Whether this is the default wallpaper',
  'object_wallPaper_param_pattern_type_true' => 'Pattern',
  'object_wallPaper_param_dark_type_true' => 'Dark mode',
  'object_wallPaper_param_access_hash_type_long' => 'Access hash',
  'object_wallPaper_param_slug_type_string' => 'Unique wallpaper ID',
  'object_wallPaper_param_document_type_Document' => 'The actual wallpaper',
  'object_wallPaper_param_settings_type_WallPaperSettings' => 'Wallpaper settings',
  'object_messages.messagesSlice_param_inexact_type_true' => 'If set, indicates that the results may be inexact',
  'object_updateChatDefaultBannedRights' => 'Default banned rights in a [normal chat](https://core.telegram.org/api/channel) were updated',
  'object_updateChatDefaultBannedRights_param_peer_type_Peer' => 'The chat',
  'object_updateChatDefaultBannedRights_param_default_banned_rights_type_ChatBannedRights' => 'New default banned rights',
  'object_updateChatDefaultBannedRights_param_version_type_int' => 'Version',
  'object_document_param_thumbs_type_Vector t' => 'Thumbnails',
  'object_channelParticipantAdmin_param_self_type_true' => 'Is this the current user',
  'object_channelParticipantAdmin_param_admin_rights_type_ChatAdminRights' => 'Admin [rights](https://core.telegram.org/api/rights)',
  'object_channelParticipantBanned_param_banned_rights_type_ChatBannedRights' => 'Banned [rights](https://core.telegram.org/api/rights)',
  'object_channelParticipantsContacts' => 'Fetch only participants that are also contacts',
  'object_channelParticipantsContacts_param_q_type_string' => 'Optional search query for searching contact participants by name',
  'object_channelAdminLogEventActionDefaultBannedRights' => 'The default banned rights were modified',
  'object_channelAdminLogEventActionDefaultBannedRights_param_prev_banned_rights_type_ChatBannedRights' => 'Previous global [banned rights](https://core.telegram.org/api/rights)',
  'object_channelAdminLogEventActionDefaultBannedRights_param_new_banned_rights_type_ChatBannedRights' => 'New glboal [banned rights](https://core.telegram.org/api/rights).',
  'object_channelAdminLogEventActionStopPoll' => 'A poll was stopped',
  'object_channelAdminLogEventActionStopPoll_param_message_type_Message' => 'The poll that was stopped',
  'object_chatAdminRights' => 'Represents the rights of an admin in a [channel/supergroup](https://core.telegram.org/api/channel).',
  'object_chatAdminRights_param_change_info_type_true' => 'If set, allows the admin to modify the description of the [channel/supergroup](https://core.telegram.org/api/channel)',
  'object_chatAdminRights_param_post_messages_type_true' => 'If set, allows the admin to post messages in the [channel](https://core.telegram.org/api/channel)',
  'object_chatAdminRights_param_edit_messages_type_true' => 'If set, allows the admin to also edit messages from other admins in the [channel](https://core.telegram.org/api/channel)',
  'object_chatAdminRights_param_delete_messages_type_true' => 'If set, allows the admin to also delete messages from other admins in the [channel](https://core.telegram.org/api/channel)',
  'object_chatAdminRights_param_ban_users_type_true' => 'If set, allows the admin to ban users from the [channel/supergroup](https://core.telegram.org/api/channel)',
  'object_chatAdminRights_param_invite_users_type_true' => 'If set, allows the admin to invite users in the [channel/supergroup](https://core.telegram.org/api/channel)',
  'object_chatAdminRights_param_pin_messages_type_true' => 'If set, allows the admin to pin messages in the [channel/supergroup](https://core.telegram.org/api/channel)',
  'object_chatAdminRights_param_add_admins_type_true' => 'If set, allows the admin to add other admins with the same (or more limited) permissions in the [channel/supergroup](https://core.telegram.org/api/channel)',
  'object_chatBannedRights' => 'Represents the rights of a normal user in a [supergroup/channel/chat](https://core.telegram.org/api/channel). In this case, the flags are inverted: if set, a flag **does not allow** a user to do X.',
  'object_chatBannedRights_param_view_messages_type_true' => 'If set, does not allow a user to view messages in a [supergroup/channel/chat](https://core.telegram.org/api/channel)',
  'object_chatBannedRights_param_sendMessages_type_true' => 'Can send messages?',
  'object_chatBannedRights_param_send_media_type_true' => 'If set, does not allow a user to send any media in a [supergroup/chat](https://core.telegram.org/api/channel)',
  'object_chatBannedRights_param_send_stickers_type_true' => 'If set, does not allow a user to send stickers in a [supergroup/chat](https://core.telegram.org/api/channel)',
  'object_chatBannedRights_param_send_gifs_type_true' => 'If set, does not allow a user to send gifs in a [supergroup/chat](https://core.telegram.org/api/channel)',
  'object_chatBannedRights_param_send_games_type_true' => 'If set, does not allow a user to send games in a [supergroup/chat](https://core.telegram.org/api/channel)',
  'object_chatBannedRights_param_send_inline_type_true' => 'If set, does not allow a user to use inline bots in a [supergroup/chat](https://core.telegram.org/api/channel)',
  'object_chatBannedRights_param_embed_links_type_true' => 'If set, does not allow a user to embed links in the messages of a [supergroup/chat](https://core.telegram.org/api/channel)',
  'object_chatBannedRights_param_send_polls_type_true' => 'If set, does not allow a user to send stickers in a [supergroup/chat](https://core.telegram.org/api/channel)',
  'object_chatBannedRights_param_change_info_type_true' => 'If set, does not allow any user to change the description of a [supergroup/chat](https://core.telegram.org/api/channel)',
  'object_chatBannedRights_param_invite_users_type_true' => 'If set, does not allow any user to invite users in a [supergroup/chat](https://core.telegram.org/api/channel)',
  'object_chatBannedRights_param_pin_messages_type_true' => 'If set, does not allow any user to pin messages in a [supergroup/chat](https://core.telegram.org/api/channel)',
  'object_chatBannedRights_param_until_date_type_int' => 'Validity of said permissions (0 = forever, forever = 2^31-1 for now).',
  'object_inputWallPaper' => 'Wallpaper',
  'object_inputWallPaper_param_id_type_long' => 'Wallpaper ID',
  'object_inputWallPaper_param_access_hash_type_long' => 'Access hash',
  'object_inputWallPaperSlug' => 'Wallpaper by slug (a unique ID)',
  'object_inputWallPaperSlug_param_slug_type_string' => 'Unique wallpaper ID',
  'object_account.wallPapersNotModified' => 'No new wallpapers were found',
  'object_account.wallPapers' => 'Installed wallpapers',
  'object_account.wallPapers_param_hash_type_int' => '[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)',
  'object_account.wallPapers_param_wallpapers_type_Vector t' => 'Wallpapers',
  'object_codeSettings' => 'Settings used by telegram servers for sending the confirm code.

Example implementations: [telegram for android](https://github.com/DrKLO/Telegram/blob/master/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java), [tdlib](https://github.com/tdlib/td/tree/master/td/telegram/SendCodeHelper.cpp).',
  'object_codeSettings_param_allow_flashcall_type_true' => 'Whether to allow phone verification via [phone calls](https://core.telegram.org/api/auth).',
  'object_codeSettings_param_current_number_type_true' => 'Pass true if the phone number is used on the current device. Ignored if allow\\_flashcall is not set.',
  'object_codeSettings_param_app_hash_persistent_type_true' => 'Persistent hash?',
  'object_codeSettings_param_app_hash_type_string' => 'Hash type',
  'object_wallPaperSettings' => 'Wallpaper settings',
  'object_wallPaperSettings_param_blur_type_true' => 'If set, the wallpaper must be downscaled to fit in 450x450 square and then box-blurred with radius 12',
  'object_wallPaperSettings_param_motion_type_true' => 'If set, the background needs to be slightly moved when device is rotated',
  'object_wallPaperSettings_param_background_color_type_int' => 'If set, a PNG pattern is to be combined with the `color` chosen by the user: the main color of the background in RGB24 format',
  'object_wallPaperSettings_param_intensity_type_int' => 'Intensity of the pattern when it is shown above the main background color, 0-100',
  'object_inputPrivacyKeyProfilePhoto' => 'Whether people will be able to see the user\'s profile picture',
  'object_inputPrivacyKeyForwards' => 'Whether messages forwarded from this user will be [anonymous](https://telegram.org/blog/unsend-privacy-emoji#anonymous-forwarding)',
  'method_account.getAutoDownloadSettings' => 'Get media autodownload settings',
  'method_account.saveAutoDownloadSettings' => 'Change media autodownload settings',
  'method_account.saveAutoDownloadSettings_param_low_type_true' => 'Whether to save settings in the low data usage preset',
  'method_account.saveAutoDownloadSettings_param_high_type_true' => 'Whether to save settings in the high data usage preset',
  'method_account.saveAutoDownloadSettings_param_settings_type_AutoDownloadSettings' => 'Media autodownload settings',
  'method_messages.deleteHistory_param_revoke_type_true' => 'Whether to delete the message history for all chat participants',
  'method_messages.getStatsURL_param_dark_type_true' => 'Pass true if a URL with the dark theme must be returned',
  'method_messages.getStatsURL_param_params_type_string' => 'Parameters from `tg://statsrefresh?params=******` link',
  'method_messages.getEmojiKeywords' => 'Get localized emoji keywords',
  'method_messages.getEmojiKeywords_param_lang_code_type_string' => 'Language code',
  'method_messages.getEmojiKeywordsDifference' => 'Get changed emoji keywords',
  'method_messages.getEmojiKeywordsDifference_param_lang_code_type_string' => 'Language code',
  'method_messages.getEmojiKeywordsDifference_param_from_version_type_int' => 'Previous emoji keyword localization version',
  'method_messages.getEmojiURL' => 'Returns an HTTP URL which can be used to automatically log in into translation platform and suggest new emoji replacements. The URL will be valid for 30 seconds after generation',
  'method_messages.getEmojiURL_param_lang_code_type_string' => 'Language code for which the emoji replacements will be suggested',
  'method_phone.setCallRating_param_user_initiative_type_true' => 'Whether the user decided on their own initiative to rate the call',
  'method_langpack.getDifference_param_lang_pack_type_string' => 'Language pack',
  'object_user_param_support_type_true' => 'Whether this is an official support user',
  'object_updateChatPinnedMessage_param_version_type_int' => 'Used to reorder updates in legacy groups',
  'object_privacyKeyForwards' => 'Whether messages forwarded from the user will be [anonymously forwarded](https://telegram.org/blog/unsend-privacy-emoji#anonymous-forwarding)',
  'object_privacyKeyProfilePhoto' => 'Whether the profile picture of the user is visible',
  'object_stickerSet_param_thumb_type_PhotoSize' => 'Thumbnail for stickerset',
  'object_messageFwdHeader_param_from_name_type_string' => 'The name of the user that originally sent the message',
  'object_autoDownloadSettings' => 'Autodownload settings',
  'object_autoDownloadSettings_param_disabled_type_true' => 'Disable automatic media downloads?',
  'object_autoDownloadSettings_param_video_preload_large_type_true' => 'Whether to preload the first seconds of videos larger than the specified limit',
  'object_autoDownloadSettings_param_audio_preload_next_type_true' => 'Whether to preload the next audio track when you\'re listening to music',
  'object_autoDownloadSettings_param_phonecalls_less_data_type_true' => 'Whether to enable data saving mode in phone calls',
  'object_autoDownloadSettings_param_photo_size_max_type_int' => 'Maximum size of photos to preload',
  'object_autoDownloadSettings_param_video_size_max_type_int' => 'Maximum size of videos to preload',
  'object_autoDownloadSettings_param_file_size_max_type_int' => 'Maximum size of other files to preload',
  'object_account.autoDownloadSettings' => 'Media autodownload settings',
  'object_account.autoDownloadSettings_param_low_type_AutoDownloadSettings' => 'Low data usage preset',
  'object_account.autoDownloadSettings_param_medium_type_AutoDownloadSettings' => 'Medium data usage preset',
  'object_account.autoDownloadSettings_param_high_type_AutoDownloadSettings' => 'High data usage preset',
  'object_emojiKeyword' => 'Emoji keyword',
  'object_emojiKeyword_param_keyword_type_string' => 'Keyword',
  'object_emojiKeyword_param_emoticons_type_Vector t' => 'Emoticons',
  'object_emojiKeywordDeleted' => 'Deleted emoji keyword',
  'object_emojiKeywordDeleted_param_keyword_type_string' => 'Keyword',
  'object_emojiKeywordDeleted_param_emoticons_type_Vector t' => 'Emoticons',
  'object_emojiKeywordsDifference' => 'Changes to emoji keywords',
  'object_emojiKeywordsDifference_param_lang_code_type_string' => 'Language code for keywords',
  'object_emojiKeywordsDifference_param_from_version_type_int' => 'Previous emoji keyword list version',
  'object_emojiKeywordsDifference_param_version_type_int' => 'Current version of emoji keyword list',
  'object_emojiKeywordsDifference_param_keywords_type_Vector t' => 'Keywords',
  'object_emojiURL' => 'An HTTP URL which can be used to automatically log in into translation platform and suggest new emoji replacements. The URL will be valid for 30 seconds after generation',
  'object_emojiURL_param_url_type_string' => 'An HTTP URL which can be used to automatically log in into translation platform and suggest new emoji replacements. The URL will be valid for 30 seconds after generation',
  'method_contacts.getTopPeers_param_forward_users_type_true' => 'Users to which the users often forwards messages to',
  'method_contacts.getTopPeers_param_forward_chats_type_true' => 'Chats to which the users often forwards messages to',
  'method_messages.getDialogs_param_folder_id_type_int' => 'Folder ID',
  'method_messages.searchGlobal_param_offset_rate_type_int' => 'Initially 0, then set to the [`next_rate` parameter of messages.messagesSlice](../constructors/messages.messagesSlice.md)',
  'method_messages.reorderPinnedDialogs_param_folder_id_type_int' => 'Folder ID',
  'method_messages.getPinnedDialogs_param_folder_id_type_int' => 'Folder ID',
  'method_messages.getEmojiKeywordsLanguages' => 'Get info about an emoji keyword localization',
  'method_messages.getEmojiKeywordsLanguages_param_lang_codes_type_Vector t' => 'Language codes',
  'method_messages.getSearchCounters' => 'Get the number of results that would be found by a [messages.search](../methods/messages.search.md) call with the same parameters',
  'method_messages.getSearchCounters_param_peer_type_InputPeer' => 'Peer where to search',
  'method_messages.getSearchCounters_param_filters_type_Vector t' => 'Filters',
  'method_messages.requestUrlAuth' => 'Get more info about a Seamless Telegram Login authorization request, for more info [click here »](https://core.telegram.org/api/url-authorization)',
  'method_messages.requestUrlAuth_param_peer_type_InputPeer' => 'Peer where the message is located',
  'method_messages.requestUrlAuth_param_msg_id_type_int' => 'The message',
  'method_messages.requestUrlAuth_param_button_id_type_int' => 'The ID of the button with the authorization request',
  'method_messages.acceptUrlAuth' => 'Use this to accept a Seamless Telegram Login authorization request, for more info [click here »](https://core.telegram.org/api/url-authorization)',
  'method_messages.acceptUrlAuth_param_write_allowed_type_true' => 'Set this flag to allow the bot to send messages to you (if requested)',
  'method_messages.acceptUrlAuth_param_peer_type_InputPeer' => 'The location of the message',
  'method_messages.acceptUrlAuth_param_msg_id_type_int' => 'Message ID of the message with the login button',
  'method_messages.acceptUrlAuth_param_button_id_type_int' => 'ID of the login button',
  'method_channels.getGroupsForDiscussion' => 'Get all groups that can be used as [discussion groups](https://telegram.org/blog/privacy-discussions-web-bots)',
  'method_channels.getBroadcastsForDiscussion' => 'Get channels for discussion',
  'method_channels.setDiscussionGroup' => 'Associate a group to a channel as [discussion group](https://telegram.org/blog/privacy-discussions-web-bots) for that channel',
  'method_channels.setDiscussionGroup_param_broadcast_type_InputChannel' => 'Channel',
  'method_channels.setDiscussionGroup_param_group_type_InputChannel' => 'Discussion group to associate to the channel',
  'method_phone.requestCall_param_video_type_true' => 'You cannot use this method directly, see https://docs.madelineproto.xyz#calls for more info on handling calls',
  'method_phone.discardCall_param_video_type_true' => 'You cannot use this method directly, see https://docs.madelineproto.xyz#calls for more info on handling calls',
  'method_folders.editPeerFolders' => 'Edit peers in folder',
  'method_folders.editPeerFolders_param_folder_peers_type_Vector t' => 'New folder peers',
  'method_folders.deleteFolder' => 'Delete a folder',
  'method_folders.deleteFolder_param_folder_id_type_int' => 'Folder to delete',
  'object_inputPeerUserFromMessage' => 'Defines a [min](https://core.telegram.org/api/min) user that was seen in a certain message of a certain chat.',
  'object_inputPeerUserFromMessage_param_peer_type_InputPeer' => 'The chat where the user was seen',
  'object_inputPeerUserFromMessage_param_msg_id_type_int' => 'The message ID',
  'object_inputPeerUserFromMessage_param_user_id_type_int' => 'The identifier of the user that was seen',
  'object_inputPeerChannelFromMessage' => 'Defines a [min](https://core.telegram.org/api/min) channel that was seen in a certain message of a certain chat.',
  'object_inputPeerChannelFromMessage_param_peer_type_InputPeer' => 'The chat where the channel\'s message was seen',
  'object_inputPeerChannelFromMessage_param_msg_id_type_int' => 'The message ID',
  'object_inputPeerChannelFromMessage_param_channel_id_type_int' => 'The identifier of the channel that was seen',
  'object_inputUserFromMessage' => 'Defines a [min](https://core.telegram.org/api/min) user that was seen in a certain message of a certain chat.',
  'object_inputUserFromMessage_param_peer_type_InputPeer' => 'The chat where the user was seen',
  'object_inputUserFromMessage_param_msg_id_type_int' => 'The message ID',
  'object_inputUserFromMessage_param_user_id_type_int' => 'The identifier of the user that was seen',
  'object_inputDocumentFileLocation_param_thumb_size_type_string' => 'Thumbnail size to download the thumbnail',
  'object_inputPhotoFileLocation' => 'Use this object to download a photo with [upload.getFile](../methods/upload.getFile.md) method',
  'object_inputPhotoFileLocation_param_id_type_long' => 'Photo ID, obtained from the [photo](../constructors/photo.md) object',
  'object_inputPhotoFileLocation_param_access_hash_type_long' => 'Photo\'s access hash, obtained from the [photo](../constructors/photo.md) object',
  'object_inputPhotoFileLocation_param_file_reference_type_bytes' => '[File reference](https://core.telegram.org/api/file_reference)',
  'object_inputPhotoFileLocation_param_thumb_size_type_string' => 'The [PhotoSize](../types/PhotoSize.md) to download: must be set to the `type` field of the desired PhotoSize object of the [photo](../constructors/photo.md)',
  'object_inputPeerPhotoFileLocation' => 'Location of profile photo of channel/group/supergroup/user',
  'object_inputPeerPhotoFileLocation_param_big_type_true' => 'Whether to download the high-quality version of the picture',
  'object_inputPeerPhotoFileLocation_param_peer_type_InputPeer' => 'The peer whose profile picture should be downloaded',
  'object_inputPeerPhotoFileLocation_param_volume_id_type_long' => 'Volume ID from [FileLocation](../types/FileLocation.md) met in the profile photo container.',
  'object_inputPeerPhotoFileLocation_param_local_id_type_int' => 'Local ID from [FileLocation](../types/FileLocation.md) met in the profile photo container.',
  'object_inputStickerSetThumb' => 'Location of stickerset thumbnail (see [files](https://core.telegram.org/api/files))',
  'object_inputStickerSetThumb_param_stickerset_type_InputStickerSet' => 'Sticker set',
  'object_inputStickerSetThumb_param_volume_id_type_long' => 'Volume ID',
  'object_inputStickerSetThumb_param_local_id_type_int' => 'Local ID',
  'object_user_param_scam_type_true' => 'This may be a scam user',
  'object_userProfilePhoto_param_dc_id_type_int' => 'DC ID where the photo is stored',
  'object_channel_param_scam_type_true' => 'This channel/supergroup is probably a scam',
  'object_channel_param_has_link_type_true' => 'Whether this channel has a private join link',
  'object_chatFull_param_folder_id_type_int' => 'Folder ID',
  'object_channelFull_param_folder_id_type_int' => 'Folder ID',
  'object_channelFull_param_linked_chat_id_type_int' => 'ID of the linked discussion chat for channels',
  'object_channelFull_param_pts_type_int' => 'Latest [PTS](https://core.telegram.org/api/updates) for this channel',
  'object_chatPhoto_param_dc_id_type_int' => 'DC where this photo is stored',
  'object_message_param_legacy_type_true' => 'This is a legacy message: it has to be refetched with the new layer',
  'object_messageService_param_legacy_type_true' => 'This is a legacy message: it has to be refetched with the new layer',
  'object_messageActionPhoneCall_param_video_type_true' => 'Is this a video call?',
  'object_dialog_param_folder_id_type_int' => 'Folder ID',
  'object_dialogFolder' => 'Dialog in folder',
  'object_dialogFolder_param_pinned_type_true' => 'Is this folder pinned',
  'object_dialogFolder_param_folder_type_Folder' => 'The folder',
  'object_dialogFolder_param_peer_type_Peer' => 'Peer in folder',
  'object_dialogFolder_param_top_message_type_int' => 'Latest message ID of dialog',
  'object_dialogFolder_param_unread_muted_peers_count_type_int' => 'Number of unread muted peers in folder',
  'object_dialogFolder_param_unread_unmuted_peers_count_type_int' => 'Number of unread unmuted peers in folder',
  'object_dialogFolder_param_unread_muted_messages_count_type_int' => 'Number of unread messages from muted peers in folder',
  'object_dialogFolder_param_unread_unmuted_messages_count_type_int' => 'Number of unread messages from unmuted peers in folder',
  'object_photo_param_dc_id_type_int' => 'DC ID to use for download',
  'object_userFull_param_folder_id_type_int' => 'Folder ID',
  'object_messages.messagesSlice_param_next_rate_type_int' => 'Rate to use in the `offset_rate` parameter in the next call to [messages.searchGlobal](../methods/messages.searchGlobal.md)',
  'object_updateReadHistoryInbox_param_folder_id_type_int' => 'Folder ID',
  'object_updateReadHistoryInbox_param_still_unread_count_type_int' => 'Number of messages that are still unread',
  'object_updateReadChannelInbox_param_folder_id_type_int' => 'ID of folder for peers in folders',
  'object_updateReadChannelInbox_param_still_unread_count_type_int' => 'Count of messages weren\'t read yet',
  'object_updateReadChannelInbox_param_pts_type_int' => '[Event count after generation](https://core.telegram.org/api/updates)',
  'object_updateDialogPinned_param_folder_id_type_int' => 'If the dialog is in a folder, the folder ID',
  'object_updatePinnedDialogs_param_folder_id_type_int' => 'If the dialogs are in a folder, the folder ID',
  'object_updateFolderPeers' => 'The dialog list of a folder was changed',
  'object_updateFolderPeers_param_folder_peers_type_Vector t' => 'New folder peers',
  'object_updateFolderPeers_param_pts_type_int' => '[Event count after generation](https://core.telegram.org/api/updates)',
  'object_updateFolderPeers_param_pts_count_type_int' => '[Number of events that were generated](https://core.telegram.org/api/updates)',
  'object_config_param_pinned_infolder_count_max_type_int' => 'Maximum count of dialogs per folder',
  'object_inputPrivacyKeyPhoneNumber' => 'Whether people will be able to see the user\'s phone number',
  'object_privacyKeyPhoneNumber' => 'Whether the user allows us to see his phone number',
  'object_inputPrivacyValueAllowChatParticipants' => 'Allow only participants of certain chats',
  'object_inputPrivacyValueAllowChatParticipants_param_chats_type_Vector t' => 'Chats',
  'object_inputPrivacyValueDisallowChatParticipants' => 'Disallow only participants of certain chats',
  'object_inputPrivacyValueDisallowChatParticipants_param_chats_type_Vector t' => 'CHats',
  'object_privacyValueAllowChatParticipants' => 'Allow all participants of certain chats',
  'object_privacyValueAllowChatParticipants_param_chats_type_Vector t' => 'Allowed chats',
  'object_privacyValueDisallowChatParticipants' => 'Disallow only participants of certain chats',
  'object_privacyValueDisallowChatParticipants_param_chats_type_Vector t' => 'Disallowed chats',
  'object_account.privacyRules_param_chats_type_Vector t' => 'Chats allowed?',
  'object_chatInvite_param_photo_type_Photo' => 'Chat/supergroup/channel photo',
  'object_stickerSet_param_thumb_dc_id_type_int' => 'DC ID of thumbnail',
  'object_keyboardButtonUrlAuth' => 'Button to request a user to authorize via URL using [Seamless Telegram Login](https://telegram.org/blog/privacy-discussions-web-bots#meet-seamless-web-bots). When the user clicks on such a button, [messages.requestUrlAuth](../methods/messages.requestUrlAuth.md) should be called, providing the `button_id` and the ID of the container message. The returned [urlAuthResultRequest](../constructors/urlAuthResultRequest.md) object will contain more details about the authorization request (`request_write_access` if the bot would like to send messages to the user along with the username of the bot which will be used for user authorization). Finally, the user can choose to call [messages.acceptUrlAuth](../methods/messages.acceptUrlAuth.md) to get a [urlAuthResultAccepted](../constructors/urlAuthResultAccepted.md) with the URL to open instead of the `url` of this constructor, or a [urlAuthResultDefault](../constructors/urlAuthResultDefault.md), in which case the `url` of this constructor must be opened, instead. If the user refuses the authorization request but still wants to open the link, the `url` of this constructor must be used.',
  'object_keyboardButtonUrlAuth_param_text_type_string' => 'Button label',
  'object_keyboardButtonUrlAuth_param_fwd_text_type_string' => 'New text of the button in forwarded messages.',
  'object_keyboardButtonUrlAuth_param_url_type_string' => 'An HTTP URL to be opened with user authorization data added to the query string when the button is pressed. If the user refuses to provide authorization data, the original URL without information about the user will be opened. The data added is the same as described in [Receiving authorization data](https://core.telegram.org/widgets/login#receiving-authorization-data).<br><br>**NOTE**: Services must **always** check the hash of the received data to verify the authentication and the integrity of the data as described in [Checking authorization](https://core.telegram.org/widgets/login#checking-authorization).',
  'object_keyboardButtonUrlAuth_param_button_id_type_int' => 'ID of the button to pass to [messages.requestUrlAuth](../methods/messages.requestUrlAuth.md)',
  'object_inputKeyboardButtonUrlAuth' => 'Button to request a user to [authorize](../methods/messages.acceptUrlAuth.md) via URL using [Seamless Telegram Login](https://telegram.org/blog/privacy-discussions-web-bots#meet-seamless-web-bots).',
  'object_inputKeyboardButtonUrlAuth_param_request_write_access_type_true' => 'Set this flag to request the permission for your bot to send messages to the user.',
  'object_inputKeyboardButtonUrlAuth_param_text_type_string' => 'Button text',
  'object_inputKeyboardButtonUrlAuth_param_fwd_text_type_string' => 'New text of the button in forwarded messages.',
  'object_inputKeyboardButtonUrlAuth_param_url_type_string' => 'An HTTP URL to be opened with user authorization data added to the query string when the button is pressed. If the user refuses to provide authorization data, the original URL without information about the user will be opened. The data added is the same as described in [Receiving authorization data](https://core.telegram.org/widgets/login#receiving-authorization-data).<br>NOTE: You must always check the hash of the received data to verify the authentication and the integrity of the data as described in [Checking authorization](https://core.telegram.org/widgets/login#checking-authorization).',
  'object_inputKeyboardButtonUrlAuth_param_bot_type_InputUser' => 'Username of a bot, which will be used for user authorization. See [Setting up a bot](https://core.telegram.org/widgets/login#setting-up-a-bot) for more details. If not specified, the current bot\'s username will be assumed. The url\'s domain must be the same as the domain linked with the bot. See [Linking your domain to the bot](https://core.telegram.org/widgets/login#linking-your-domain-to-the-bot) for more details.',
  'object_inputChannelFromMessage' => 'Defines a [min](https://core.telegram.org/api/min) channel that was seen in a certain message of a certain chat.',
  'object_inputChannelFromMessage_param_peer_type_InputPeer' => 'The chat where the channel was seen',
  'object_inputChannelFromMessage_param_msg_id_type_int' => 'The message ID in the chat where the channel was seen',
  'object_inputChannelFromMessage_param_channel_id_type_int' => 'The channel ID',
  'object_updates.channelDifferenceTooLong_param_dialog_type_Dialog' => 'Dialog containing the latest [PTS](https://core.telegram.org/api/updates) that can be used to reset the channel state',
  'object_topPeerCategoryForwardUsers' => 'Users to which the users often forwards messages to',
  'object_topPeerCategoryForwardChats' => 'Chats to which the users often forwards messages to',
  'object_phoneCallWaiting_param_video_type_true' => 'Is this a video call',
  'object_phoneCallRequested_param_video_type_true' => 'Whether this is a video call',
  'object_phoneCallAccepted_param_video_type_true' => 'Whether this is a video call',
  'object_phoneCall_param_connections_type_Vector t' => 'Phone connections',
  'object_phoneCallDiscarded_param_video_type_true' => 'Whether the call was a video call',
  'object_channelAdminLogEventActionChangePhoto_param_prev_photo_type_Photo' => 'Previous picture',
  'object_channelAdminLogEventActionChangePhoto_param_new_photo_type_Photo' => 'New picture',
  'object_channelAdminLogEventActionChangeLinkedChat' => 'The linked chat was changed',
  'object_channelAdminLogEventActionChangeLinkedChat_param_prev_value_type_int' => 'Previous linked chat',
  'object_channelAdminLogEventActionChangeLinkedChat_param_new_value_type_int' => 'New linked chat',
  'object_inputDialogPeerFolder' => 'All peers in a folder',
  'object_inputDialogPeerFolder_param_folder_id_type_int' => 'Folder ID',
  'object_dialogPeerFolder' => 'Folder',
  'object_dialogPeerFolder_param_folder_id_type_int' => 'Folder ID',
  'object_emojiLanguage' => 'Emoji language',
  'object_emojiLanguage_param_lang_code_type_string' => 'Language code',
  'object_fileLocationToBeDeprecated' => 'Indicates the location of a photo, will be deprecated soon',
  'object_fileLocationToBeDeprecated_param_volume_id_type_long' => 'Volume ID',
  'object_fileLocationToBeDeprecated_param_local_id_type_int' => 'Local ID',
  'object_folder' => 'Folder',
  'object_folder_param_autofill_new_broadcasts_type_true' => 'Automatically add new channels to this folder',
  'object_folder_param_autofill_public_groups_type_true' => 'Automatically add joined new public supergroups to this folder',
  'object_folder_param_autofill_new_correspondents_type_true' => 'Automatically add new private chats to this folder',
  'object_folder_param_id_type_int' => 'Folder ID',
  'object_folder_param_title_type_string' => 'Folder title',
  'object_folder_param_photo_type_ChatPhoto' => 'Folder picture',
  'object_inputFolderPeer' => 'Peer in a folder',
  'object_inputFolderPeer_param_peer_type_InputPeer' => 'Peer',
  'object_inputFolderPeer_param_folder_id_type_int' => 'Folder ID',
  'object_folderPeer' => 'Peer in a folder',
  'object_folderPeer_param_peer_type_Peer' => 'Folder peer info',
  'object_folderPeer_param_folder_id_type_int' => 'Folder ID',
  'object_messages.searchCounter' => 'Indicates how many results would be found by a [messages.search](../methods/messages.search.md) call with the same parameters',
  'object_messages.searchCounter_param_inexact_type_true' => 'If set, the results may be inexact',
  'object_messages.searchCounter_param_filter_type_MessagesFilter' => 'Provided message filter',
  'object_messages.searchCounter_param_count_type_int' => 'Number of results that were found server-side',
  'object_urlAuthResultRequest' => 'Details about the authorization request, for more info [click here »](https://core.telegram.org/api/url-authorization)',
  'object_urlAuthResultRequest_param_request_write_access_type_true' => 'Whether the bot would like to send messages to the user',
  'object_urlAuthResultRequest_param_bot_type_User' => 'Username of a bot, which will be used for user authorization. If not specified, the current bot\'s username will be assumed. The url\'s domain must be the same as the domain linked with the bot. See [Linking your domain to the bot](https://core.telegram.org/widgets/login#linking-your-domain-to-the-bot) for more details.',
  'object_urlAuthResultRequest_param_domain_type_string' => 'The domain name of the website on which the user will log in.',
  'object_urlAuthResultAccepted' => 'Details about an accepted authorization request, for more info [click here »](https://core.telegram.org/api/url-authorization)',
  'object_urlAuthResultAccepted_param_url_type_string' => 'The URL name of the website on which the user has logged in.',
  'object_urlAuthResultDefault' => 'Details about an accepted authorization request, for more info [click here »](https://core.telegram.org/api/url-authorization)',
  'method_contacts.addContact' => 'Add an existing telegram user as contact',
  'method_contacts.addContact_param_add_phone_privacy_exception_type_true' => 'Allow the other user to see our phone number?',
  'method_contacts.addContact_param_id_type_InputUser' => 'Telegram ID of the other user',
  'method_contacts.addContact_param_first_name_type_string' => 'First name',
  'method_contacts.addContact_param_last_name_type_string' => 'Last name',
  'method_contacts.addContact_param_phone_type_string' => 'User\'s phone number',
  'method_contacts.acceptContact' => 'If the [peer settings](../constructors/peerSettings.md) of a new user allow us to add him as contact, add that user as contact',
  'method_contacts.acceptContact_param_id_type_InputUser' => 'The user to add as contact',
  'method_contacts.getLocated' => 'Get contacts near you',
  'method_contacts.getLocated_param_geo_point_type_InputGeoPoint' => 'Geolocation',
  'method_messages.searchGlobal_param_folder_id_type_int' => 'Folder where to search',
  'method_messages.hidePeerSettingsBar' => 'Should be called after the user hides the report spam/add as contact bar of a new chat, effectively prevents the user from executing the actions specified in the [peer\'s settings](../constructors/peerSettings.md).',
  'method_messages.hidePeerSettingsBar_param_peer_type_InputPeer' => 'Peer',
  'method_channels.createChannel_param_geo_point_type_InputGeoPoint' => 'Geogroup location',
  'method_channels.createChannel_param_address_type_string' => 'Geogroup address',
  'method_channels.getAdminedPublicChannels_param_by_location_type_true' => 'Get geogroups',
  'method_channels.getAdminedPublicChannels_param_check_limit_type_true' => 'If set and the user has reached the limit of owned public [channels/supergroups/geogroups](https://core.telegram.org/api/channel), instead of returning the channel list one of the specified [errors](#possible-errors) will be returned.<br>Useful to check if a new public channel can indeed be created, even before asking the user to enter a channel username to use in [channels.checkUsername](../methods/channels.checkUsername.md)/[channels.updateUsername](../methods/channels.updateUsername.md).',
  'method_channels.editCreator' => 'Transfer channel ownership',
  'method_channels.editCreator_param_channel_type_InputChannel' => 'Channel',
  'method_channels.editCreator_param_user_id_type_InputUser' => 'New channel owner',
  'method_channels.editCreator_param_password_type_InputCheckPasswordSRP' => '[2FA password](https://core.telegram.org/api/srp) of account',
  'method_channels.editLocation' => 'Edit location of geogroup',
  'method_channels.editLocation_param_channel_type_InputChannel' => '[Geogroup](https://core.telegram.org/api/channel)',
  'method_channels.editLocation_param_geo_point_type_InputGeoPoint' => 'New geolocation',
  'method_channels.editLocation_param_address_type_string' => 'Address string',
  'object_channelFull_param_can_set_location_type_true' => 'Can we set the geolocation of this group (for geogroups)',
  'object_channelFull_param_location_type_ChannelLocation' => 'Location of the geogroup',
  'object_peerSettings_param_add_contact_type_true' => 'Whether we can add the user as contact',
  'object_peerSettings_param_block_contact_type_true' => 'Whether we can block the user',
  'object_peerSettings_param_share_contact_type_true' => 'Whether we can share the user\'s contact',
  'object_peerSettings_param_need_contacts_exception_type_true' => 'Whether a special exception for contacts is needed',
  'object_peerSettings_param_report_geo_type_true' => 'Whether we can report a geogroup is irrelevant for this location',
  'object_inputReportReasonGeoIrrelevant' => 'Report an irrelevant geogroup',
  'object_userFull_param_settings_type_PeerSettings' => 'Peer settings',
  'object_updatePeerSettings' => 'Settings of a certain peer have changed',
  'object_updatePeerSettings_param_peer_type_Peer' => 'The peer',
  'object_updatePeerSettings_param_settings_type_PeerSettings' => 'Associated peer settings',
  'object_updatePeerLocated' => 'List of peers near you was updated',
  'object_updatePeerLocated_param_peers_type_Vector t' => 'Peers',
  'object_stickerSet_param_animated_type_true' => 'Is this an animated stickerpack',
  'object_messageEntityUnderline' => 'Message entity representing underlined text.',
  'object_messageEntityUnderline_param_offset_type_int' => 'Offset of message entity within message (in UTF-8 codepoints)',
  'object_messageEntityUnderline_param_length_type_int' => 'Length of message entity within message (in UTF-8 codepoints)',
  'object_messageEntityStrike' => 'Message entity representing <del>strikethrough</del> text.',
  'object_messageEntityStrike_param_offset_type_int' => 'Offset of message entity within message (in UTF-8 codepoints)',
  'object_messageEntityStrike_param_length_type_int' => 'Length of message entity within message (in UTF-8 codepoints)',
  'object_messageEntityBlockquote' => 'Message entity representing a block quote.',
  'object_messageEntityBlockquote_param_offset_type_int' => 'Offset of message entity within message (in UTF-8 codepoints)',
  'object_messageEntityBlockquote_param_length_type_int' => 'Length of message entity within message (in UTF-8 codepoints)',
  'object_channelAdminLogEventActionChangeLocation' => 'The geogroup location was changed',
  'object_channelAdminLogEventActionChangeLocation_param_prev_value_type_ChannelLocation' => 'Previous location',
  'object_channelAdminLogEventActionChangeLocation_param_new_value_type_ChannelLocation' => 'New location',
  'object_channelLocationEmpty' => 'No location (normal supergroup)',
  'object_channelLocation' => 'Geographical location of supergroup (geogroups)',
  'object_channelLocation_param_geo_point_type_GeoPoint' => 'Geographical location of supergrup',
  'object_channelLocation_param_address_type_string' => 'Textual description of the address',
  'object_peerLocated' => 'Peer geolocated nearby',
  'object_peerLocated_param_peer_type_Peer' => 'Peer',
  'object_peerLocated_param_expires_type_int' => 'Validity period of current data',
  'object_peerLocated_param_distance_type_int' => 'Distance from the peer in meters',
  'method_account.registerDevice_param_no_muted_type_true' => 'Avoid receiving (silent and invisible background) notifications. Useful to save battery.',
  'method_upload.getFile_param_precise_type_true' => 'You cannot use this method directly, use the upload, downloadToStream, downloadToFile, downloadToDir methods instead; see https://docs.madelineproto.xyz for more info',
  'method_channels.editAdmin_param_rank_type_string' => 'Indicates the role (rank) of the admin in the group: just an arbitrary string',
  'method_channels.toggleSlowMode' => 'Toggle supergroup slow mode: if enabled, users will only be able to send one message every `seconds` seconds',
  'method_channels.toggleSlowMode_param_channel_type_InputChannel' => 'The [supergroup](https://core.telegram.org/api/channel)',
  'method_channels.toggleSlowMode_param_seconds_type_int' => 'Users will only be able to send one message every `seconds` seconds, `0` to disable the limitation',
  'object_channel_param_has_geo_type_true' => 'Whether this chanel has a geoposition',
  'object_channel_param_slowmode_enabled_type_true' => 'Whether slow mode is enabled for groups to prevent flood in chat',
  'object_channelFull_param_slowmode_seconds_type_int' => 'If specified, users in supergroups will only be able to send one message every `slowmode_seconds` seconds',
  'object_auth.authorizationSignUpRequired' => 'An account with this phone number doesn\'t exist on telegram: the user has to [enter basic information and sign up](https://core.telegram.org/api/auth)',
  'object_auth.authorizationSignUpRequired_param_terms_of_service_type_help.TermsOfService' => 'Telegram\'s terms of service: the user must read and accept the terms of service before signing up to telegram',
  'object_help.appUpdate_param_can_not_skip_type_true' => 'Unskippable, the new info must be shown to the user (with a popup or something else)',
  'object_inputStickerSetAnimatedEmoji' => 'Animated emojis stickerset',
  'object_channelParticipantCreator_param_rank_type_string' => 'The role (rank) of the group creator in the group: just an arbitrary string, `admin` by default',
  'object_channelParticipantAdmin_param_rank_type_string' => 'The role (rank) of the admin in the group: just an arbitrary string, `admin` by default',
  'object_payments.paymentVerificationNeeded' => 'Payment was not successful, additional verification is needed',
  'object_payments.paymentVerificationNeeded_param_url_type_string' => 'URL for additional payment credentials verification',
  'object_channelAdminLogEventActionToggleSlowMode' => '[Slow mode setting for supergroups was changed](../methods/channels.toggleSlowMode.md)',
  'object_channelAdminLogEventActionToggleSlowMode_param_prev_value_type_int' => 'Previous slow mode value',
  'object_channelAdminLogEventActionToggleSlowMode_param_new_value_type_int' => 'New slow mode value',
  'object_codeSettings_param_allow_app_hash_type_true' => 'If a token that will be included in eventually sent SMSs is required: required in newer versions of android, to use the [android SMS receiver APIs](https://developers.google.com/identity/sms-retriever/overview)',
  'object_channelFull_param_slowmode_next_send_date_type_int' => 'Indicates when the user will be allowed to send another message in the supergroup (unixdate)',
  'method_account.uploadTheme' => 'Upload theme',
  'method_account.uploadTheme_param_file_type_InputFile' => 'Theme file uploaded as described in [files »](https://core.telegram.org/api/files)',
  'method_account.uploadTheme_param_thumb_type_InputFile' => 'Thumbnail',
  'method_account.uploadTheme_param_file_name_type_string' => 'File name',
  'method_account.uploadTheme_param_mime_type_type_string' => 'MIME type, must be `application/x-tgtheme-{format}`, where `format` depends on the client',
  'method_account.createTheme' => 'Create a theme',
  'method_account.createTheme_param_slug_type_string' => 'Unique theme ID',
  'method_account.createTheme_param_title_type_string' => 'Theme name',
  'method_account.createTheme_param_document_type_InputDocument' => 'Theme file',
  'method_account.updateTheme' => 'Update theme',
  'method_account.updateTheme_param_format_type_string' => 'Theme format, a string that identifies the theming engines supported by the client',
  'method_account.updateTheme_param_theme_type_InputTheme' => 'Theme to update',
  'method_account.updateTheme_param_slug_type_string' => 'Unique theme ID',
  'method_account.updateTheme_param_title_type_string' => 'Theme name',
  'method_account.updateTheme_param_document_type_InputDocument' => 'Theme file',
  'method_account.saveTheme_param_theme_type_InputTheme' => 'Theme to save',
  'method_account.saveTheme_param_unsave_type_Bool' => 'Unsave',
  'method_account.installTheme' => 'Install a theme',
  'method_account.installTheme_param_format_type_string' => 'Theme format, a string that identifies the theming engines supported by the client',
  'method_account.installTheme_param_theme_type_InputTheme' => 'Theme to install',
  'method_account.getTheme' => 'Get theme information',
  'method_account.getTheme_param_format_type_string' => 'Theme format, a string that identifies the theming engines supported by the client',
  'method_account.getTheme_param_theme_type_InputTheme' => 'Theme',
  'method_account.getTheme_param_document_id_type_long' => 'Document ID',
  'method_account.getThemes_param_format_type_string' => 'Theme format, a string that identifies the theming engines supported by the client',
  'method_account.getThemes_param_hash_type_Vector t' => 'Hash for pagination',
  'method_messages.sendMessage_param_schedule_date_type_int' => 'Scheduled message date for scheduled messages',
  'method_messages.sendMedia_param_schedule_date_type_int' => 'Scheduled message date for scheduled messages',
  'method_messages.forwardMessages_param_schedule_date_type_int' => 'Scheduled message date for scheduled messages',
  'method_messages.sendInlineBotResult_param_schedule_date_type_int' => 'Scheduled message date for scheduled messages',
  'method_messages.editMessage_param_schedule_date_type_int' => 'Scheduled message date for scheduled messages',
  'method_messages.sendMultiMedia_param_schedule_date_type_int' => 'Scheduled message date for scheduled messages',
  'method_messages.getScheduledHistory' => 'Get scheduled messages',
  'method_messages.getScheduledHistory_param_peer_type_InputPeer' => 'Peer',
  'method_messages.getScheduledHistory_param_hash_type_Vector t' => 'Hash',
  'method_messages.getScheduledMessages' => 'Get scheduled messages',
  'method_messages.getScheduledMessages_param_peer_type_InputPeer' => 'Peer',
  'method_messages.getScheduledMessages_param_id_type_Vector t' => 'ID',
  'method_messages.sendScheduledMessages' => 'Send scheduled messages right away',
  'method_messages.sendScheduledMessages_param_peer_type_InputPeer' => 'Peer',
  'method_messages.sendScheduledMessages_param_id_type_Vector t' => 'ID',
  'method_messages.deleteScheduledMessages' => 'Delete scheduled messages',
  'method_messages.deleteScheduledMessages_param_peer_type_InputPeer' => 'Peer',
  'method_messages.deleteScheduledMessages_param_id_type_Vector t' => 'ID',
  'object_user_param_restriction_reason_type_Vector t' => 'Restriction reason',
  'object_channel_param_restriction_reason_type_Vector t' => 'Restriction reason',
  'object_chatFull_param_has_scheduled_type_true' => 'Whether scheduled messages are available',
  'object_channelFull_param_has_scheduled_type_true' => 'Whether scheduled messages are available',
  'object_message_param_edit_hide_type_true' => 'Whether the message should be shown as not modified to the user, even if an edit date is present',
  'object_message_param_restriction_reason_type_Vector t' => 'Restriction reason',
  'object_userFull_param_has_scheduled_type_true' => 'Whether scheduled messages are available',
  'object_updateNewScheduledMessage' => 'New incoming scheduled message',
  'object_updateNewScheduledMessage_param_message_type_Message' => 'Message',
  'object_updateDeleteScheduledMessages' => 'Some scheduled messages were deleted',
  'object_updateDeleteScheduledMessages_param_peer_type_Peer' => 'Peer',
  'object_updateDeleteScheduledMessages_param_messages_type_Vector t' => 'Messages',
  'object_updateTheme' => 'A cloud theme was updated',
  'object_updateTheme_param_theme_type_Theme' => 'Theme',
  'object_inputPrivacyKeyAddedByPhone' => 'Whether people can add you to their contact list by your phone number',
  'object_privacyKeyAddedByPhone' => 'Whether people can add you to their contact list by your phone number',
  'object_webPage_param_documents_type_Vector t' => 'Documents',
  'object_restrictionReason' => 'Restriction reason.

Contains the reason why access to a certain object must be restricted. Clients are supposed to deny access to the channel if the `platform` field is equal to `all` or to the current platform (`ios`, `android`, `wp`, etc.). Platforms can be concatenated (`ios-android`, `ios-wp`), unknown platforms are to be ignored. The `text` is the error message that should be shown to the user.',
  'object_restrictionReason_param_platform_type_string' => 'Platform identifier (ios, android, wp, all, etc.), can be concatenated with a dash as separator (`android-ios`, `ios-wp`, etc)',
  'object_restrictionReason_param_reason_type_string' => 'Restriction reason (`porno`, `terms`, etc.)',
  'object_restrictionReason_param_text_type_string' => 'Error message to be shown to the user',
  'object_inputTheme' => 'Theme',
  'object_inputTheme_param_id_type_long' => 'ID',
  'object_inputTheme_param_access_hash_type_long' => 'Access hash',
  'object_inputThemeSlug' => 'Theme by theme ID',
  'object_inputThemeSlug_param_slug_type_string' => 'Unique theme ID',
  'object_themeDocumentNotModified' => 'Theme background hasn\'t changed',
  'object_theme' => 'Theme',
  'object_theme_param_creator_type_true' => 'Whether the current user is the creator of this theme',
  'object_theme_param_default_type_true' => 'Whether this is the default theme',
  'object_theme_param_id_type_long' => 'Theme ID',
  'object_theme_param_access_hash_type_long' => 'Theme access hash',
  'object_theme_param_slug_type_string' => 'Unique theme ID',
  'object_theme_param_title_type_string' => 'Theme name',
  'object_theme_param_document_type_Document' => 'Theme',
  'object_theme_param_installs_count_type_int' => 'Installation count',
  'object_account.themesNotModified' => 'No new themes were installed',
  'object_account.themes' => 'Installed themes',
  'object_account.themes_param_hash_type_int' => '[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)',
  'object_account.themes_param_themes_type_Vector t' => 'Themes',
  'method_account.installTheme_param_dark_type_true' => 'Whether to install the dark version',
  'method_account.getThemes' => 'Get installed themes',
  'method_account.saveTheme' => 'Save a theme',
  'object_inputBotInlineResult_param_send_message_type_InputBotInlineMessage' => 'Message to send when the result is selected',
  'object_inputBotInlineResultPhoto_param_send_message_type_InputBotInlineMessage' => 'Message to send when the result is selected',
  'object_inputBotInlineResultDocument_param_send_message_type_InputBotInlineMessage' => 'Message to send when the result is selected',
  'object_inputBotInlineResultGame_param_send_message_type_InputBotInlineMessage' => 'Message to send when the result is selected',
  'object_botInlineResult_param_send_message_type_BotInlineMessage' => 'Message to send',
  'object_botInlineMediaResult_param_send_message_type_BotInlineMessage' => 'Depending on the `type` and on the [constructor](../types/BotInlineMessage.md), contains the caption of the media or the content of the message to be sent **instead** of the media',
  'object_chatBannedRights_param_send_messages_type_true' => 'If set, does not allow a user to send messages in a [supergroup/chat](https://core.telegram.org/api/channel)',
  'object_updateStickerSetsOrder_param_order_type_Vector long' => 'New sticker order by sticker ID',
  'object_pageBlockList_param_items_type_Vector PageListItem' => 'List of blocks in an IV page',
  'object_topPeerCategoryPeers_param_peers_type_Vector TopPeer' => 'Peers',
  'object_stickerPack_param_documents_type_Vector long' => 'Stickers',
  'object_updateDeleteChannelMessages_param_messages_type_Vector int' => 'IDs of messages that were deleted',
  'object_photos.photos_param_photos_type_Vector Photo' => 'List of photos',
  'object_photos.photos_param_users_type_Vector User' => 'List of mentioned users',
  'object_updatePeerLocated_param_peers_type_Vector PeerLocated' => 'Geolocated peer list update',
  'object_messages.savedGifs_param_gifs_type_Vector Document' => 'List of saved gifs',
  'object_pageBlockRelatedArticles_param_articles_type_Vector PageRelatedArticle' => 'Related articles',
  'object_inputSingleMedia_param_random_id_type_long' => 'Unique client media ID required to prevent message resending',
  'object_inputSingleMedia_param_entities_type_Vector MessageEntity' => 'Message [entities](https://core.telegram.org/api/entities) for styled text',
  'object_updatePinnedDialogs_param_order_type_Vector DialogPeer' => 'New order of pinned dialogs',
  'object_messages.chatsSlice_param_chats_type_Vector Chat' => 'Chats',
  'object_messages.stickerSetInstallResultArchive_param_sets_type_Vector StickerSetCovered' => 'Archived stickersets',
  'object_upload.fileCdnRedirect_param_file_hashes_type_Vector FileHash' => 'File hashes (see [CDN files](https://core.telegram.org/cdn)',
  'object_help.deepLinkInfo_param_entities_type_Vector MessageEntity' => '[Message entities for styled text](https://core.telegram.org/api/entities)',
  'object_inputPrivacyValueDisallowChatParticipants_param_chats_type_Vector int' => 'Disallowed chat IDs',
  'object_updateServiceNotification_param_entities_type_Vector MessageEntity' => '[Message entities for styled text](https://core.telegram.org/api/entities)',
  'object_pageListOrderedItemBlocks_param_blocks_type_Vector PageBlock' => 'Item contents',
  'object_channels.adminLogResults_param_events_type_Vector ChannelAdminLogEvent' => 'Admin log events',
  'object_channels.adminLogResults_param_chats_type_Vector Chat' => 'Chats mentioned in events',
  'object_channels.adminLogResults_param_users_type_Vector User' => 'Users mentioned in events',
  'object_messages.channelMessages_param_messages_type_Vector Message' => 'Found messages',
  'object_messages.channelMessages_param_chats_type_Vector Chat' => 'Chats',
  'object_messages.channelMessages_param_users_type_Vector User' => 'Users',
  'object_message_param_entities_type_Vector MessageEntity' => 'Message [entities](https://core.telegram.org/api/entities) for styled text',
  'object_message_param_restriction_reason_type_Vector RestrictionReason' => 'Contains the reason why access to this message must be restricted.',
  'object_messages.favedStickers_param_packs_type_Vector StickerPack' => 'Emojis associated to stickers',
  'object_messages.favedStickers_param_stickers_type_Vector Document' => 'Favorited stickers',
  'object_messages.foundStickerSets_param_sets_type_Vector StickerSetCovered' => 'Found stickersets',
  'object_account.authorizationForm_param_required_types_type_Vector SecureRequiredType' => 'Required [Telegram Passport](https://core.telegram.org/passport) documents',
  'object_account.authorizationForm_param_values_type_Vector SecureValue' => 'Already submitted [Telegram Passport](https://core.telegram.org/passport) documents',
  'object_account.authorizationForm_param_errors_type_Vector SecureValueError' => '[Telegram Passport](https://core.telegram.org/passport) errors',
  'object_account.authorizationForm_param_users_type_Vector User' => 'Info about the bot to which the form will be submitted',
  'object_messageActionChatAddUser_param_users_type_Vector int' => 'Users that were invited to the chat',
  'object_shippingOption_param_prices_type_Vector LabeledPrice' => 'List of price portions',
  'object_inputBotInlineMessageMediaAuto_param_entities_type_Vector MessageEntity' => '[Message entities for styled text](https://core.telegram.org/api/entities)',
  'object_photos.photosSlice_param_photos_type_Vector Photo' => 'List of photos',
  'object_photos.photosSlice_param_users_type_Vector User' => 'List of mentioned users',
  'object_pageBlockCollage_param_items_type_Vector PageBlock' => 'Media elements',
  'object_updatesCombined_param_updates_type_Vector Update' => 'List of updates',
  'object_updatesCombined_param_users_type_Vector User' => 'List of users mentioned in updates',
  'object_updatesCombined_param_chats_type_Vector Chat' => 'List of chats mentioned in updates',
  'object_pageBlockOrderedList_param_items_type_Vector PageListOrderedItem' => 'List items',
  'object_privacyValueAllowChatParticipants_param_chats_type_Vector int' => 'Allowed chats',
  'object_emojiKeyword_param_emoticons_type_Vector string' => 'Emojis associated to keyword',
  'object_botInlineMessageMediaAuto_param_entities_type_Vector MessageEntity' => '[Message entities for styled text](https://core.telegram.org/api/entities)',
  'object_messageReactions' => 'Message reactions',
  'object_messageReactions_param_min_type_true' => 'Similar to [min](https://core.telegram.org/api/min) objects, used for message reaction constructors that are the same for all users so they don\'t have the reactions sent by the current user (you can use [messages.getMessagesReactions](../methods/messages.getMessagesReactions.md) to get the full reaction info).',
  'object_messageReactions_param_results_type_Vector ReactionCount' => 'Reactions',
  'object_decryptedMessageMediaDocument_param_attributes_type_Vector DocumentAttribute' => 'Document attributes for media types',
  'object_messageActionSecureValuesSent_param_types_type_Vector SecureValueType' => 'Secure value types',
  'object_pollResults_param_results_type_Vector PollAnswerVoters' => 'Poll results',
  'object_messages.stickers_param_stickers_type_Vector Document' => 'Stickers',
  'object_photo_param_sizes_type_Vector PhotoSize' => 'Available sizes for download',
  'object_inputPrivacyValueAllowChatParticipants_param_chats_type_Vector int' => 'Allowed chat IDs',
  'object_contacts.found_param_my_results_type_Vector Peer' => 'Personalized results',
  'object_contacts.found_param_results_type_Vector Peer' => 'List of found user identifiers',
  'object_contacts.found_param_chats_type_Vector Chat' => 'Found chats',
  'object_contacts.found_param_users_type_Vector User' => 'List of users',
  'object_chatInvite_param_participants_type_Vector User' => 'A few of the participants that are in the group',
  'object_messages.dialogs_param_dialogs_type_Vector Dialog' => 'List of chats',
  'object_messages.dialogs_param_messages_type_Vector Message' => 'List of last messages from each chat',
  'object_messages.dialogs_param_chats_type_Vector Chat' => 'List of groups mentioned in the chats',
  'object_messages.dialogs_param_users_type_Vector User' => 'List of users mentioned in messages and groups',
  'object_textConcat_param_texts_type_Vector RichText' => 'Concatenated rich texts',
  'object_messages.allStickers_param_sets_type_Vector StickerSet' => 'All stickersets',
  'object_phone.phoneCall_param_users_type_Vector User' => 'VoIP phone call participants',
  'object_updatePrivacy_param_rules_type_Vector PrivacyRule' => 'New privacy rules',
  'object_channelMessagesFilter_param_ranges_type_Vector MessageRange' => 'A range of messages to fetch',
  'object_updateShortMessage_param_entities_type_Vector MessageEntity' => '[Entities](https://core.telegram.org/api/entities) for styled text',
  'object_pageListItemBlocks_param_blocks_type_Vector PageBlock' => 'Blocks',
  'object_inputWebDocument_param_attributes_type_Vector DocumentAttribute' => 'Attributes for media types',
  'object_inputMediaUploadedPhoto_param_stickers_type_Vector InputDocument' => 'Attached mask stickers',
  'object_contacts.topPeers_param_categories_type_Vector TopPeerCategoryPeers' => 'Top peers by top peer category',
  'object_contacts.topPeers_param_chats_type_Vector Chat' => 'Chats',
  'object_contacts.topPeers_param_users_type_Vector User' => 'Users',
  'object_user_param_restriction_reason_type_Vector RestrictionReason' => 'Contains the reason why access to this user must be restricted.',
  'object_messages.botResults_param_results_type_Vector BotInlineResult' => 'The results',
  'object_messages.botResults_param_users_type_Vector User' => 'Users mentioned in the results',
  'object_pageBlockDetails_param_blocks_type_Vector PageBlock' => 'Block contents',
  'object_inputPrivacyValueAllowUsers_param_users_type_Vector InputUser' => 'Allowed users',
  'object_messages.chatFull_param_chats_type_Vector Chat' => 'List containing basic info on chat',
  'object_messages.chatFull_param_users_type_Vector User' => 'List of users mentioned above',
  'object_privacyValueDisallowChatParticipants_param_chats_type_Vector int' => 'Disallowed chats',
  'object_replyInlineMarkup_param_rows_type_Vector KeyboardButtonRow' => 'Bot or inline keyboard rows',
  'object_updates.differenceSlice_param_new_messages_type_Vector Message' => 'List of new messgaes',
  'object_updates.differenceSlice_param_new_encrypted_messages_type_Vector EncryptedMessage' => 'New messages from the [encrypted event sequence](https://core.telegram.org/api/updates)',
  'object_updates.differenceSlice_param_other_updates_type_Vector Update' => 'List of updates',
  'object_updates.differenceSlice_param_chats_type_Vector Chat' => 'List of chats mentioned in events',
  'object_updates.differenceSlice_param_users_type_Vector User' => 'List of users mentioned in events',
  'object_channelFull_param_bot_info_type_Vector BotInfo' => 'Info about bots in the channel/supergrup',
  'object_messages.foundGifs_param_results_type_Vector FoundGif' => 'Found GIFs',
  'object_messageUserReaction' => 'Message reaction',
  'object_messageUserReaction_param_user_id_type_int' => 'ID of user that reacted this way',
  'object_messageUserReaction_param_reaction_type_string' => 'Reaction (UTF8 emoji)',
  'object_updates.channelDifference_param_new_messages_type_Vector Message' => 'New messages',
  'object_updates.channelDifference_param_other_updates_type_Vector Update' => 'Other updates',
  'object_updates.channelDifference_param_chats_type_Vector Chat' => 'Chats',
  'object_updates.channelDifference_param_users_type_Vector User' => 'Users',
  'object_decryptedMessageActionDeleteMessages_param_random_ids_type_Vector long' => 'List of deleted message IDs',
  'object_jsonObject_param_value_type_Vector JSONObjectValue' => 'Values',
  'object_photos.photo_param_users_type_Vector User' => 'Users',
  'object_account.webAuthorizations_param_authorizations_type_Vector WebAuthorization' => 'Web authorization list',
  'object_account.webAuthorizations_param_users_type_Vector User' => 'Users',
  'object_account.wallPapers_param_wallpapers_type_Vector WallPaper' => 'Wallpapers',
  'object_inputBotInlineMessageText_param_entities_type_Vector MessageEntity' => '[Message entities for styled text](https://core.telegram.org/api/entities)',
  'object_invoice_param_prices_type_Vector LabeledPrice' => 'Price breakdown, a list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.)',
  'object_replyKeyboardMarkup_param_rows_type_Vector KeyboardButtonRow' => 'Button row',
  'object_payments.paymentForm_param_users_type_Vector User' => 'Users',
  'object_contacts.resolvedPeer_param_chats_type_Vector Chat' => 'Chats',
  'object_contacts.resolvedPeer_param_users_type_Vector User' => 'Users',
  'object_config_param_dc_options_type_Vector DcOption' => 'DC IP list',
  'object_contacts.importedContacts_param_imported_type_Vector ImportedContact' => 'List of succesfully imported contacts',
  'object_contacts.importedContacts_param_popular_invites_type_Vector PopularContact' => 'Popular contacts',
  'object_contacts.importedContacts_param_retry_contacts_type_Vector long' => 'List of contact ids that could not be imported due to system limitation and will need to be imported at a later date.<br>Parameter added in [Layer 13](https://core.telegram.org/api/layers#layer-13)',
  'object_contacts.importedContacts_param_users_type_Vector User' => 'List of users',
  'object_inputMediaUploadedDocument_param_attributes_type_Vector DocumentAttribute' => 'Attributes that specify the type of the document (video, audio, voice, sticker, etc.)',
  'object_inputMediaUploadedDocument_param_stickers_type_Vector InputDocument' => 'Attached stickers',
  'object_messages.stickerSet_param_packs_type_Vector StickerPack' => 'Emoji info for stickers',
  'object_messages.stickerSet_param_documents_type_Vector Document' => 'Stickers in stickerset',
  'object_contacts.contacts_param_contacts_type_Vector Contact' => 'Contact list',
  'object_contacts.contacts_param_users_type_Vector User' => 'User list',
  'object_pageBlockTable_param_rows_type_Vector PageTableRow' => 'Table rows',
  'object_account.themes_param_themes_type_Vector Theme' => 'Themes',
  'object_help.proxyDataPromo_param_chats_type_Vector Chat' => 'Chats',
  'object_help.proxyDataPromo_param_users_type_Vector User' => 'Users',
  'object_messages.peerDialogs_param_dialogs_type_Vector Dialog' => 'Dialog info',
  'object_messages.peerDialogs_param_messages_type_Vector Message' => 'Messages mentioned in dialog info',
  'object_messages.peerDialogs_param_chats_type_Vector Chat' => 'Chats',
  'object_messages.peerDialogs_param_users_type_Vector User' => 'Users',
  'object_updates.channelDifferenceTooLong_param_messages_type_Vector Message' => 'The latest messages',
  'object_updates.channelDifferenceTooLong_param_chats_type_Vector Chat' => 'Chats from messages',
  'object_updates.channelDifferenceTooLong_param_users_type_Vector User' => 'Users from messages',
  'object_messages.recentStickers_param_packs_type_Vector StickerPack' => 'Emojis associated to stickers',
  'object_messages.recentStickers_param_stickers_type_Vector Document' => 'Recent stickers',
  'object_messages.recentStickers_param_dates_type_Vector int' => 'When was each sticker last used',
  'object_inputPhotoLegacyFileLocation' => 'Legacy file location',
  'object_inputPhotoLegacyFileLocation_param_id_type_long' => 'Photo ID',
  'object_inputPhotoLegacyFileLocation_param_access_hash_type_long' => 'Access hash',
  'object_inputPhotoLegacyFileLocation_param_file_reference_type_bytes' => 'File reference',
  'object_inputPhotoLegacyFileLocation_param_volume_id_type_long' => 'Volume ID',
  'object_inputPhotoLegacyFileLocation_param_local_id_type_int' => 'Local ID',
  'object_inputPhotoLegacyFileLocation_param_secret_type_long' => 'Secret',
  'object_draftMessage_param_entities_type_Vector MessageEntity' => 'Message [entities](https://core.telegram.org/api/entities) for styled text.',
  'object_help.termsOfService_param_entities_type_Vector MessageEntity' => '[Message entities for styled text](https://core.telegram.org/api/entities)',
  'object_contacts.blocked_param_blocked_type_Vector ContactBlocked' => 'List of blocked users',
  'object_contacts.blocked_param_users_type_Vector User' => 'List of users',
  'object_pageBlockSlideshow_param_items_type_Vector PageBlock' => 'Slideshow items',
  'object_keyboardButtonRow_param_buttons_type_Vector KeyboardButton' => 'Bot or inline keyboard buttons',
  'object_updateFolderPeers_param_folder_peers_type_Vector FolderPeer' => 'New peer list',
  'object_channels.channelParticipants_param_participants_type_Vector ChannelParticipant' => 'Participants',
  'object_channels.channelParticipants_param_users_type_Vector User' => 'Users mentioned in participant info',
  'object_emojiKeywordsDifference_param_keywords_type_Vector EmojiKeyword' => 'Emojis associated to keywords',
  'object_page_param_blocks_type_Vector PageBlock' => 'Page elements (like with HTML elements, only as TL constructors)',
  'object_page_param_photos_type_Vector Photo' => 'Photos in page',
  'object_page_param_documents_type_Vector Document' => 'Media in page',
  'object_webDocumentNoProxy_param_attributes_type_Vector DocumentAttribute' => 'Attributes for media types',
  'object_messageActionSecureValuesSentMe_param_values_type_Vector SecureValue' => 'Vector with information about documents and other Telegram Passport elements that were shared with the bot',
  'object_reactionCount' => 'Reactions',
  'object_reactionCount_param_chosen_type_true' => 'Whether the current user sent this reaction',
  'object_reactionCount_param_reaction_type_string' => 'Reaction (a UTF8 emoji)',
  'object_reactionCount_param_count_type_int' => 'NUmber of users that reacted with this emoji',
  'object_emojiKeywordDeleted_param_emoticons_type_Vector string' => 'Emojis that were associated to keyword',
  'object_decryptedMessageService_param_random_id_type_long' => 'Random message ID, assigned by the message author.<br>Must be equal to the ID passed to the sending method.',
  'object_messages.highScores_param_scores_type_Vector HighScore' => 'Highscores',
  'object_messages.highScores_param_users_type_Vector User' => 'Users, associated to the highscores',
  'object_stickerSetMultiCovered_param_covers_type_Vector Document' => 'Preview stickers',
  'object_inputSecureValue_param_translation_type_Vector InputSecureFile' => 'Array of encrypted [passport](https://core.telegram.org/passport) files with translated versions of the provided documents',
  'object_inputSecureValue_param_files_type_Vector InputSecureFile' => 'Array of encrypted [passport](https://core.telegram.org/passport) files with photos the of the documents',
  'object_updates_param_updates_type_Vector Update' => 'List of updates',
  'object_updates_param_users_type_Vector User' => 'List of users mentioned in updates',
  'object_updates_param_chats_type_Vector Chat' => 'List of chats mentioned in updates',
  'object_updateReadMessagesContents_param_messages_type_Vector int' => 'IDs of read messages',
  'object_decryptedMessageLayer_param_random_bytes_type_bytes' => 'Set of random bytes to prevent content recognition in short encrypted messages.<br>Clients are required to check that there are at least 15 random bytes included in each message. Messages with less than 15 random bytes must be ignored.<br>Parameter moved here from [decryptedMessage](../constructors/decryptedMessage.md) in [Layer 17](https://core.telegram.org/api/layers#layer-17).',
  'object_decryptedMessage_param_random_id_type_long' => 'Random message ID, assigned by the author of message.<br>Must be equal to the ID passed to sending method.',
  'object_decryptedMessage_param_entities_type_Vector MessageEntity' => 'Message [entities](https://core.telegram.org/api/entities) for styled text (parameter added in layer 45)',
  'object_chatFull_param_bot_info_type_Vector BotInfo' => 'Info about bots that are in this chat',
  'object_messages.featuredStickers_param_sets_type_Vector StickerSetCovered' => 'Featured stickersets',
  'object_messages.featuredStickers_param_unread_type_Vector long' => 'IDs of new featured stickersets',
  'object_decryptedMessageMediaExternalDocument_param_attributes_type_Vector DocumentAttribute' => 'Attributes for media types',
  'object_document_param_thumbs_type_Vector PhotoSize' => 'Thumbnails',
  'object_document_param_attributes_type_Vector DocumentAttribute' => 'Attributes',
  'object_help.appUpdate_param_entities_type_Vector MessageEntity' => '[Message entities for styled text](https://core.telegram.org/api/entities)',
  'object_updates.difference_param_new_messages_type_Vector Message' => 'List of new messages',
  'object_updates.difference_param_new_encrypted_messages_type_Vector EncryptedMessage' => 'List of new encrypted secret chat messages',
  'object_updates.difference_param_other_updates_type_Vector Update' => 'List of updates',
  'object_updates.difference_param_chats_type_Vector Chat' => 'List of chats mentioned in events',
  'object_updates.difference_param_users_type_Vector User' => 'List of users mentioned in events',
  'object_webPage_param_documents_type_Vector Document' => 'Attached webpage documents',
  'object_decryptedMessageActionReadMessages_param_random_ids_type_Vector long' => 'List of message IDs',
  'object_messageActionChatCreate_param_users_type_Vector int' => 'List of group members',
  'object_botInlineMessageText_param_entities_type_Vector MessageEntity' => '[Message entities for styled text](https://core.telegram.org/api/entities)',
  'object_account.authorizations_param_authorizations_type_Vector Authorization' => 'Logged-in sessions',
  'object_langPackDifference_param_strings_type_Vector LangPackString' => 'Localized strings',
  'object_updateDeleteScheduledMessages_param_messages_type_Vector int' => 'Deleted scheduled messages',
  'object_encryptedMessage_param_random_id_type_long' => 'Random message ID, assigned by the author of message',
  'object_encryptedMessage_param_bytes_type_bytes' => 'TL-serialising of [DecryptedMessage](../types/DecryptedMessage.md) type, encrypted with the key creatied at stage of chat initialization',
  'object_account.privacyRules_param_rules_type_Vector PrivacyRule' => 'Privacy rules',
  'object_account.privacyRules_param_chats_type_Vector Chat' => 'Chats to which the rules apply',
  'object_account.privacyRules_param_users_type_Vector User' => 'Users to which the rules apply',
  'object_phoneCall_param_connections_type_Vector PhoneConnection' => 'List of endpoints the user can connect to to exchange call data',
  'object_secureValueErrorFiles_param_file_hash_type_Vector bytes' => 'File hash',
  'object_chatParticipants_param_participants_type_Vector ChatParticipant' => 'List of group members',
  'object_secureValueErrorTranslationFiles_param_file_hash_type_Vector bytes' => 'Hash',
  'object_pageBlockEmbedPost_param_blocks_type_Vector PageBlock' => 'Post contents',
  'object_decryptedMessageActionScreenshotMessages_param_random_ids_type_Vector long' => 'List of affected message ids (that appeared on the screenshot)',
  'object_channel_param_restriction_reason_type_Vector RestrictionReason' => 'Contains the reason why access to this channel must be restricted.',
  'object_updateChannelReadMessagesContents_param_messages_type_Vector int' => 'IDs of messages that were read',
  'object_messages.chats_param_chats_type_Vector Chat' => 'List of chats',
  'object_contacts.blockedSlice_param_blocked_type_Vector ContactBlocked' => 'List of blocked users',
  'object_contacts.blockedSlice_param_users_type_Vector User' => 'List of users',
  'object_encryptedMessageService_param_random_id_type_long' => 'Random message ID, assigned by the author of message',
  'object_encryptedMessageService_param_bytes_type_bytes' => 'TL-serialising of [DecryptedMessage](../types/DecryptedMessage.md) type, encrypted with the key creatied at stage of chat initialization',
  'object_messages.dialogsSlice_param_dialogs_type_Vector Dialog' => 'List of dialogs',
  'object_messages.dialogsSlice_param_messages_type_Vector Message' => 'List of last messages from dialogs',
  'object_messages.dialogsSlice_param_chats_type_Vector Chat' => 'List of chats mentioned in dialogs',
  'object_messages.dialogsSlice_param_users_type_Vector User' => 'List of users mentioned in messages and chats',
  'object_cdnConfig_param_public_keys_type_Vector CdnPublicKey' => 'Vector of public keys to use **only** during handshakes to [CDN](https://core.telegram.org/cdn) DCs.',
  'object_jsonArray_param_value_type_Vector JSONValue' => 'JSON values',
  'object_messages.messages_param_messages_type_Vector Message' => 'List of messages',
  'object_messages.messages_param_chats_type_Vector Chat' => 'List of chats mentioned in dialogs',
  'object_messages.messages_param_users_type_Vector User' => 'List of users mentioned in messages and chats',
  'object_help.recentMeUrls_param_urls_type_Vector RecentMeUrl' => 'URLs',
  'object_help.recentMeUrls_param_chats_type_Vector Chat' => 'Chats',
  'object_help.recentMeUrls_param_users_type_Vector User' => 'Users',
  'object_botInfo_param_commands_type_Vector BotCommand' => 'Bot commands that can be used in the chat',
  'object_pageTableRow_param_cells_type_Vector PageTableCell' => 'Table cells',
  'object_help.userInfo_param_entities_type_Vector MessageEntity' => '[Message entities for styled text](https://core.telegram.org/api/entities)',
  'object_inputPrivacyValueDisallowUsers_param_users_type_Vector InputUser' => 'Users to disallow',
  'object_secureValue_param_translation_type_Vector SecureFile' => 'Array of encrypted [passport](https://core.telegram.org/passport) files with translated versions of the provided documents',
  'object_secureValue_param_files_type_Vector SecureFile' => 'Array of encrypted [passport](https://core.telegram.org/passport) files with photos the of the documents',
  'object_payments.validatedRequestedInfo_param_shipping_options_type_Vector ShippingOption' => 'Shipping options',
  'object_privacyValueAllowUsers_param_users_type_Vector int' => 'Allowed users',
  'object_webDocument_param_attributes_type_Vector DocumentAttribute' => 'Attributes for media types',
  'object_secureRequiredTypeOneOf_param_types_type_Vector SecureRequiredType' => 'Secure required value types',
  'object_updateShortSentMessage_param_entities_type_Vector MessageEntity' => '[Entities](https://core.telegram.org/api/entities) for styled text',
  'object_updateShortChatMessage_param_entities_type_Vector MessageEntity' => '[Entities](https://core.telegram.org/api/entities) for styled text',
  'object_updateMessageID_param_random_id_type_long' => 'Previuosly transferred client **random\\_id** identifier',
  'object_messages.archivedStickers_param_sets_type_Vector StickerSetCovered' => 'Archived stickersets',
  'object_messages.messagesSlice_param_messages_type_Vector Message' => 'List of messages',
  'object_messages.messagesSlice_param_chats_type_Vector Chat' => 'List of chats mentioned in messages',
  'object_messages.messagesSlice_param_users_type_Vector User' => 'List of users mentioned in messages and chats',
  'object_privacyValueDisallowUsers_param_users_type_Vector int' => 'Disallowed users',
  'object_updateDcOptions_param_dc_options_type_Vector DcOption' => 'New connection options',
  'object_payments.paymentReceipt_param_users_type_Vector User' => 'Users',
  'object_updateMessageReactions' => 'New message reactions are available',
  'object_updateMessageReactions_param_peer_type_Peer' => 'Peer',
  'object_updateMessageReactions_param_msg_id_type_int' => 'Message ID',
  'object_updateMessageReactions_param_reactions_type_MessageReactions' => 'Reactions',
  'object_channels.channelParticipant_param_users_type_Vector User' => 'Users',
  'object_poll_param_answers_type_Vector PollAnswer' => 'The possible answers, vote using [messages.sendVote](../methods/messages.sendVote.md).',
  'object_updateDeleteMessages_param_messages_type_Vector int' => 'List of identifiers of deleted messages',
  'object_messageReactionsList' => 'List of message reactions',
  'object_messageReactionsList_param_count_type_int' => 'Total number of reactions',
  'object_messageReactionsList_param_reactions_type_Vector MessageUserReaction' => 'Reactions',
  'object_messageReactionsList_param_users_type_Vector User' => 'Users that reacted like this',
  'object_messageReactionsList_param_next_offset_type_string' => 'Next offset to use when fetching reactions using [messages.getMessageReactionsList](../methods/messages.getMessageReactionsList.md)',
  'method_messages.sendEncryptedFile_param_random_id_type_long' => 'Unique client message ID necessary to prevent message resending',
  'method_messages.sendEncryptedFile_param_data_type_bytes' => 'TL-serialization of [DecryptedMessage](../types/DecryptedMessage.md) type, encrypted with a key generated during chat initialization',
  'method_channels.getChannels_param_id_type_Vector InputChannel' => 'IDs of channels/supergroups to get info about',
  'method_users.getUsers_param_id_type_Vector InputUser' => 'List of user identifiers',
  'method_channels.getMessages_param_id_type_Vector InputMessage' => 'IDs of messages to get',
  'method_channels.readMessageContents_param_id_type_Vector int' => 'IDs of messages whose contents should be marked as read',
  'method_channels.inviteToChannel_param_users_type_Vector InputUser' => 'Users to invite',
  'method_messages.sendVote_param_options_type_Vector bytes' => 'The options that were chosen',
  'method_messages.getEmojiKeywordsLanguages_param_lang_codes_type_Vector string' => 'Language codes',
  'method_messages.sendScheduledMessages_param_id_type_Vector int' => 'Scheduled message IDs',
  'method_help.getPassportConfig_param_hash_type_int' => '[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)',
  'method_langpack.getStrings_param_keys_type_Vector string' => 'Strings to get',
  'method_account.setPrivacy_param_rules_type_Vector InputPrivacyRule' => 'New privacy rules',
  'method_messages.sendScreenshotNotification_param_random_id_type_long' => 'Random ID to avoid message resending',
  'method_messages.startBot_param_random_id_type_long' => 'Random ID to avoid resending the same message',
  'method_messages.deleteChatUser_param_chat_id_type_int' => 'Chat ID',
  'method_messages.sendMessage_param_random_id_type_long' => 'Unique client message ID required to prevent message resending',
  'method_messages.sendMessage_param_entities_type_Vector MessageEntity' => 'Message [entities](https://core.telegram.org/api/entities) for sending styled text',
  'method_messages.getWebPagePreview_param_entities_type_Vector MessageEntity' => '[Message entities for styled text](https://core.telegram.org/api/entities)',
  'method_account.getWallPapers_param_hash_type_int' => '[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)',
  'method_messages.readMessageContents_param_id_type_Vector int' => 'Message ID list',
  'method_messages.getScheduledHistory_param_hash_type_int' => '[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)',
  'method_phone.requestCall_param_random_id_type_int' => 'You cannot use this method directly, see https://docs.madelineproto.xyz#calls for more info on handling calls',
  'method_messages.setInlineBotResults_param_results_type_Vector InputBotInlineResult' => 'Vector of results for the inline query',
  'method_messages.sendMedia_param_random_id_type_long' => 'Random ID to avoid resending the same message',
  'method_messages.sendMedia_param_entities_type_Vector MessageEntity' => 'Message [entities](https://core.telegram.org/api/entities) for styled text',
  'method_messages.editMessage_param_entities_type_Vector MessageEntity' => '[Message entities for styled text](https://core.telegram.org/api/entities)',
  'method_messages.getMessagesReactions' => 'Get message reactions',
  'method_messages.getMessagesReactions_param_peer_type_InputPeer' => 'Peer',
  'method_messages.getMessagesReactions_param_id_type_Vector int' => 'Message IDs',
  'method_users.setSecureValueErrors_param_errors_type_Vector SecureValueError' => 'Errors',
  'method_contacts.getContactIDs_param_hash_type_int' => '[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)',
  'method_messages.getSearchCounters_param_filters_type_Vector MessagesFilter' => 'Search filters',
  'method_contacts.deleteByPhones_param_phones_type_Vector string' => 'Phone numbers',
  'method_messages.readFeaturedStickers_param_id_type_Vector long' => 'IDs of stickersets to mark as read',
  'method_messages.saveDraft_param_entities_type_Vector MessageEntity' => 'Message [entities](https://core.telegram.org/api/entities) for styled text',
  'method_account.unregisterDevice_param_other_uids_type_Vector int' => 'List of user identifiers of other users currently using the client',
  'method_messages.report_param_id_type_Vector int' => 'IDs of messages to report',
  'method_account.deleteSecureValue_param_types_type_Vector SecureValueType' => 'Document types to delete',
  'method_messages.getChats_param_id_type_Vector int' => 'List of chat IDs',
  'method_messages.reorderStickerSets_param_order_type_Vector long' => 'New stickerset order by stickerset IDs',
  'method_messages.sendInlineBotResult_param_random_id_type_long' => 'Random ID to avoid resending the same query',
  'method_messages.getAllChats_param_except_ids_type_Vector int' => 'Except these chats/channels/supergroups',
  'method_messages.requestEncryption_param_random_id_type_int' => 'You cannot use this method directly, see https://docs.madelineproto.xyz for more info on handling secret chats',
  'method_channels.reportSpam_param_id_type_Vector int' => 'IDs of spam messages',
  'method_messages.createChat_param_users_type_Vector InputUser' => 'List of user IDs to be invited',
  'method_account.acceptAuthorization_param_value_hashes_type_Vector SecureValueHash' => 'Types of values sent and their hashes',
  'method_folders.editPeerFolders_param_folder_peers_type_Vector InputFolderPeer' => 'New peer list',
  'method_messages.setBotShippingResults_param_shipping_options_type_Vector ShippingOption' => 'A vector of available shipping options.',
  'method_messages.deleteScheduledMessages_param_id_type_Vector int' => 'Scheduled message IDs',
  'method_messages.editChatTitle_param_chat_id_type_int' => 'Chat ID',
  'method_account.registerDevice_param_other_uids_type_Vector int' => 'List of user identifiers of other users currently using the client',
  'method_messages.addChatUser_param_chat_id_type_int' => 'Chat ID',
  'method_messages.migrateChat_param_chat_id_type_int' => 'Legacy group to migrate',
  'method_messages.sendReaction' => 'Send reaction to message',
  'method_messages.sendReaction_param_peer_type_InputPeer' => 'Peer',
  'method_messages.sendReaction_param_msg_id_type_int' => 'Message ID to react to',
  'method_messages.sendReaction_param_reaction_type_string' => 'Reaction (a UTF8 emoji)',
  'method_channels.deleteMessages_param_id_type_Vector int' => 'IDs of messages to delete',
  'method_messages.deleteMessages_param_id_type_Vector int' => 'Message ID list',
  'method_messages.getFullChat_param_chat_id_type_int' => 'You cannot use this method directly, use the getPwrChat, getInfo, getFullInfo methods instead (see https://docs.madelineproto.xyz for more info)',
  'method_account.getSecureValue_param_types_type_Vector SecureValueType' => 'Requested value types',
  'method_messages.getMessagesViews_param_id_type_Vector int' => 'ID of message',
  'method_account.getThemes_param_hash_type_int' => '[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)',
  'method_messages.sendEncrypted_param_random_id_type_long' => 'Unique client message ID, necessary to avoid message resending',
  'method_messages.sendEncrypted_param_data_type_bytes' => 'TL-serialization of [DecryptedMessage](../types/DecryptedMessage.md) type, encrypted with a key that was created during chat initialization',
  'method_auth.dropTempAuthKeys_param_except_auth_keys_type_Vector long' => 'The auth keys that **shouldn\'t** be dropped.',
  'method_messages.reorderPinnedDialogs_param_order_type_Vector InputDialogPeer' => 'New dialog order',
  'method_help.saveAppLog_param_events_type_Vector InputAppEvent' => 'List of input events',
  'method_messages.getScheduledMessages_param_id_type_Vector int' => 'IDs of scheduled messages',
  'method_photos.deletePhotos_param_id_type_Vector InputPhoto' => 'Input photos to delete',
  'method_messages.sendEncryptedService_param_random_id_type_long' => 'Unique client message ID required to prevent message resending',
  'method_messages.sendEncryptedService_param_data_type_bytes' => 'TL-serialization of  [DecryptedMessage](../types/DecryptedMessage.md) type, encrypted with a key generated during chat initialization',
  'method_messages.sendMultiMedia_param_multi_media_type_Vector InputSingleMedia' => 'The medias to send',
  'method_contacts.importContacts_param_contacts_type_Vector InputContact' => 'List of contacts to import',
  'method_contacts.deleteContacts_param_id_type_Vector InputUser' => 'User ID list',
  'method_stickers.createStickerSet_param_stickers_type_Vector InputStickerSetItem' => 'Stickers',
  'method_channels.getAdminLog_param_admins_type_Vector InputUser' => 'Only show events from these admins',
  'method_help.editUserInfo_param_entities_type_Vector MessageEntity' => '[Message entities for styled text](https://core.telegram.org/api/entities)',
  'method_messages.editChatPhoto_param_chat_id_type_int' => 'Chat ID',
  'method_messages.getMessages_param_id_type_Vector InputMessage' => 'Message ID list',
  'method_messages.editInlineBotMessage_param_entities_type_Vector MessageEntity' => '[Message entities for styled text](https://core.telegram.org/api/entities)',
  'method_messages.getPeerDialogs_param_peers_type_Vector InputDialogPeer' => 'Peers',
  'method_messages.forwardMessages_param_id_type_Vector int' => 'IDs of messages',
  'method_messages.forwardMessages_param_random_id_type_Vector long' => 'Random ID to prevent resending of messages',
  'method_messages.getMessageReactionsList' => 'Get full message reaction list',
  'method_messages.getMessageReactionsList_param_peer_type_InputPeer' => 'Peer',
  'method_messages.getMessageReactionsList_param_id_type_int' => 'Message ID',
  'method_messages.getMessageReactionsList_param_reaction_type_string' => 'Get only reactions of this type (UTF8 emoji)',
  'method_messages.getMessageReactionsList_param_offset_type_string' => 'Offset (typically taken from the `next_offset` field of the returned [MessageReactionsList](../types/MessageReactionsList.md))',
  'method_messages.getMessageReactionsList_param_limit_type_int' => 'Maximum number of results to return, [see pagination](https://core.telegram.org/api/offsets)',
  'method_messages.editChatAdmin_param_chat_id_type_int' => 'The ID of the group',
  'method_invokeAfterMsgs_param_msg_ids_type_Vector long' => 'List of messages on which a current query depends',
  'object_botInlineMediaResultDocument_param_send_message_type_BotInlineMessage' => '',
  'object_botInlineMediaResultPhoto_param_send_message_type_BotInlineMessage' => '',
  'object_channelBannedRights_param_send_messages_type_true' => '',
  'method_messages.getMessagesReactions_param_id_type_Vector t' => '',
  'object_message_param_reactions_type_MessageReactions' => '',
  'object_message_param_restriction_reason_type_string' => '',
  'object_messageReactions_param_results_type_Vector t' => '',
  'method_auth.exportLoginToken' => '',
  'method_auth.exportLoginToken_param_api_id_type_int' => '',
  'method_auth.exportLoginToken_param_api_hash_type_string' => '',
  'method_auth.exportLoginToken_param_except_ids_type_Vector t' => '',
  'method_auth.importLoginToken' => '',
  'method_auth.importLoginToken_param_token_type_bytes' => '',
  'method_auth.acceptLoginToken' => '',
  'method_auth.acceptLoginToken_param_token_type_bytes' => '',
  'method_account.createTheme_param_settings_type_InputThemeSettings' => '',
  'method_account.updateTheme_param_settings_type_InputThemeSettings' => '',
  'method_account.setContentSettings' => '',
  'method_account.setContentSettings_param_sensitive_enabled_type_true' => '',
  'method_account.getContentSettings' => '',
  'method_account.getMultiWallPapers' => '',
  'method_account.getMultiWallPapers_param_wallpapers_type_Vector t' => '',
  'method_messages.getPollVotes' => '',
  'method_messages.getPollVotes_param_peer_type_InputPeer' => '',
  'method_messages.getPollVotes_param_id_type_int' => '',
  'method_messages.getPollVotes_param_option_type_bytes' => '',
  'method_messages.getPollVotes_param_offset_type_string' => '',
  'method_messages.getPollVotes_param_limit_type_int' => '',
  'method_upload.getFile_param_cdn_supported_type_true' => '',
  'method_channels.getInactiveChannels' => '',
  'object_inputMediaPoll_param_correct_answers_type_Vector t' => '',
  'object_wallPaperNoFile' => '',
  'object_wallPaperNoFile_param_default_type_true' => '',
  'object_wallPaperNoFile_param_dark_type_true' => '',
  'object_wallPaperNoFile_param_settings_type_WallPaperSettings' => '',
  'object_updateGeoLiveViewed' => '',
  'object_updateGeoLiveViewed_param_peer_type_Peer' => '',
  'object_updateGeoLiveViewed_param_msg_id_type_int' => '',
  'object_updateLoginToken' => '',
  'object_updateMessagePollVote' => '',
  'object_updateMessagePollVote_param_poll_id_type_long' => '',
  'object_updateMessagePollVote_param_user_id_type_int' => '',
  'object_updateMessagePollVote_param_options_type_Vector t' => '',
  'object_webPage_param_attributes_type_Vector t' => '',
  'object_keyboardButtonRequestPoll' => '',
  'object_keyboardButtonRequestPoll_param_quiz_type_Bool' => '',
  'object_keyboardButtonRequestPoll_param_text_type_string' => '',
  'object_poll_param_public_voters_type_true' => '',
  'object_poll_param_multiple_choice_type_true' => '',
  'object_poll_param_quiz_type_true' => '',
  'object_pollAnswerVoters_param_correct_type_true' => '',
  'object_pollResults_param_recent_voters_type_Vector t' => '',
  'object_inputWallPaperNoFile' => '',
  'object_wallPaperSettings_param_second_background_color_type_int' => '',
  'object_wallPaperSettings_param_rotation_type_int' => '',
  'object_autoDownloadSettings_param_video_upload_maxbitrate_type_int' => '',
  'object_theme_param_settings_type_ThemeSettings' => '',
  'object_auth.loginToken' => '',
  'object_auth.loginToken_param_expires_type_int' => '',
  'object_auth.loginToken_param_token_type_bytes' => '',
  'object_auth.loginTokenMigrateTo' => '',
  'object_auth.loginTokenMigrateTo_param_dc_id_type_int' => '',
  'object_auth.loginTokenMigrateTo_param_token_type_bytes' => '',
  'object_auth.loginTokenSuccess' => '',
  'object_auth.loginTokenSuccess_param_authorization_type_auth.Authorization' => '',
  'object_account.contentSettings' => '',
  'object_account.contentSettings_param_sensitive_enabled_type_true' => '',
  'object_account.contentSettings_param_sensitive_can_change_type_true' => '',
  'object_messages.inactiveChats' => '',
  'object_messages.inactiveChats_param_dates_type_Vector t' => '',
  'object_messages.inactiveChats_param_chats_type_Vector t' => '',
  'object_messages.inactiveChats_param_users_type_Vector t' => '',
  'object_baseThemeClassic' => '',
  'object_baseThemeDay' => '',
  'object_baseThemeNight' => '',
  'object_baseThemeTinted' => '',
  'object_baseThemeArctic' => '',
  'object_inputThemeSettings' => '',
  'object_inputThemeSettings_param_base_theme_type_BaseTheme' => '',
  'object_inputThemeSettings_param_accent_color_type_int' => '',
  'object_inputThemeSettings_param_message_top_color_type_int' => '',
  'object_inputThemeSettings_param_message_bottom_color_type_int' => '',
  'object_inputThemeSettings_param_wallpaper_type_InputWallPaper' => '',
  'object_inputThemeSettings_param_wallpaper_settings_type_WallPaperSettings' => '',
  'object_themeSettings' => '',
  'object_themeSettings_param_base_theme_type_BaseTheme' => '',
  'object_themeSettings_param_accent_color_type_int' => '',
  'object_themeSettings_param_message_top_color_type_int' => '',
  'object_themeSettings_param_message_bottom_color_type_int' => '',
  'object_themeSettings_param_wallpaper_type_WallPaper' => '',
  'object_webPageAttributeTheme' => '',
  'object_webPageAttributeTheme_param_documents_type_Vector t' => '',
  'object_webPageAttributeTheme_param_settings_type_ThemeSettings' => '',
  'object_messageUserVote' => '',
  'object_messageUserVote_param_user_id_type_int' => '',
  'object_messageUserVote_param_option_type_bytes' => '',
  'object_messageUserVote_param_date_type_int' => '',
  'object_messageUserVoteInputOption' => '',
  'object_messageUserVoteInputOption_param_user_id_type_int' => '',
  'object_messageUserVoteInputOption_param_date_type_int' => '',
  'object_messageUserVoteMultiple' => '',
  'object_messageUserVoteMultiple_param_user_id_type_int' => '',
  'object_messageUserVoteMultiple_param_options_type_Vector t' => '',
  'object_messageUserVoteMultiple_param_date_type_int' => '',
  'object_messages.votesList' => '',
  'object_messages.votesList_param_count_type_int' => '',
  'object_messages.votesList_param_votes_type_Vector t' => '',
  'object_messages.votesList_param_users_type_Vector t' => '',
  'object_messages.votesList_param_next_offset_type_string' => '',
];
}
